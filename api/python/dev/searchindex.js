Search.setIndex({"alltitles": {"ABS": [[1359, "abs"]], "ACOS": [[1362, "acos"]], "ACOSD": [[1362, "acosd"]], "ARRAY_AGG": [[1355, "array-agg"]], "ARRAY_CONTAINS": [[1355, "array-contains"]], "ARRAY_GET": [[1355, "array-get"]], "ARRAY_LENGTH": [[1355, "array-length"]], "ARRAY_LOWER": [[1355, "array-lower"]], "ARRAY_MEAN": [[1355, "array-mean"]], "ARRAY_REVERSE": [[1355, "array-reverse"]], "ARRAY_SUM": [[1355, "array-sum"]], "ARRAY_TO_STRING": [[1355, "array-to-string"]], "ARRAY_UNIQUE": [[1355, "array-unique"]], "ARRAY_UPPER": [[1355, "array-upper"]], "ASIN": [[1362, "asin"]], "ASIND": [[1362, "asind"]], "ATAN": [[1362, "atan"]], "ATAN2": [[1362, "atan2"]], "ATAN2D": [[1362, "atan2d"]], "ATAND": [[1362, "atand"]], "AVG": [[1354, "avg"]], "Aggregate": [[1354, null]], "Aggregation": [[193, null], [345, null], [842, null], [949, null]], "Aliases": [[1354, null], [1354, null], [1359, null], [1359, null], [1360, null], [1360, null]], "Array": [[820, null], [1329, null], [1355, null]], "Asserts": [[1368, "asserts"]], "Attributes": [[333, null], [937, null], [1330, null]], "Available registrations": [[1, "available-registrations"]], "Avro": [[841, "avro"]], "BIT_AND": [[1356, "bit-and"]], "BIT_COUNT": [[1356, "bit-count"]], "BIT_LENGTH": [[1360, "bit-length"]], "BIT_OR": [[1356, "bit-or"]], "BIT_XOR": [[1356, "bit-xor"]], "Binary": [[821, null], [834, "binary"], [1331, null]], "Boolean": [[822, null], [1332, null]], "CAST": [[1363, "cast"]], "CBRT": [[1359, "cbrt"]], "CEIL": [[1359, "ceil"]], "COALESCE": [[1357, "coalesce"]], "CONCAT": [[1360, "concat"]], "CONCAT_WS": [[1360, "concat-ws"]], "COS": [[1362, "cos"]], "COSD": [[1362, "cosd"]], "COT": [[1362, "cot"]], "COTD": [[1362, "cotd"]], "COUNT": [[1354, "count"]], "CREATE TABLE": [[1367, "create-table"]], "CSV": [[841, "csv"]], "Catalog": [[190, null]], "Categories": [[823, null], [1333, null]], "Clipboard": [[841, "clipboard"]], "Cloud Credentials": [[841, "cloud-credentials"]], "Columns / names": [[825, null]], "Comparison": [[834, "comparison"], [1341, "comparison"]], "Computation": [[334, null], [826, null], [1334, null]], "Conditional": [[1357, null]], "Config": [[192, null]], "Config load, save, state": [[192, "config-load-save-state"]], "Config options": [[192, "config-options"]], "Conjunction": [[834, "conjunction"]], "Conversion": [[839, "conversion"]], "DATE": [[1360, "date"]], "DATE_PART": [[1361, "date-part"]], "DEGREES": [[1362, "degrees"]], "DISTINCT": [[1353, "distinct"]], "DIV": [[1359, "div"]], "DROP TABLES": [[1367, "drop-tables"]], "Data types": [[343, null]], "DataFrame": [[338, null]], "DataType": [[343, "datatype"]], "Database": [[841, "database"]], "Delta Lake": [[841, "delta-lake"]], "Descriptive": [[335, null], [938, null], [1335, null]], "Documentation": [[1365, null], [1365, null], [1365, null]], "ENDS_WITH": [[1360, "ends-with"]], "EXCEPT": [[1366, "except"]], "EXP": [[1359, "exp"]], "EXPLAIN": [[1367, "explain"]], "EXTRACT": [[1361, "extract"]], "Errors": [[344, "errors"]], "Examples": [[1, "examples"], [948, "examples"], [1368, "examples"]], "Excel / ODS": [[841, "excel-ods"]], "Exceptions": [[344, null]], "Export": [[336, null], [1336, null]], "Expression SQL": [[1365, "expression-sql"]], "Expression plugins": [[946, "expression-plugins"]], "Expressions": [[828, null]], "Extending the API": [[1, null]], "FIRST": [[1354, "first"]], "FLOOR": [[1359, "floor"]], "FROM": [[1353, "from"]], "Feather / IPC": [[841, "feather-ipc"]], "Frame SQL": [[1365, "frame-sql"]], "Functions": [[827, null], [839, null], [948, "functions"]], "GPUEngine": [[939, null]], "GREATEST": [[1357, "greatest"]], "GROUP BY": [[1353, "group-by"]], "Global SQL": [[1365, "global-sql"]], "GroupBy": [[337, null], [940, null]], "HAVING": [[1353, "having"]], "IF": [[1357, "if"]], "IFNULL": [[1357, "ifnull"]], "INITCAP": [[1360, "initcap"]], "INTERSECT": [[1366, "intersect"]], "IO plugins": [[946, "io-plugins"]], "Iceberg": [[841, "iceberg"]], "Importing": [[948, "importing"]], "InProcessQuery": [[941, null]], "Index": [[0, null]], "Input/output": [[841, null]], "Introduction": [[1365, "introduction"]], "JOIN": [[1353, "join"]], "JSON": [[841, "json"]], "LAST": [[1354, "last"]], "LEAST": [[1357, "least"]], "LEFT": [[1360, "left"]], "LENGTH": [[1360, "length"]], "LIMIT": [[1353, "limit"]], "LN": [[1359, "ln"]], "LOG": [[1359, "log"]], "LOG10": [[1359, "log10"]], "LOG1P": [[1359, "log1p"]], "LOG2": [[1359, "log2"]], "LOWER": [[1360, "lower"]], "LTRIM": [[1360, "ltrim"]], "LazyFrame": [[942, null]], "List": [[829, null], [1338, null]], "MAX": [[1354, "max"]], "MEDIAN": [[1354, "median"]], "MIN": [[1354, "min"]], "MOD": [[1359, "mod"]], "Manipulation/selection": [[340, null], [832, null], [944, null], [1340, null]], "Math": [[1359, null]], "Meta": [[830, null]], "Metadata": [[945, null]], "Methods": [[1365, "methods"]], "Miscellaneous": [[339, null], [831, null], [839, "miscellaneous"], [943, null], [1339, null]], "Multiple Config instances": [[192, "multiple-config-instances"]], "NORMALIZE": [[1360, "normalize"]], "NULLIF": [[1357, "nullif"]], "Name": [[833, null]], "Nested": [[343, "nested"]], "Numeric": [[343, "numeric"], [834, "numeric"], [1341, "numeric"]], "OCTET_LENGTH": [[1360, "octet-length"]], "OFFSET": [[1353, "offset"]], "ORDER BY": [[1353, "order-by"]], "Operators": [[834, null], [1341, null]], "Other": [[343, "other"]], "PI": [[1359, "pi"]], "POW": [[1359, "pow"]], "Panic": [[344, "panic"]], "Parallelization": [[839, "parallelization"]], "Parametric testing": [[1368, "parametric-testing"]], "Parquet": [[841, "parquet"]], "Plot": [[341, null], [1342, null]], "Plugins": [[946, null]], "Polars strategies": [[1368, "polars-strategies"]], "Profiles": [[1368, "profiles"]], "Providing new functionality": [[1, "providing-new-functionality"]], "PyArrow Datasets": [[841, "pyarrow-datasets"]], "Python API": [[1365, null]], "Python API reference": [[840, null]], "QUANTILE_CONT": [[1354, "quantile-cont"]], "QUANTILE_DISC": [[1354, "quantile-disc"]], "Querying": [[1365, "querying"]], "RADIANS": [[1362, "radians"]], "REGEXP_LIKE": [[1360, "regexp-like"]], "REPLACE": [[1360, "replace"]], "REVERSE": [[1360, "reverse"]], "RIGHT": [[1360, "right"]], "ROUND": [[1359, "round"]], "RTRIM": [[1360, "rtrim"]], "Random": [[839, "random"]], "SELECT": [[1353, "select"]], "SHOW TABLES": [[1367, "show-tables"]], "SIGN": [[1359, "sign"]], "SIN": [[1362, "sin"]], "SIND": [[1362, "sind"]], "SQL Clauses": [[1353, null]], "SQL Functions": [[1358, null]], "SQL Interface": [[1364, null]], "SQLContext": [[1365, "sqlcontext"]], "SQRT": [[1359, "sqrt"]], "STARTS_WITH": [[1360, "starts-with"]], "STDDEV": [[1354, "stddev"]], "STRFTIME": [[1361, "strftime"]], "STRPOS": [[1360, "strpos"]], "STRPTIME": [[1360, "strptime"]], "SUBSTR": [[1360, "substr"]], "SUM": [[1354, "sum"]], "Schema": [[947, null]], "Selectors": [[948, null]], "Serialization": [[339, "serialization"], [943, "serialization"]], "Series": [[1337, null]], "Set Operations": [[1366, null]], "Set operations": [[948, "set-operations"]], "Strategy helpers": [[1368, "strategy-helpers"]], "String": [[343, "string"], [835, null], [1343, null], [1360, null]], "StringCache": [[839, "stringcache"]], "Struct": [[836, null], [1344, null]], "Style": [[342, null]], "TAN": [[1362, "tan"]], "TAND": [[1362, "tand"]], "TIMESTAMP": [[1360, "timestamp"]], "TRUNCATE": [[1367, "truncate"]], "TRY_CAST": [[1363, "try-cast"]], "Table Operations": [[1367, null]], "Temporal": [[343, "temporal"], [837, null], [1345, null], [1356, null], [1361, null]], "Testing": [[1368, null]], "Trigonometry": [[1362, null]], "Types": [[1363, null]], "UNION": [[1366, "union"]], "UNION ALL": [[1366, "union-all"]], "UNION BY NAME": [[1366, "union-by-name"]], "UNNEST": [[1355, "unnest"], [1367, "unnest"]], "UPPER": [[1360, "upper"]], "Unity Catalog": [[191, null]], "Use as a context manager": [[192, "use-as-a-context-manager"]], "Use as a decorator": [[192, "use-as-a-decorator"]], "VARIANCE": [[1354, "variance"]], "WHERE": [[1353, "where"]], "Warnings": [[344, "warnings"]], "Window": [[838, null]], "polars.Catalog": [[177, null]], "polars.Catalog.get_table_info": [[178, null]], "polars.Catalog.list_catalogs": [[179, null]], "polars.Catalog.list_namespaces": [[180, null]], "polars.Catalog.list_tables": [[181, null]], "polars.Catalog.scan_table": [[182, null]], "polars.Config.load": [[2, null]], "polars.Config.load_from_file": [[3, null]], "polars.Config.restore_defaults": [[4, null]], "polars.Config.save": [[5, null]], "polars.Config.save_to_file": [[6, null]], "polars.Config.set_ascii_tables": [[7, null]], "polars.Config.set_auto_structify": [[8, null]], "polars.Config.set_decimal_separator": [[9, null]], "polars.Config.set_float_precision": [[10, null]], "polars.Config.set_fmt_float": [[11, null]], "polars.Config.set_fmt_str_lengths": [[12, null]], "polars.Config.set_fmt_table_cell_list_len": [[13, null]], "polars.Config.set_streaming_chunk_size": [[14, null]], "polars.Config.set_tbl_cell_alignment": [[15, null]], "polars.Config.set_tbl_cell_numeric_alignment": [[16, null]], "polars.Config.set_tbl_cols": [[17, null]], "polars.Config.set_tbl_column_data_type_inline": [[18, null]], "polars.Config.set_tbl_dataframe_shape_below": [[19, null]], "polars.Config.set_tbl_formatting": [[20, null]], "polars.Config.set_tbl_hide_column_data_types": [[21, null]], "polars.Config.set_tbl_hide_column_names": [[22, null]], "polars.Config.set_tbl_hide_dataframe_shape": [[23, null]], "polars.Config.set_tbl_hide_dtype_separator": [[24, null]], "polars.Config.set_tbl_rows": [[25, null]], "polars.Config.set_tbl_width_chars": [[26, null]], "polars.Config.set_thousands_separator": [[27, null]], "polars.Config.set_trim_decimal_zeros": [[28, null]], "polars.Config.set_verbose": [[29, null]], "polars.Config.state": [[30, null]], "polars.CredentialProvider": [[31, null]], "polars.CredentialProviderAWS": [[32, null]], "polars.CredentialProviderAzure": [[33, null]], "polars.CredentialProviderGCP": [[34, null]], "polars.DataFrame.__array__": [[194, null]], "polars.DataFrame.__arrow_c_stream__": [[195, null]], "polars.DataFrame.__dataframe__": [[196, null]], "polars.DataFrame.__getitem__": [[197, null]], "polars.DataFrame.approx_n_unique": [[198, null]], "polars.DataFrame.bottom_k": [[199, null]], "polars.DataFrame.cast": [[200, null]], "polars.DataFrame.clear": [[201, null]], "polars.DataFrame.clone": [[202, null]], "polars.DataFrame.collect_schema": [[203, null]], "polars.DataFrame.columns": [[204, null]], "polars.DataFrame.corr": [[205, null]], "polars.DataFrame.count": [[206, null]], "polars.DataFrame.describe": [[207, null]], "polars.DataFrame.deserialize": [[208, null]], "polars.DataFrame.drop": [[209, null]], "polars.DataFrame.drop_in_place": [[210, null]], "polars.DataFrame.drop_nans": [[211, null]], "polars.DataFrame.drop_nulls": [[212, null]], "polars.DataFrame.dtypes": [[213, null]], "polars.DataFrame.equals": [[214, null]], "polars.DataFrame.estimated_size": [[215, null]], "polars.DataFrame.explode": [[216, null]], "polars.DataFrame.extend": [[217, null]], "polars.DataFrame.fill_nan": [[218, null]], "polars.DataFrame.fill_null": [[219, null]], "polars.DataFrame.filter": [[220, null]], "polars.DataFrame.flags": [[221, null]], "polars.DataFrame.fold": [[222, null]], "polars.DataFrame.gather_every": [[223, null]], "polars.DataFrame.get_column": [[224, null]], "polars.DataFrame.get_column_index": [[225, null]], "polars.DataFrame.get_columns": [[226, null]], "polars.DataFrame.glimpse": [[227, null]], "polars.DataFrame.group_by": [[228, null]], "polars.DataFrame.group_by_dynamic": [[229, null]], "polars.DataFrame.hash_rows": [[230, null]], "polars.DataFrame.head": [[231, null]], "polars.DataFrame.height": [[232, null]], "polars.DataFrame.hstack": [[233, null]], "polars.DataFrame.insert_column": [[234, null]], "polars.DataFrame.interpolate": [[235, null]], "polars.DataFrame.is_duplicated": [[236, null]], "polars.DataFrame.is_empty": [[237, null]], "polars.DataFrame.is_unique": [[238, null]], "polars.DataFrame.item": [[239, null]], "polars.DataFrame.iter_columns": [[240, null]], "polars.DataFrame.iter_rows": [[241, null]], "polars.DataFrame.iter_slices": [[242, null]], "polars.DataFrame.join": [[243, null]], "polars.DataFrame.join_asof": [[244, null]], "polars.DataFrame.join_where": [[245, null]], "polars.DataFrame.lazy": [[246, null]], "polars.DataFrame.limit": [[247, null]], "polars.DataFrame.map_rows": [[248, null]], "polars.DataFrame.max": [[249, null]], "polars.DataFrame.max_horizontal": [[250, null]], "polars.DataFrame.mean": [[251, null]], "polars.DataFrame.mean_horizontal": [[252, null]], "polars.DataFrame.median": [[253, null]], "polars.DataFrame.melt": [[254, null]], "polars.DataFrame.merge_sorted": [[255, null]], "polars.DataFrame.min": [[256, null]], "polars.DataFrame.min_horizontal": [[257, null]], "polars.DataFrame.n_chunks": [[258, null]], "polars.DataFrame.n_unique": [[259, null]], "polars.DataFrame.null_count": [[260, null]], "polars.DataFrame.partition_by": [[261, null]], "polars.DataFrame.pipe": [[262, null]], "polars.DataFrame.pivot": [[263, null]], "polars.DataFrame.product": [[264, null]], "polars.DataFrame.quantile": [[265, null]], "polars.DataFrame.rechunk": [[266, null]], "polars.DataFrame.rename": [[267, null]], "polars.DataFrame.replace_column": [[268, null]], "polars.DataFrame.reverse": [[269, null]], "polars.DataFrame.rolling": [[270, null]], "polars.DataFrame.row": [[271, null]], "polars.DataFrame.rows": [[272, null]], "polars.DataFrame.rows_by_key": [[273, null]], "polars.DataFrame.sample": [[274, null]], "polars.DataFrame.schema": [[275, null]], "polars.DataFrame.select": [[276, null]], "polars.DataFrame.select_seq": [[277, null]], "polars.DataFrame.serialize": [[278, null]], "polars.DataFrame.set_sorted": [[279, null]], "polars.DataFrame.shape": [[280, null]], "polars.DataFrame.shift": [[281, null]], "polars.DataFrame.shrink_to_fit": [[282, null]], "polars.DataFrame.slice": [[283, null]], "polars.DataFrame.sort": [[284, null]], "polars.DataFrame.sql": [[285, null]], "polars.DataFrame.std": [[286, null]], "polars.DataFrame.sum": [[287, null]], "polars.DataFrame.sum_horizontal": [[288, null]], "polars.DataFrame.tail": [[289, null]], "polars.DataFrame.to_arrow": [[290, null]], "polars.DataFrame.to_dict": [[291, null]], "polars.DataFrame.to_dicts": [[292, null]], "polars.DataFrame.to_dummies": [[293, null]], "polars.DataFrame.to_init_repr": [[294, null]], "polars.DataFrame.to_jax": [[295, null]], "polars.DataFrame.to_numpy": [[296, null]], "polars.DataFrame.to_pandas": [[297, null]], "polars.DataFrame.to_series": [[298, null]], "polars.DataFrame.to_struct": [[299, null]], "polars.DataFrame.to_torch": [[300, null]], "polars.DataFrame.top_k": [[301, null]], "polars.DataFrame.transpose": [[302, null]], "polars.DataFrame.unique": [[303, null]], "polars.DataFrame.unnest": [[304, null]], "polars.DataFrame.unpivot": [[305, null]], "polars.DataFrame.unstack": [[306, null]], "polars.DataFrame.update": [[307, null]], "polars.DataFrame.upsample": [[308, null]], "polars.DataFrame.var": [[309, null]], "polars.DataFrame.vstack": [[310, null]], "polars.DataFrame.width": [[311, null]], "polars.DataFrame.with_columns": [[312, null]], "polars.DataFrame.with_columns_seq": [[313, null]], "polars.DataFrame.with_row_count": [[314, null]], "polars.DataFrame.with_row_index": [[315, null]], "polars.DataFrame.write_avro": [[35, null]], "polars.DataFrame.write_clipboard": [[36, null]], "polars.DataFrame.write_csv": [[37, null]], "polars.DataFrame.write_database": [[38, null]], "polars.DataFrame.write_delta": [[39, null]], "polars.DataFrame.write_excel": [[40, null]], "polars.DataFrame.write_ipc": [[41, null]], "polars.DataFrame.write_ipc_stream": [[42, null]], "polars.DataFrame.write_json": [[43, null]], "polars.DataFrame.write_ndjson": [[44, null]], "polars.DataFrame.write_parquet": [[45, null]], "polars.Expr.abs": [[346, null]], "polars.Expr.add": [[347, null]], "polars.Expr.agg_groups": [[348, null]], "polars.Expr.alias": [[349, null]], "polars.Expr.all": [[350, null]], "polars.Expr.and_": [[351, null]], "polars.Expr.any": [[352, null]], "polars.Expr.append": [[353, null]], "polars.Expr.approx_n_unique": [[354, null]], "polars.Expr.arccos": [[355, null]], "polars.Expr.arccosh": [[356, null]], "polars.Expr.arcsin": [[357, null]], "polars.Expr.arcsinh": [[358, null]], "polars.Expr.arctan": [[359, null]], "polars.Expr.arctanh": [[360, null]], "polars.Expr.arg_max": [[361, null]], "polars.Expr.arg_min": [[362, null]], "polars.Expr.arg_sort": [[363, null]], "polars.Expr.arg_true": [[364, null]], "polars.Expr.arg_unique": [[365, null]], "polars.Expr.arr.all": [[366, null]], "polars.Expr.arr.any": [[367, null]], "polars.Expr.arr.arg_max": [[368, null]], "polars.Expr.arr.arg_min": [[369, null]], "polars.Expr.arr.contains": [[370, null]], "polars.Expr.arr.count_matches": [[371, null]], "polars.Expr.arr.explode": [[372, null]], "polars.Expr.arr.first": [[373, null]], "polars.Expr.arr.get": [[374, null]], "polars.Expr.arr.join": [[375, null]], "polars.Expr.arr.last": [[376, null]], "polars.Expr.arr.max": [[377, null]], "polars.Expr.arr.median": [[378, null]], "polars.Expr.arr.min": [[379, null]], "polars.Expr.arr.n_unique": [[380, null]], "polars.Expr.arr.reverse": [[381, null]], "polars.Expr.arr.shift": [[382, null]], "polars.Expr.arr.sort": [[383, null]], "polars.Expr.arr.std": [[384, null]], "polars.Expr.arr.sum": [[385, null]], "polars.Expr.arr.to_list": [[386, null]], "polars.Expr.arr.to_struct": [[387, null]], "polars.Expr.arr.unique": [[388, null]], "polars.Expr.arr.var": [[389, null]], "polars.Expr.backward_fill": [[390, null]], "polars.Expr.bin.contains": [[391, null]], "polars.Expr.bin.decode": [[392, null]], "polars.Expr.bin.encode": [[393, null]], "polars.Expr.bin.ends_with": [[394, null]], "polars.Expr.bin.reinterpret": [[395, null]], "polars.Expr.bin.size": [[396, null]], "polars.Expr.bin.starts_with": [[397, null]], "polars.Expr.bitwise_and": [[398, null]], "polars.Expr.bitwise_count_ones": [[399, null]], "polars.Expr.bitwise_count_zeros": [[400, null]], "polars.Expr.bitwise_leading_ones": [[401, null]], "polars.Expr.bitwise_leading_zeros": [[402, null]], "polars.Expr.bitwise_or": [[403, null]], "polars.Expr.bitwise_trailing_ones": [[404, null]], "polars.Expr.bitwise_trailing_zeros": [[405, null]], "polars.Expr.bitwise_xor": [[406, null]], "polars.Expr.bottom_k": [[407, null]], "polars.Expr.bottom_k_by": [[408, null]], "polars.Expr.cast": [[409, null]], "polars.Expr.cat.ends_with": [[410, null]], "polars.Expr.cat.get_categories": [[411, null]], "polars.Expr.cat.len_bytes": [[412, null]], "polars.Expr.cat.len_chars": [[413, null]], "polars.Expr.cat.starts_with": [[414, null]], "polars.Expr.cbrt": [[415, null]], "polars.Expr.ceil": [[416, null]], "polars.Expr.clip": [[417, null]], "polars.Expr.cos": [[418, null]], "polars.Expr.cosh": [[419, null]], "polars.Expr.cot": [[420, null]], "polars.Expr.count": [[421, null]], "polars.Expr.cum_count": [[422, null]], "polars.Expr.cum_max": [[423, null]], "polars.Expr.cum_min": [[424, null]], "polars.Expr.cum_prod": [[425, null]], "polars.Expr.cum_sum": [[426, null]], "polars.Expr.cumulative_eval": [[427, null]], "polars.Expr.cut": [[428, null]], "polars.Expr.degrees": [[429, null]], "polars.Expr.deserialize": [[430, null]], "polars.Expr.diff": [[431, null]], "polars.Expr.dot": [[432, null]], "polars.Expr.drop_nans": [[433, null]], "polars.Expr.drop_nulls": [[434, null]], "polars.Expr.dt.add_business_days": [[435, null]], "polars.Expr.dt.base_utc_offset": [[436, null]], "polars.Expr.dt.cast_time_unit": [[437, null]], "polars.Expr.dt.century": [[438, null]], "polars.Expr.dt.combine": [[439, null]], "polars.Expr.dt.convert_time_zone": [[440, null]], "polars.Expr.dt.date": [[441, null]], "polars.Expr.dt.datetime": [[442, null]], "polars.Expr.dt.day": [[443, null]], "polars.Expr.dt.dst_offset": [[444, null]], "polars.Expr.dt.epoch": [[445, null]], "polars.Expr.dt.hour": [[446, null]], "polars.Expr.dt.is_leap_year": [[447, null]], "polars.Expr.dt.iso_year": [[448, null]], "polars.Expr.dt.microsecond": [[449, null]], "polars.Expr.dt.millennium": [[450, null]], "polars.Expr.dt.millisecond": [[451, null]], "polars.Expr.dt.minute": [[452, null]], "polars.Expr.dt.month": [[453, null]], "polars.Expr.dt.month_end": [[454, null]], "polars.Expr.dt.month_start": [[455, null]], "polars.Expr.dt.nanosecond": [[456, null]], "polars.Expr.dt.offset_by": [[457, null]], "polars.Expr.dt.ordinal_day": [[458, null]], "polars.Expr.dt.quarter": [[459, null]], "polars.Expr.dt.replace": [[460, null]], "polars.Expr.dt.replace_time_zone": [[461, null]], "polars.Expr.dt.round": [[462, null]], "polars.Expr.dt.second": [[463, null]], "polars.Expr.dt.strftime": [[464, null]], "polars.Expr.dt.time": [[465, null]], "polars.Expr.dt.timestamp": [[466, null]], "polars.Expr.dt.to_string": [[467, null]], "polars.Expr.dt.total_days": [[468, null]], "polars.Expr.dt.total_hours": [[469, null]], "polars.Expr.dt.total_microseconds": [[470, null]], "polars.Expr.dt.total_milliseconds": [[471, null]], "polars.Expr.dt.total_minutes": [[472, null]], "polars.Expr.dt.total_nanoseconds": [[473, null]], "polars.Expr.dt.total_seconds": [[474, null]], "polars.Expr.dt.truncate": [[475, null]], "polars.Expr.dt.week": [[476, null]], "polars.Expr.dt.weekday": [[477, null]], "polars.Expr.dt.with_time_unit": [[478, null]], "polars.Expr.dt.year": [[479, null]], "polars.Expr.entropy": [[480, null]], "polars.Expr.eq": [[481, null]], "polars.Expr.eq_missing": [[482, null]], "polars.Expr.ewm_mean": [[483, null]], "polars.Expr.ewm_mean_by": [[484, null]], "polars.Expr.ewm_std": [[485, null]], "polars.Expr.ewm_var": [[486, null]], "polars.Expr.exclude": [[487, null]], "polars.Expr.exp": [[488, null]], "polars.Expr.explode": [[489, null]], "polars.Expr.extend_constant": [[490, null]], "polars.Expr.fill_nan": [[491, null]], "polars.Expr.fill_null": [[492, null]], "polars.Expr.filter": [[493, null]], "polars.Expr.first": [[494, null]], "polars.Expr.flatten": [[495, null]], "polars.Expr.floor": [[496, null]], "polars.Expr.floordiv": [[497, null]], "polars.Expr.forward_fill": [[498, null]], "polars.Expr.from_json": [[499, null]], "polars.Expr.gather": [[500, null]], "polars.Expr.gather_every": [[501, null]], "polars.Expr.ge": [[502, null]], "polars.Expr.get": [[503, null]], "polars.Expr.gt": [[504, null]], "polars.Expr.has_nulls": [[505, null]], "polars.Expr.hash": [[506, null]], "polars.Expr.head": [[507, null]], "polars.Expr.hist": [[508, null]], "polars.Expr.implode": [[509, null]], "polars.Expr.index_of": [[510, null]], "polars.Expr.inspect": [[511, null]], "polars.Expr.interpolate": [[512, null]], "polars.Expr.interpolate_by": [[513, null]], "polars.Expr.is_between": [[514, null]], "polars.Expr.is_duplicated": [[515, null]], "polars.Expr.is_finite": [[516, null]], "polars.Expr.is_first_distinct": [[517, null]], "polars.Expr.is_in": [[518, null]], "polars.Expr.is_infinite": [[519, null]], "polars.Expr.is_last_distinct": [[520, null]], "polars.Expr.is_nan": [[521, null]], "polars.Expr.is_not_nan": [[522, null]], "polars.Expr.is_not_null": [[523, null]], "polars.Expr.is_null": [[524, null]], "polars.Expr.is_unique": [[525, null]], "polars.Expr.kurtosis": [[526, null]], "polars.Expr.last": [[527, null]], "polars.Expr.le": [[528, null]], "polars.Expr.len": [[529, null]], "polars.Expr.limit": [[530, null]], "polars.Expr.list.all": [[531, null]], "polars.Expr.list.any": [[532, null]], "polars.Expr.list.arg_max": [[533, null]], "polars.Expr.list.arg_min": [[534, null]], "polars.Expr.list.concat": [[535, null]], "polars.Expr.list.contains": [[536, null]], "polars.Expr.list.count_matches": [[537, null]], "polars.Expr.list.diff": [[538, null]], "polars.Expr.list.drop_nulls": [[539, null]], "polars.Expr.list.eval": [[540, null]], "polars.Expr.list.explode": [[541, null]], "polars.Expr.list.first": [[542, null]], "polars.Expr.list.gather": [[543, null]], "polars.Expr.list.gather_every": [[544, null]], "polars.Expr.list.get": [[545, null]], "polars.Expr.list.head": [[546, null]], "polars.Expr.list.join": [[547, null]], "polars.Expr.list.last": [[548, null]], "polars.Expr.list.len": [[549, null]], "polars.Expr.list.max": [[550, null]], "polars.Expr.list.mean": [[551, null]], "polars.Expr.list.median": [[552, null]], "polars.Expr.list.min": [[553, null]], "polars.Expr.list.n_unique": [[554, null]], "polars.Expr.list.reverse": [[555, null]], "polars.Expr.list.sample": [[556, null]], "polars.Expr.list.set_difference": [[557, null]], "polars.Expr.list.set_intersection": [[558, null]], "polars.Expr.list.set_symmetric_difference": [[559, null]], "polars.Expr.list.set_union": [[560, null]], "polars.Expr.list.shift": [[561, null]], "polars.Expr.list.slice": [[562, null]], "polars.Expr.list.sort": [[563, null]], "polars.Expr.list.std": [[564, null]], "polars.Expr.list.sum": [[565, null]], "polars.Expr.list.tail": [[566, null]], "polars.Expr.list.to_array": [[567, null]], "polars.Expr.list.to_struct": [[568, null]], "polars.Expr.list.unique": [[569, null]], "polars.Expr.list.var": [[570, null]], "polars.Expr.log": [[571, null]], "polars.Expr.log10": [[572, null]], "polars.Expr.log1p": [[573, null]], "polars.Expr.lower_bound": [[574, null]], "polars.Expr.lt": [[575, null]], "polars.Expr.map_batches": [[576, null]], "polars.Expr.map_elements": [[577, null]], "polars.Expr.max": [[578, null]], "polars.Expr.mean": [[579, null]], "polars.Expr.median": [[580, null]], "polars.Expr.meta.eq": [[581, null]], "polars.Expr.meta.has_multiple_outputs": [[582, null]], "polars.Expr.meta.is_column": [[583, null]], "polars.Expr.meta.is_column_selection": [[584, null]], "polars.Expr.meta.is_literal": [[585, null]], "polars.Expr.meta.is_regex_projection": [[586, null]], "polars.Expr.meta.ne": [[587, null]], "polars.Expr.meta.output_name": [[588, null]], "polars.Expr.meta.pop": [[589, null]], "polars.Expr.meta.root_names": [[590, null]], "polars.Expr.meta.serialize": [[591, null]], "polars.Expr.meta.show_graph": [[592, null]], "polars.Expr.meta.tree_format": [[593, null]], "polars.Expr.meta.undo_aliases": [[594, null]], "polars.Expr.meta.write_json": [[595, null]], "polars.Expr.min": [[596, null]], "polars.Expr.mod": [[597, null]], "polars.Expr.mode": [[598, null]], "polars.Expr.mul": [[599, null]], "polars.Expr.n_unique": [[600, null]], "polars.Expr.name.keep": [[601, null]], "polars.Expr.name.map": [[602, null]], "polars.Expr.name.map_fields": [[603, null]], "polars.Expr.name.prefix": [[604, null]], "polars.Expr.name.prefix_fields": [[605, null]], "polars.Expr.name.suffix": [[606, null]], "polars.Expr.name.suffix_fields": [[607, null]], "polars.Expr.name.to_lowercase": [[608, null]], "polars.Expr.name.to_uppercase": [[609, null]], "polars.Expr.nan_max": [[610, null]], "polars.Expr.nan_min": [[611, null]], "polars.Expr.ne": [[612, null]], "polars.Expr.ne_missing": [[613, null]], "polars.Expr.neg": [[614, null]], "polars.Expr.not_": [[615, null]], "polars.Expr.null_count": [[616, null]], "polars.Expr.or_": [[617, null]], "polars.Expr.over": [[618, null]], "polars.Expr.pct_change": [[619, null]], "polars.Expr.peak_max": [[620, null]], "polars.Expr.peak_min": [[621, null]], "polars.Expr.pipe": [[622, null]], "polars.Expr.pow": [[623, null]], "polars.Expr.product": [[624, null]], "polars.Expr.qcut": [[625, null]], "polars.Expr.quantile": [[626, null]], "polars.Expr.radians": [[627, null]], "polars.Expr.rank": [[628, null]], "polars.Expr.rechunk": [[629, null]], "polars.Expr.reinterpret": [[630, null]], "polars.Expr.repeat_by": [[631, null]], "polars.Expr.replace": [[632, null]], "polars.Expr.replace_strict": [[633, null]], "polars.Expr.reshape": [[634, null]], "polars.Expr.reverse": [[635, null]], "polars.Expr.rle": [[636, null]], "polars.Expr.rle_id": [[637, null]], "polars.Expr.rolling": [[638, null]], "polars.Expr.rolling_map": [[639, null]], "polars.Expr.rolling_max": [[640, null]], "polars.Expr.rolling_max_by": [[641, null]], "polars.Expr.rolling_mean": [[642, null]], "polars.Expr.rolling_mean_by": [[643, null]], "polars.Expr.rolling_median": [[644, null]], "polars.Expr.rolling_median_by": [[645, null]], "polars.Expr.rolling_min": [[646, null]], "polars.Expr.rolling_min_by": [[647, null]], "polars.Expr.rolling_quantile": [[648, null]], "polars.Expr.rolling_quantile_by": [[649, null]], "polars.Expr.rolling_skew": [[650, null]], "polars.Expr.rolling_std": [[651, null]], "polars.Expr.rolling_std_by": [[652, null]], "polars.Expr.rolling_sum": [[653, null]], "polars.Expr.rolling_sum_by": [[654, null]], "polars.Expr.rolling_var": [[655, null]], "polars.Expr.rolling_var_by": [[656, null]], "polars.Expr.round": [[657, null]], "polars.Expr.round_sig_figs": [[658, null]], "polars.Expr.sample": [[659, null]], "polars.Expr.search_sorted": [[660, null]], "polars.Expr.set_sorted": [[661, null]], "polars.Expr.shift": [[662, null]], "polars.Expr.shrink_dtype": [[663, null]], "polars.Expr.shuffle": [[664, null]], "polars.Expr.sign": [[665, null]], "polars.Expr.sin": [[666, null]], "polars.Expr.sinh": [[667, null]], "polars.Expr.skew": [[668, null]], "polars.Expr.slice": [[669, null]], "polars.Expr.sort": [[670, null]], "polars.Expr.sort_by": [[671, null]], "polars.Expr.sqrt": [[672, null]], "polars.Expr.std": [[673, null]], "polars.Expr.str.concat": [[674, null]], "polars.Expr.str.contains": [[675, null]], "polars.Expr.str.contains_any": [[676, null]], "polars.Expr.str.count_matches": [[677, null]], "polars.Expr.str.decode": [[678, null]], "polars.Expr.str.encode": [[679, null]], "polars.Expr.str.ends_with": [[680, null]], "polars.Expr.str.escape_regex": [[681, null]], "polars.Expr.str.explode": [[682, null]], "polars.Expr.str.extract": [[683, null]], "polars.Expr.str.extract_all": [[684, null]], "polars.Expr.str.extract_groups": [[685, null]], "polars.Expr.str.extract_many": [[686, null]], "polars.Expr.str.find": [[687, null]], "polars.Expr.str.find_many": [[688, null]], "polars.Expr.str.head": [[689, null]], "polars.Expr.str.join": [[690, null]], "polars.Expr.str.json_decode": [[691, null]], "polars.Expr.str.json_path_match": [[692, null]], "polars.Expr.str.len_bytes": [[693, null]], "polars.Expr.str.len_chars": [[694, null]], "polars.Expr.str.normalize": [[695, null]], "polars.Expr.str.pad_end": [[696, null]], "polars.Expr.str.pad_start": [[697, null]], "polars.Expr.str.replace": [[698, null]], "polars.Expr.str.replace_all": [[699, null]], "polars.Expr.str.replace_many": [[700, null]], "polars.Expr.str.reverse": [[701, null]], "polars.Expr.str.slice": [[702, null]], "polars.Expr.str.split": [[703, null]], "polars.Expr.str.split_exact": [[704, null]], "polars.Expr.str.splitn": [[705, null]], "polars.Expr.str.starts_with": [[706, null]], "polars.Expr.str.strip_chars": [[707, null]], "polars.Expr.str.strip_chars_end": [[708, null]], "polars.Expr.str.strip_chars_start": [[709, null]], "polars.Expr.str.strip_prefix": [[710, null]], "polars.Expr.str.strip_suffix": [[711, null]], "polars.Expr.str.strptime": [[712, null]], "polars.Expr.str.tail": [[713, null]], "polars.Expr.str.to_date": [[714, null]], "polars.Expr.str.to_datetime": [[715, null]], "polars.Expr.str.to_decimal": [[716, null]], "polars.Expr.str.to_integer": [[717, null]], "polars.Expr.str.to_lowercase": [[718, null]], "polars.Expr.str.to_time": [[719, null]], "polars.Expr.str.to_titlecase": [[720, null]], "polars.Expr.str.to_uppercase": [[721, null]], "polars.Expr.str.zfill": [[722, null]], "polars.Expr.struct.field": [[723, null]], "polars.Expr.struct.json_encode": [[724, null]], "polars.Expr.struct.rename_fields": [[725, null]], "polars.Expr.struct.unnest": [[726, null]], "polars.Expr.struct.with_fields": [[727, null]], "polars.Expr.sub": [[728, null]], "polars.Expr.sum": [[729, null]], "polars.Expr.tail": [[730, null]], "polars.Expr.tan": [[731, null]], "polars.Expr.tanh": [[732, null]], "polars.Expr.to_physical": [[733, null]], "polars.Expr.top_k": [[734, null]], "polars.Expr.top_k_by": [[735, null]], "polars.Expr.truediv": [[736, null]], "polars.Expr.unique": [[737, null]], "polars.Expr.unique_counts": [[738, null]], "polars.Expr.upper_bound": [[739, null]], "polars.Expr.value_counts": [[740, null]], "polars.Expr.var": [[741, null]], "polars.Expr.where": [[742, null]], "polars.Expr.xor": [[743, null]], "polars.LazyFrame.approx_n_unique": [[843, null]], "polars.LazyFrame.bottom_k": [[844, null]], "polars.LazyFrame.cache": [[845, null]], "polars.LazyFrame.cast": [[846, null]], "polars.LazyFrame.clear": [[847, null]], "polars.LazyFrame.clone": [[848, null]], "polars.LazyFrame.collect": [[849, null]], "polars.LazyFrame.collect_async": [[850, null]], "polars.LazyFrame.collect_schema": [[851, null]], "polars.LazyFrame.columns": [[852, null]], "polars.LazyFrame.count": [[853, null]], "polars.LazyFrame.describe": [[854, null]], "polars.LazyFrame.deserialize": [[855, null]], "polars.LazyFrame.drop": [[856, null]], "polars.LazyFrame.drop_nans": [[857, null]], "polars.LazyFrame.drop_nulls": [[858, null]], "polars.LazyFrame.dtypes": [[859, null]], "polars.LazyFrame.explain": [[860, null]], "polars.LazyFrame.explode": [[861, null]], "polars.LazyFrame.fill_nan": [[862, null]], "polars.LazyFrame.fill_null": [[863, null]], "polars.LazyFrame.filter": [[864, null]], "polars.LazyFrame.first": [[865, null]], "polars.LazyFrame.gather_every": [[866, null]], "polars.LazyFrame.group_by": [[867, null]], "polars.LazyFrame.group_by_dynamic": [[868, null]], "polars.LazyFrame.head": [[869, null]], "polars.LazyFrame.inspect": [[870, null]], "polars.LazyFrame.interpolate": [[871, null]], "polars.LazyFrame.join": [[872, null]], "polars.LazyFrame.join_asof": [[873, null]], "polars.LazyFrame.join_where": [[874, null]], "polars.LazyFrame.last": [[875, null]], "polars.LazyFrame.lazy": [[876, null]], "polars.LazyFrame.limit": [[877, null]], "polars.LazyFrame.map_batches": [[878, null]], "polars.LazyFrame.max": [[879, null]], "polars.LazyFrame.mean": [[880, null]], "polars.LazyFrame.median": [[881, null]], "polars.LazyFrame.melt": [[882, null]], "polars.LazyFrame.merge_sorted": [[883, null]], "polars.LazyFrame.min": [[884, null]], "polars.LazyFrame.null_count": [[885, null]], "polars.LazyFrame.pipe": [[886, null]], "polars.LazyFrame.profile": [[887, null]], "polars.LazyFrame.quantile": [[888, null]], "polars.LazyFrame.rename": [[889, null]], "polars.LazyFrame.reverse": [[890, null]], "polars.LazyFrame.rolling": [[891, null]], "polars.LazyFrame.schema": [[892, null]], "polars.LazyFrame.select": [[893, null]], "polars.LazyFrame.select_seq": [[894, null]], "polars.LazyFrame.serialize": [[895, null]], "polars.LazyFrame.set_sorted": [[896, null]], "polars.LazyFrame.shift": [[897, null]], "polars.LazyFrame.show_graph": [[898, null]], "polars.LazyFrame.sink_csv": [[46, null]], "polars.LazyFrame.sink_ipc": [[47, null]], "polars.LazyFrame.sink_ndjson": [[48, null]], "polars.LazyFrame.sink_parquet": [[49, null]], "polars.LazyFrame.slice": [[899, null]], "polars.LazyFrame.sort": [[900, null]], "polars.LazyFrame.sql": [[901, null]], "polars.LazyFrame.std": [[902, null]], "polars.LazyFrame.sum": [[903, null]], "polars.LazyFrame.tail": [[904, null]], "polars.LazyFrame.top_k": [[905, null]], "polars.LazyFrame.unique": [[906, null]], "polars.LazyFrame.unnest": [[907, null]], "polars.LazyFrame.unpivot": [[908, null]], "polars.LazyFrame.update": [[909, null]], "polars.LazyFrame.var": [[910, null]], "polars.LazyFrame.width": [[911, null]], "polars.LazyFrame.with_columns": [[912, null]], "polars.LazyFrame.with_columns_seq": [[913, null]], "polars.LazyFrame.with_context": [[914, null]], "polars.LazyFrame.with_row_count": [[915, null]], "polars.LazyFrame.with_row_index": [[916, null]], "polars.SQLContext.execute": [[1346, null]], "polars.SQLContext.execute_global": [[1347, null]], "polars.SQLContext.register": [[1348, null]], "polars.SQLContext.register_globals": [[1349, null]], "polars.SQLContext.register_many": [[1350, null]], "polars.SQLContext.tables": [[1351, null]], "polars.SQLContext.unregister": [[1352, null]], "polars.Series.__array__": [[950, null]], "polars.Series.__arrow_c_stream__": [[951, null]], "polars.Series.__getitem__": [[952, null]], "polars.Series.abs": [[953, null]], "polars.Series.alias": [[954, null]], "polars.Series.all": [[955, null]], "polars.Series.any": [[956, null]], "polars.Series.append": [[957, null]], "polars.Series.approx_n_unique": [[958, null]], "polars.Series.arccos": [[959, null]], "polars.Series.arccosh": [[960, null]], "polars.Series.arcsin": [[961, null]], "polars.Series.arcsinh": [[962, null]], "polars.Series.arctan": [[963, null]], "polars.Series.arctanh": [[964, null]], "polars.Series.arg_max": [[965, null]], "polars.Series.arg_min": [[966, null]], "polars.Series.arg_sort": [[967, null]], "polars.Series.arg_true": [[968, null]], "polars.Series.arg_unique": [[969, null]], "polars.Series.arr.all": [[970, null]], "polars.Series.arr.any": [[971, null]], "polars.Series.arr.arg_max": [[972, null]], "polars.Series.arr.arg_min": [[973, null]], "polars.Series.arr.contains": [[974, null]], "polars.Series.arr.count_matches": [[975, null]], "polars.Series.arr.explode": [[976, null]], "polars.Series.arr.first": [[977, null]], "polars.Series.arr.get": [[978, null]], "polars.Series.arr.join": [[979, null]], "polars.Series.arr.last": [[980, null]], "polars.Series.arr.max": [[981, null]], "polars.Series.arr.median": [[982, null]], "polars.Series.arr.min": [[983, null]], "polars.Series.arr.n_unique": [[984, null]], "polars.Series.arr.reverse": [[985, null]], "polars.Series.arr.shift": [[986, null]], "polars.Series.arr.sort": [[987, null]], "polars.Series.arr.std": [[988, null]], "polars.Series.arr.sum": [[989, null]], "polars.Series.arr.to_list": [[990, null]], "polars.Series.arr.to_struct": [[991, null]], "polars.Series.arr.unique": [[992, null]], "polars.Series.arr.var": [[993, null]], "polars.Series.bin.contains": [[994, null]], "polars.Series.bin.decode": [[995, null]], "polars.Series.bin.encode": [[996, null]], "polars.Series.bin.ends_with": [[997, null]], "polars.Series.bin.reinterpret": [[998, null]], "polars.Series.bin.size": [[999, null]], "polars.Series.bin.starts_with": [[1000, null]], "polars.Series.bitwise_and": [[1001, null]], "polars.Series.bitwise_count_ones": [[1002, null]], "polars.Series.bitwise_count_zeros": [[1003, null]], "polars.Series.bitwise_leading_ones": [[1004, null]], "polars.Series.bitwise_leading_zeros": [[1005, null]], "polars.Series.bitwise_or": [[1006, null]], "polars.Series.bitwise_trailing_ones": [[1007, null]], "polars.Series.bitwise_trailing_zeros": [[1008, null]], "polars.Series.bitwise_xor": [[1009, null]], "polars.Series.bottom_k": [[1010, null]], "polars.Series.cast": [[1011, null]], "polars.Series.cat.ends_with": [[1012, null]], "polars.Series.cat.get_categories": [[1013, null]], "polars.Series.cat.is_local": [[1014, null]], "polars.Series.cat.len_bytes": [[1015, null]], "polars.Series.cat.len_chars": [[1016, null]], "polars.Series.cat.starts_with": [[1017, null]], "polars.Series.cat.to_local": [[1018, null]], "polars.Series.cat.uses_lexical_ordering": [[1019, null]], "polars.Series.cbrt": [[1020, null]], "polars.Series.ceil": [[1021, null]], "polars.Series.chunk_lengths": [[1022, null]], "polars.Series.clear": [[1023, null]], "polars.Series.clip": [[1024, null]], "polars.Series.clone": [[1025, null]], "polars.Series.cos": [[1026, null]], "polars.Series.cosh": [[1027, null]], "polars.Series.cot": [[1028, null]], "polars.Series.count": [[1029, null]], "polars.Series.cum_count": [[1030, null]], "polars.Series.cum_max": [[1031, null]], "polars.Series.cum_min": [[1032, null]], "polars.Series.cum_prod": [[1033, null]], "polars.Series.cum_sum": [[1034, null]], "polars.Series.cumulative_eval": [[1035, null]], "polars.Series.cut": [[1036, null]], "polars.Series.describe": [[1037, null]], "polars.Series.diff": [[1038, null]], "polars.Series.dot": [[1039, null]], "polars.Series.drop_nans": [[1040, null]], "polars.Series.drop_nulls": [[1041, null]], "polars.Series.dt.add_business_days": [[1042, null]], "polars.Series.dt.base_utc_offset": [[1043, null]], "polars.Series.dt.cast_time_unit": [[1044, null]], "polars.Series.dt.century": [[1045, null]], "polars.Series.dt.combine": [[1046, null]], "polars.Series.dt.convert_time_zone": [[1047, null]], "polars.Series.dt.date": [[1048, null]], "polars.Series.dt.datetime": [[1049, null]], "polars.Series.dt.day": [[1050, null]], "polars.Series.dt.dst_offset": [[1051, null]], "polars.Series.dt.epoch": [[1052, null]], "polars.Series.dt.hour": [[1053, null]], "polars.Series.dt.is_leap_year": [[1054, null]], "polars.Series.dt.iso_year": [[1055, null]], "polars.Series.dt.max": [[1056, null]], "polars.Series.dt.mean": [[1057, null]], "polars.Series.dt.median": [[1058, null]], "polars.Series.dt.microsecond": [[1059, null]], "polars.Series.dt.millennium": [[1060, null]], "polars.Series.dt.millisecond": [[1061, null]], "polars.Series.dt.min": [[1062, null]], "polars.Series.dt.minute": [[1063, null]], "polars.Series.dt.month": [[1064, null]], "polars.Series.dt.month_end": [[1065, null]], "polars.Series.dt.month_start": [[1066, null]], "polars.Series.dt.nanosecond": [[1067, null]], "polars.Series.dt.offset_by": [[1068, null]], "polars.Series.dt.ordinal_day": [[1069, null]], "polars.Series.dt.quarter": [[1070, null]], "polars.Series.dt.replace": [[1071, null]], "polars.Series.dt.replace_time_zone": [[1072, null]], "polars.Series.dt.round": [[1073, null]], "polars.Series.dt.second": [[1074, null]], "polars.Series.dt.strftime": [[1075, null]], "polars.Series.dt.time": [[1076, null]], "polars.Series.dt.timestamp": [[1077, null]], "polars.Series.dt.to_string": [[1078, null]], "polars.Series.dt.total_days": [[1079, null]], "polars.Series.dt.total_hours": [[1080, null]], "polars.Series.dt.total_microseconds": [[1081, null]], "polars.Series.dt.total_milliseconds": [[1082, null]], "polars.Series.dt.total_minutes": [[1083, null]], "polars.Series.dt.total_nanoseconds": [[1084, null]], "polars.Series.dt.total_seconds": [[1085, null]], "polars.Series.dt.truncate": [[1086, null]], "polars.Series.dt.week": [[1087, null]], "polars.Series.dt.weekday": [[1088, null]], "polars.Series.dt.with_time_unit": [[1089, null]], "polars.Series.dt.year": [[1090, null]], "polars.Series.dtype": [[1091, null]], "polars.Series.entropy": [[1092, null]], "polars.Series.eq": [[1093, null]], "polars.Series.eq_missing": [[1094, null]], "polars.Series.equals": [[1095, null]], "polars.Series.estimated_size": [[1096, null]], "polars.Series.ewm_mean": [[1097, null]], "polars.Series.ewm_mean_by": [[1098, null]], "polars.Series.ewm_std": [[1099, null]], "polars.Series.ewm_var": [[1100, null]], "polars.Series.exp": [[1101, null]], "polars.Series.explode": [[1102, null]], "polars.Series.extend": [[1103, null]], "polars.Series.extend_constant": [[1104, null]], "polars.Series.fill_nan": [[1105, null]], "polars.Series.fill_null": [[1106, null]], "polars.Series.filter": [[1107, null]], "polars.Series.first": [[1108, null]], "polars.Series.flags": [[1109, null]], "polars.Series.floor": [[1110, null]], "polars.Series.gather": [[1111, null]], "polars.Series.gather_every": [[1112, null]], "polars.Series.ge": [[1113, null]], "polars.Series.get_chunks": [[1114, null]], "polars.Series.gt": [[1115, null]], "polars.Series.has_nulls": [[1116, null]], "polars.Series.has_validity": [[1117, null]], "polars.Series.hash": [[1118, null]], "polars.Series.head": [[1119, null]], "polars.Series.hist": [[1120, null]], "polars.Series.implode": [[1121, null]], "polars.Series.index_of": [[1122, null]], "polars.Series.interpolate": [[1123, null]], "polars.Series.interpolate_by": [[1124, null]], "polars.Series.is_between": [[1125, null]], "polars.Series.is_duplicated": [[1126, null]], "polars.Series.is_empty": [[1127, null]], "polars.Series.is_finite": [[1128, null]], "polars.Series.is_first_distinct": [[1129, null]], "polars.Series.is_in": [[1130, null]], "polars.Series.is_infinite": [[1131, null]], "polars.Series.is_last_distinct": [[1132, null]], "polars.Series.is_nan": [[1133, null]], "polars.Series.is_not_nan": [[1134, null]], "polars.Series.is_not_null": [[1135, null]], "polars.Series.is_null": [[1136, null]], "polars.Series.is_sorted": [[1137, null]], "polars.Series.is_unique": [[1138, null]], "polars.Series.item": [[1139, null]], "polars.Series.kurtosis": [[1140, null]], "polars.Series.last": [[1141, null]], "polars.Series.le": [[1142, null]], "polars.Series.len": [[1143, null]], "polars.Series.limit": [[1144, null]], "polars.Series.list.all": [[1145, null]], "polars.Series.list.any": [[1146, null]], "polars.Series.list.arg_max": [[1147, null]], "polars.Series.list.arg_min": [[1148, null]], "polars.Series.list.concat": [[1149, null]], "polars.Series.list.contains": [[1150, null]], "polars.Series.list.count_matches": [[1151, null]], "polars.Series.list.diff": [[1152, null]], "polars.Series.list.drop_nulls": [[1153, null]], "polars.Series.list.eval": [[1154, null]], "polars.Series.list.explode": [[1155, null]], "polars.Series.list.first": [[1156, null]], "polars.Series.list.gather": [[1157, null]], "polars.Series.list.gather_every": [[1158, null]], "polars.Series.list.get": [[1159, null]], "polars.Series.list.head": [[1160, null]], "polars.Series.list.join": [[1161, null]], "polars.Series.list.last": [[1162, null]], "polars.Series.list.len": [[1163, null]], "polars.Series.list.max": [[1164, null]], "polars.Series.list.mean": [[1165, null]], "polars.Series.list.median": [[1166, null]], "polars.Series.list.min": [[1167, null]], "polars.Series.list.n_unique": [[1168, null]], "polars.Series.list.reverse": [[1169, null]], "polars.Series.list.sample": [[1170, null]], "polars.Series.list.set_difference": [[1171, null]], "polars.Series.list.set_intersection": [[1172, null]], "polars.Series.list.set_symmetric_difference": [[1173, null]], "polars.Series.list.set_union": [[1174, null]], "polars.Series.list.shift": [[1175, null]], "polars.Series.list.slice": [[1176, null]], "polars.Series.list.sort": [[1177, null]], "polars.Series.list.std": [[1178, null]], "polars.Series.list.sum": [[1179, null]], "polars.Series.list.tail": [[1180, null]], "polars.Series.list.to_array": [[1181, null]], "polars.Series.list.to_struct": [[1182, null]], "polars.Series.list.unique": [[1183, null]], "polars.Series.list.var": [[1184, null]], "polars.Series.log": [[1185, null]], "polars.Series.log10": [[1186, null]], "polars.Series.log1p": [[1187, null]], "polars.Series.lower_bound": [[1188, null]], "polars.Series.lt": [[1189, null]], "polars.Series.map_elements": [[1190, null]], "polars.Series.max": [[1191, null]], "polars.Series.mean": [[1192, null]], "polars.Series.median": [[1193, null]], "polars.Series.min": [[1194, null]], "polars.Series.mode": [[1195, null]], "polars.Series.n_chunks": [[1196, null]], "polars.Series.n_unique": [[1197, null]], "polars.Series.name": [[1198, null]], "polars.Series.nan_max": [[1199, null]], "polars.Series.nan_min": [[1200, null]], "polars.Series.ne": [[1201, null]], "polars.Series.ne_missing": [[1202, null]], "polars.Series.new_from_index": [[1203, null]], "polars.Series.not_": [[1204, null]], "polars.Series.null_count": [[1205, null]], "polars.Series.pct_change": [[1206, null]], "polars.Series.peak_max": [[1207, null]], "polars.Series.peak_min": [[1208, null]], "polars.Series.pow": [[1209, null]], "polars.Series.product": [[1210, null]], "polars.Series.qcut": [[1211, null]], "polars.Series.quantile": [[1212, null]], "polars.Series.rank": [[1213, null]], "polars.Series.rechunk": [[1214, null]], "polars.Series.reinterpret": [[1215, null]], "polars.Series.rename": [[1216, null]], "polars.Series.replace": [[1217, null]], "polars.Series.replace_strict": [[1218, null]], "polars.Series.reshape": [[1219, null]], "polars.Series.reverse": [[1220, null]], "polars.Series.rle": [[1221, null]], "polars.Series.rle_id": [[1222, null]], "polars.Series.rolling_map": [[1223, null]], "polars.Series.rolling_max": [[1224, null]], "polars.Series.rolling_mean": [[1225, null]], "polars.Series.rolling_median": [[1226, null]], "polars.Series.rolling_min": [[1227, null]], "polars.Series.rolling_quantile": [[1228, null]], "polars.Series.rolling_skew": [[1229, null]], "polars.Series.rolling_std": [[1230, null]], "polars.Series.rolling_sum": [[1231, null]], "polars.Series.rolling_var": [[1232, null]], "polars.Series.round": [[1233, null]], "polars.Series.round_sig_figs": [[1234, null]], "polars.Series.sample": [[1235, null]], "polars.Series.scatter": [[1236, null]], "polars.Series.search_sorted": [[1237, null]], "polars.Series.set": [[1238, null]], "polars.Series.set_sorted": [[1239, null]], "polars.Series.shape": [[1240, null]], "polars.Series.shift": [[1241, null]], "polars.Series.shrink_dtype": [[1242, null]], "polars.Series.shrink_to_fit": [[1243, null]], "polars.Series.shuffle": [[1244, null]], "polars.Series.sign": [[1245, null]], "polars.Series.sin": [[1246, null]], "polars.Series.sinh": [[1247, null]], "polars.Series.skew": [[1248, null]], "polars.Series.slice": [[1249, null]], "polars.Series.sort": [[1250, null]], "polars.Series.sqrt": [[1251, null]], "polars.Series.std": [[1252, null]], "polars.Series.str.concat": [[1253, null]], "polars.Series.str.contains": [[1254, null]], "polars.Series.str.contains_any": [[1255, null]], "polars.Series.str.count_matches": [[1256, null]], "polars.Series.str.decode": [[1257, null]], "polars.Series.str.encode": [[1258, null]], "polars.Series.str.ends_with": [[1259, null]], "polars.Series.str.escape_regex": [[1260, null]], "polars.Series.str.explode": [[1261, null]], "polars.Series.str.extract": [[1262, null]], "polars.Series.str.extract_all": [[1263, null]], "polars.Series.str.extract_groups": [[1264, null]], "polars.Series.str.extract_many": [[1265, null]], "polars.Series.str.find": [[1266, null]], "polars.Series.str.find_many": [[1267, null]], "polars.Series.str.head": [[1268, null]], "polars.Series.str.join": [[1269, null]], "polars.Series.str.json_decode": [[1270, null]], "polars.Series.str.json_path_match": [[1271, null]], "polars.Series.str.len_bytes": [[1272, null]], "polars.Series.str.len_chars": [[1273, null]], "polars.Series.str.normalize": [[1274, null]], "polars.Series.str.pad_end": [[1275, null]], "polars.Series.str.pad_start": [[1276, null]], "polars.Series.str.replace": [[1277, null]], "polars.Series.str.replace_all": [[1278, null]], "polars.Series.str.replace_many": [[1279, null]], "polars.Series.str.reverse": [[1280, null]], "polars.Series.str.slice": [[1281, null]], "polars.Series.str.split": [[1282, null]], "polars.Series.str.split_exact": [[1283, null]], "polars.Series.str.splitn": [[1284, null]], "polars.Series.str.starts_with": [[1285, null]], "polars.Series.str.strip_chars": [[1286, null]], "polars.Series.str.strip_chars_end": [[1287, null]], "polars.Series.str.strip_chars_start": [[1288, null]], "polars.Series.str.strip_prefix": [[1289, null]], "polars.Series.str.strip_suffix": [[1290, null]], "polars.Series.str.strptime": [[1291, null]], "polars.Series.str.tail": [[1292, null]], "polars.Series.str.to_date": [[1293, null]], "polars.Series.str.to_datetime": [[1294, null]], "polars.Series.str.to_decimal": [[1295, null]], "polars.Series.str.to_integer": [[1296, null]], "polars.Series.str.to_lowercase": [[1297, null]], "polars.Series.str.to_time": [[1298, null]], "polars.Series.str.to_titlecase": [[1299, null]], "polars.Series.str.to_uppercase": [[1300, null]], "polars.Series.str.zfill": [[1301, null]], "polars.Series.struct.field": [[1302, null]], "polars.Series.struct.fields": [[1303, null]], "polars.Series.struct.json_encode": [[1304, null]], "polars.Series.struct.rename_fields": [[1305, null]], "polars.Series.struct.schema": [[1306, null]], "polars.Series.struct.unnest": [[1307, null]], "polars.Series.sum": [[1308, null]], "polars.Series.tail": [[1309, null]], "polars.Series.tan": [[1310, null]], "polars.Series.tanh": [[1311, null]], "polars.Series.to_arrow": [[1312, null]], "polars.Series.to_dummies": [[1313, null]], "polars.Series.to_frame": [[1314, null]], "polars.Series.to_init_repr": [[1315, null]], "polars.Series.to_jax": [[1316, null]], "polars.Series.to_list": [[1317, null]], "polars.Series.to_numpy": [[1318, null]], "polars.Series.to_pandas": [[1319, null]], "polars.Series.to_physical": [[1320, null]], "polars.Series.to_torch": [[1321, null]], "polars.Series.top_k": [[1322, null]], "polars.Series.unique": [[1323, null]], "polars.Series.unique_counts": [[1324, null]], "polars.Series.upper_bound": [[1325, null]], "polars.Series.value_counts": [[1326, null]], "polars.Series.var": [[1327, null]], "polars.Series.zip_with": [[1328, null]], "polars.StringCache": [[50, null]], "polars.align_frames": [[51, null]], "polars.all": [[744, null]], "polars.all_horizontal": [[745, null]], "polars.any": [[746, null]], "polars.any_horizontal": [[747, null]], "polars.api.register_dataframe_namespace": [[52, null]], "polars.api.register_expr_namespace": [[53, null]], "polars.api.register_lazyframe_namespace": [[54, null]], "polars.api.register_series_namespace": [[55, null]], "polars.approx_n_unique": [[748, null]], "polars.arange": [[749, null]], "polars.arctan2": [[750, null]], "polars.arctan2d": [[751, null]], "polars.arg_sort_by": [[752, null]], "polars.arg_where": [[753, null]], "polars.build_info": [[56, null]], "polars.business_day_count": [[754, null]], "polars.catalog.unity.CatalogInfo": [[183, null]], "polars.catalog.unity.ColumnInfo": [[184, null]], "polars.catalog.unity.DataSourceFormat": [[185, null]], "polars.catalog.unity.NamespaceInfo": [[186, null]], "polars.catalog.unity.TableInfo": [[187, null]], "polars.catalog.unity.TableInfo.get_polars_schema": [[188, null]], "polars.catalog.unity.TableType": [[189, null]], "polars.coalesce": [[755, null]], "polars.col": [[824, null]], "polars.collect_all": [[57, null]], "polars.collect_all_async": [[58, null]], "polars.concat": [[59, null]], "polars.concat_arr": [[756, null]], "polars.concat_list": [[757, null]], "polars.concat_str": [[758, null]], "polars.corr": [[759, null]], "polars.count": [[760, null]], "polars.cov": [[761, null]], "polars.cum_count": [[762, null]], "polars.cum_fold": [[763, null]], "polars.cum_reduce": [[764, null]], "polars.cum_sum": [[765, null]], "polars.cum_sum_horizontal": [[766, null]], "polars.dataframe.group_by.GroupBy.__iter__": [[316, null]], "polars.dataframe.group_by.GroupBy.agg": [[317, null]], "polars.dataframe.group_by.GroupBy.all": [[318, null]], "polars.dataframe.group_by.GroupBy.count": [[319, null]], "polars.dataframe.group_by.GroupBy.first": [[320, null]], "polars.dataframe.group_by.GroupBy.head": [[321, null]], "polars.dataframe.group_by.GroupBy.last": [[322, null]], "polars.dataframe.group_by.GroupBy.len": [[323, null]], "polars.dataframe.group_by.GroupBy.map_groups": [[324, null]], "polars.dataframe.group_by.GroupBy.max": [[325, null]], "polars.dataframe.group_by.GroupBy.mean": [[326, null]], "polars.dataframe.group_by.GroupBy.median": [[327, null]], "polars.dataframe.group_by.GroupBy.min": [[328, null]], "polars.dataframe.group_by.GroupBy.n_unique": [[329, null]], "polars.dataframe.group_by.GroupBy.quantile": [[330, null]], "polars.dataframe.group_by.GroupBy.sum": [[331, null]], "polars.dataframe.group_by.GroupBy.tail": [[332, null]], "polars.datatypes.Array": [[60, null]], "polars.datatypes.Binary": [[61, null]], "polars.datatypes.Boolean": [[62, null]], "polars.datatypes.Categorical": [[63, null]], "polars.datatypes.DataType": [[64, null]], "polars.datatypes.Date": [[65, null]], "polars.datatypes.Datetime": [[66, null]], "polars.datatypes.Decimal": [[67, null]], "polars.datatypes.Duration": [[68, null]], "polars.datatypes.Enum": [[69, null]], "polars.datatypes.Field": [[70, null]], "polars.datatypes.Float32": [[71, null]], "polars.datatypes.Float64": [[72, null]], "polars.datatypes.Int128": [[73, null]], "polars.datatypes.Int16": [[74, null]], "polars.datatypes.Int32": [[75, null]], "polars.datatypes.Int64": [[76, null]], "polars.datatypes.Int8": [[77, null]], "polars.datatypes.List": [[78, null]], "polars.datatypes.Null": [[79, null]], "polars.datatypes.Object": [[80, null]], "polars.datatypes.String": [[81, null]], "polars.datatypes.Struct": [[82, null]], "polars.datatypes.Time": [[83, null]], "polars.datatypes.UInt16": [[84, null]], "polars.datatypes.UInt32": [[85, null]], "polars.datatypes.UInt64": [[86, null]], "polars.datatypes.UInt8": [[87, null]], "polars.datatypes.Unknown": [[88, null]], "polars.datatypes.Utf8": [[89, null]], "polars.date": [[767, null]], "polars.date_range": [[768, null]], "polars.date_ranges": [[769, null]], "polars.datetime": [[770, null]], "polars.datetime_range": [[771, null]], "polars.datetime_ranges": [[772, null]], "polars.disable_string_cache": [[90, null]], "polars.duration": [[773, null]], "polars.element": [[774, null]], "polars.enable_string_cache": [[91, null]], "polars.escape_regex": [[92, null]], "polars.exceptions.CategoricalRemappingWarning": [[93, null]], "polars.exceptions.ChronoFormatWarning": [[94, null]], "polars.exceptions.ColumnNotFoundError": [[95, null]], "polars.exceptions.ComputeError": [[96, null]], "polars.exceptions.CustomUFuncWarning": [[97, null]], "polars.exceptions.DataOrientationWarning": [[98, null]], "polars.exceptions.DuplicateError": [[99, null]], "polars.exceptions.InvalidOperationError": [[100, null]], "polars.exceptions.MapWithoutReturnDtypeWarning": [[101, null]], "polars.exceptions.ModuleUpgradeRequiredError": [[102, null]], "polars.exceptions.NoDataError": [[103, null]], "polars.exceptions.NoRowsReturnedError": [[104, null]], "polars.exceptions.OutOfBoundsError": [[105, null]], "polars.exceptions.PanicException": [[106, null]], "polars.exceptions.ParameterCollisionError": [[107, null]], "polars.exceptions.PerformanceWarning": [[108, null]], "polars.exceptions.PolarsError": [[109, null]], "polars.exceptions.PolarsInefficientMapWarning": [[110, null]], "polars.exceptions.PolarsWarning": [[111, null]], "polars.exceptions.RowsError": [[112, null]], "polars.exceptions.SQLInterfaceError": [[113, null]], "polars.exceptions.SQLSyntaxError": [[114, null]], "polars.exceptions.SchemaError": [[115, null]], "polars.exceptions.SchemaFieldNotFoundError": [[116, null]], "polars.exceptions.ShapeError": [[117, null]], "polars.exceptions.StringCacheMismatchError": [[118, null]], "polars.exceptions.StructFieldNotFoundError": [[119, null]], "polars.exceptions.TooManyRowsReturnedError": [[120, null]], "polars.exceptions.UnstableWarning": [[121, null]], "polars.exceptions.UnsuitableSQLError": [[122, null]], "polars.exclude": [[775, null]], "polars.first": [[776, null]], "polars.fold": [[777, null]], "polars.format": [[778, null]], "polars.from_arrow": [[123, null]], "polars.from_dataframe": [[124, null]], "polars.from_dict": [[125, null]], "polars.from_dicts": [[126, null]], "polars.from_epoch": [[779, null]], "polars.from_numpy": [[127, null]], "polars.from_pandas": [[128, null]], "polars.from_records": [[129, null]], "polars.from_repr": [[130, null]], "polars.get_index_type": [[131, null]], "polars.groups": [[780, null]], "polars.head": [[781, null]], "polars.implode": [[782, null]], "polars.int_range": [[783, null]], "polars.int_ranges": [[784, null]], "polars.io.csv.batched_reader.BatchedCsvReader.next_batches": [[132, null]], "polars.io.plugins.register_io_source": [[133, null]], "polars.json_normalize": [[134, null]], "polars.last": [[785, null]], "polars.lazyframe.engine_config.GPUEngine": [[917, null]], "polars.lazyframe.group_by.LazyGroupBy.agg": [[918, null]], "polars.lazyframe.group_by.LazyGroupBy.all": [[919, null]], "polars.lazyframe.group_by.LazyGroupBy.count": [[920, null]], "polars.lazyframe.group_by.LazyGroupBy.first": [[921, null]], "polars.lazyframe.group_by.LazyGroupBy.head": [[922, null]], "polars.lazyframe.group_by.LazyGroupBy.last": [[923, null]], "polars.lazyframe.group_by.LazyGroupBy.len": [[924, null]], "polars.lazyframe.group_by.LazyGroupBy.map_groups": [[925, null]], "polars.lazyframe.group_by.LazyGroupBy.max": [[926, null]], "polars.lazyframe.group_by.LazyGroupBy.mean": [[927, null]], "polars.lazyframe.group_by.LazyGroupBy.median": [[928, null]], "polars.lazyframe.group_by.LazyGroupBy.min": [[929, null]], "polars.lazyframe.group_by.LazyGroupBy.n_unique": [[930, null]], "polars.lazyframe.group_by.LazyGroupBy.quantile": [[931, null]], "polars.lazyframe.group_by.LazyGroupBy.sum": [[932, null]], "polars.lazyframe.group_by.LazyGroupBy.tail": [[933, null]], "polars.lazyframe.in_process.InProcessQuery.cancel": [[934, null]], "polars.lazyframe.in_process.InProcessQuery.fetch": [[935, null]], "polars.lazyframe.in_process.InProcessQuery.fetch_blocking": [[936, null]], "polars.len": [[786, null]], "polars.linear_space": [[787, null]], "polars.lit": [[788, null]], "polars.map_batches": [[789, null]], "polars.map_groups": [[790, null]], "polars.max": [[791, null]], "polars.max_horizontal": [[792, null]], "polars.mean": [[793, null]], "polars.mean_horizontal": [[794, null]], "polars.median": [[795, null]], "polars.min": [[796, null]], "polars.min_horizontal": [[797, null]], "polars.n_unique": [[798, null]], "polars.nth": [[799, null]], "polars.ones": [[800, null]], "polars.plugins.register_plugin_function": [[135, null]], "polars.quantile": [[801, null]], "polars.read_avro": [[136, null]], "polars.read_clipboard": [[137, null]], "polars.read_csv": [[138, null]], "polars.read_csv_batched": [[139, null]], "polars.read_database": [[140, null]], "polars.read_database_uri": [[141, null]], "polars.read_delta": [[142, null]], "polars.read_excel": [[143, null]], "polars.read_ipc": [[144, null]], "polars.read_ipc_schema": [[145, null]], "polars.read_ipc_stream": [[146, null]], "polars.read_json": [[147, null]], "polars.read_ndjson": [[148, null]], "polars.read_ods": [[149, null]], "polars.read_parquet": [[150, null]], "polars.read_parquet_schema": [[151, null]], "polars.reduce": [[802, null]], "polars.repeat": [[803, null]], "polars.rolling_corr": [[804, null]], "polars.rolling_cov": [[805, null]], "polars.scan_csv": [[152, null]], "polars.scan_delta": [[153, null]], "polars.scan_iceberg": [[154, null]], "polars.scan_ipc": [[155, null]], "polars.scan_ndjson": [[156, null]], "polars.scan_parquet": [[157, null]], "polars.scan_pyarrow_dataset": [[158, null]], "polars.select": [[806, null]], "polars.set_random_seed": [[159, null]], "polars.show_versions": [[160, null]], "polars.sql": [[807, null]], "polars.sql_expr": [[808, null]], "polars.std": [[809, null]], "polars.struct": [[810, null]], "polars.sum": [[811, null]], "polars.sum_horizontal": [[812, null]], "polars.tail": [[813, null]], "polars.testing.assert_frame_equal": [[161, null]], "polars.testing.assert_frame_not_equal": [[162, null]], "polars.testing.assert_series_equal": [[163, null]], "polars.testing.assert_series_not_equal": [[164, null]], "polars.testing.parametric.column": [[165, null]], "polars.testing.parametric.columns": [[166, null]], "polars.testing.parametric.create_list_strategy": [[167, null]], "polars.testing.parametric.dataframes": [[168, null]], "polars.testing.parametric.dtypes": [[169, null]], "polars.testing.parametric.lists": [[170, null]], "polars.testing.parametric.load_profile": [[171, null]], "polars.testing.parametric.series": [[172, null]], "polars.testing.parametric.set_profile": [[173, null]], "polars.thread_pool_size": [[174, null]], "polars.threadpool_size": [[175, null]], "polars.time": [[814, null]], "polars.time_range": [[815, null]], "polars.time_ranges": [[816, null]], "polars.using_string_cache": [[176, null]], "polars.var": [[817, null]], "polars.when": [[818, null]], "polars.zeros": [[819, null]]}, "docnames": ["index", "reference/api", "reference/api/polars.Config.load", "reference/api/polars.Config.load_from_file", "reference/api/polars.Config.restore_defaults", "reference/api/polars.Config.save", "reference/api/polars.Config.save_to_file", "reference/api/polars.Config.set_ascii_tables", "reference/api/polars.Config.set_auto_structify", "reference/api/polars.Config.set_decimal_separator", "reference/api/polars.Config.set_float_precision", "reference/api/polars.Config.set_fmt_float", "reference/api/polars.Config.set_fmt_str_lengths", "reference/api/polars.Config.set_fmt_table_cell_list_len", "reference/api/polars.Config.set_streaming_chunk_size", "reference/api/polars.Config.set_tbl_cell_alignment", "reference/api/polars.Config.set_tbl_cell_numeric_alignment", "reference/api/polars.Config.set_tbl_cols", "reference/api/polars.Config.set_tbl_column_data_type_inline", "reference/api/polars.Config.set_tbl_dataframe_shape_below", "reference/api/polars.Config.set_tbl_formatting", "reference/api/polars.Config.set_tbl_hide_column_data_types", "reference/api/polars.Config.set_tbl_hide_column_names", "reference/api/polars.Config.set_tbl_hide_dataframe_shape", "reference/api/polars.Config.set_tbl_hide_dtype_separator", "reference/api/polars.Config.set_tbl_rows", "reference/api/polars.Config.set_tbl_width_chars", "reference/api/polars.Config.set_thousands_separator", "reference/api/polars.Config.set_trim_decimal_zeros", "reference/api/polars.Config.set_verbose", "reference/api/polars.Config.state", "reference/api/polars.CredentialProvider", "reference/api/polars.CredentialProviderAWS", "reference/api/polars.CredentialProviderAzure", "reference/api/polars.CredentialProviderGCP", "reference/api/polars.DataFrame.write_avro", "reference/api/polars.DataFrame.write_clipboard", "reference/api/polars.DataFrame.write_csv", "reference/api/polars.DataFrame.write_database", "reference/api/polars.DataFrame.write_delta", "reference/api/polars.DataFrame.write_excel", "reference/api/polars.DataFrame.write_ipc", "reference/api/polars.DataFrame.write_ipc_stream", "reference/api/polars.DataFrame.write_json", "reference/api/polars.DataFrame.write_ndjson", "reference/api/polars.DataFrame.write_parquet", "reference/api/polars.LazyFrame.sink_csv", "reference/api/polars.LazyFrame.sink_ipc", "reference/api/polars.LazyFrame.sink_ndjson", "reference/api/polars.LazyFrame.sink_parquet", "reference/api/polars.StringCache", "reference/api/polars.align_frames", "reference/api/polars.api.register_dataframe_namespace", "reference/api/polars.api.register_expr_namespace", "reference/api/polars.api.register_lazyframe_namespace", "reference/api/polars.api.register_series_namespace", "reference/api/polars.build_info", "reference/api/polars.collect_all", "reference/api/polars.collect_all_async", "reference/api/polars.concat", "reference/api/polars.datatypes.Array", "reference/api/polars.datatypes.Binary", "reference/api/polars.datatypes.Boolean", "reference/api/polars.datatypes.Categorical", "reference/api/polars.datatypes.DataType", "reference/api/polars.datatypes.Date", "reference/api/polars.datatypes.Datetime", "reference/api/polars.datatypes.Decimal", "reference/api/polars.datatypes.Duration", "reference/api/polars.datatypes.Enum", "reference/api/polars.datatypes.Field", "reference/api/polars.datatypes.Float32", "reference/api/polars.datatypes.Float64", "reference/api/polars.datatypes.Int128", "reference/api/polars.datatypes.Int16", "reference/api/polars.datatypes.Int32", "reference/api/polars.datatypes.Int64", "reference/api/polars.datatypes.Int8", "reference/api/polars.datatypes.List", "reference/api/polars.datatypes.Null", "reference/api/polars.datatypes.Object", "reference/api/polars.datatypes.String", "reference/api/polars.datatypes.Struct", "reference/api/polars.datatypes.Time", "reference/api/polars.datatypes.UInt16", "reference/api/polars.datatypes.UInt32", "reference/api/polars.datatypes.UInt64", "reference/api/polars.datatypes.UInt8", "reference/api/polars.datatypes.Unknown", "reference/api/polars.datatypes.Utf8", "reference/api/polars.disable_string_cache", "reference/api/polars.enable_string_cache", "reference/api/polars.escape_regex", "reference/api/polars.exceptions.CategoricalRemappingWarning", "reference/api/polars.exceptions.ChronoFormatWarning", "reference/api/polars.exceptions.ColumnNotFoundError", "reference/api/polars.exceptions.ComputeError", "reference/api/polars.exceptions.CustomUFuncWarning", "reference/api/polars.exceptions.DataOrientationWarning", "reference/api/polars.exceptions.DuplicateError", "reference/api/polars.exceptions.InvalidOperationError", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning", "reference/api/polars.exceptions.ModuleUpgradeRequiredError", "reference/api/polars.exceptions.NoDataError", "reference/api/polars.exceptions.NoRowsReturnedError", "reference/api/polars.exceptions.OutOfBoundsError", "reference/api/polars.exceptions.PanicException", "reference/api/polars.exceptions.ParameterCollisionError", "reference/api/polars.exceptions.PerformanceWarning", "reference/api/polars.exceptions.PolarsError", "reference/api/polars.exceptions.PolarsInefficientMapWarning", "reference/api/polars.exceptions.PolarsWarning", "reference/api/polars.exceptions.RowsError", "reference/api/polars.exceptions.SQLInterfaceError", "reference/api/polars.exceptions.SQLSyntaxError", "reference/api/polars.exceptions.SchemaError", "reference/api/polars.exceptions.SchemaFieldNotFoundError", "reference/api/polars.exceptions.ShapeError", "reference/api/polars.exceptions.StringCacheMismatchError", "reference/api/polars.exceptions.StructFieldNotFoundError", "reference/api/polars.exceptions.TooManyRowsReturnedError", "reference/api/polars.exceptions.UnstableWarning", "reference/api/polars.exceptions.UnsuitableSQLError", "reference/api/polars.from_arrow", "reference/api/polars.from_dataframe", "reference/api/polars.from_dict", "reference/api/polars.from_dicts", "reference/api/polars.from_numpy", "reference/api/polars.from_pandas", "reference/api/polars.from_records", "reference/api/polars.from_repr", "reference/api/polars.get_index_type", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "reference/api/polars.io.plugins.register_io_source", "reference/api/polars.json_normalize", "reference/api/polars.plugins.register_plugin_function", "reference/api/polars.read_avro", "reference/api/polars.read_clipboard", "reference/api/polars.read_csv", "reference/api/polars.read_csv_batched", "reference/api/polars.read_database", "reference/api/polars.read_database_uri", "reference/api/polars.read_delta", "reference/api/polars.read_excel", "reference/api/polars.read_ipc", "reference/api/polars.read_ipc_schema", "reference/api/polars.read_ipc_stream", "reference/api/polars.read_json", "reference/api/polars.read_ndjson", "reference/api/polars.read_ods", "reference/api/polars.read_parquet", "reference/api/polars.read_parquet_schema", "reference/api/polars.scan_csv", "reference/api/polars.scan_delta", "reference/api/polars.scan_iceberg", "reference/api/polars.scan_ipc", "reference/api/polars.scan_ndjson", "reference/api/polars.scan_parquet", "reference/api/polars.scan_pyarrow_dataset", "reference/api/polars.set_random_seed", "reference/api/polars.show_versions", "reference/api/polars.testing.assert_frame_equal", "reference/api/polars.testing.assert_frame_not_equal", "reference/api/polars.testing.assert_series_equal", "reference/api/polars.testing.assert_series_not_equal", "reference/api/polars.testing.parametric.column", "reference/api/polars.testing.parametric.columns", "reference/api/polars.testing.parametric.create_list_strategy", "reference/api/polars.testing.parametric.dataframes", "reference/api/polars.testing.parametric.dtypes", "reference/api/polars.testing.parametric.lists", "reference/api/polars.testing.parametric.load_profile", "reference/api/polars.testing.parametric.series", "reference/api/polars.testing.parametric.set_profile", "reference/api/polars.thread_pool_size", "reference/api/polars.threadpool_size", "reference/api/polars.using_string_cache", "reference/catalog/api/polars.Catalog", "reference/catalog/api/polars.Catalog.get_table_info", "reference/catalog/api/polars.Catalog.list_catalogs", "reference/catalog/api/polars.Catalog.list_namespaces", "reference/catalog/api/polars.Catalog.list_tables", "reference/catalog/api/polars.Catalog.scan_table", "reference/catalog/api/polars.catalog.unity.CatalogInfo", "reference/catalog/api/polars.catalog.unity.ColumnInfo", "reference/catalog/api/polars.catalog.unity.DataSourceFormat", "reference/catalog/api/polars.catalog.unity.NamespaceInfo", "reference/catalog/api/polars.catalog.unity.TableInfo", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema", "reference/catalog/api/polars.catalog.unity.TableType", "reference/catalog/index", "reference/catalog/unity", "reference/config", "reference/dataframe/aggregation", "reference/dataframe/api/polars.DataFrame.__array__", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__", "reference/dataframe/api/polars.DataFrame.__dataframe__", "reference/dataframe/api/polars.DataFrame.__getitem__", "reference/dataframe/api/polars.DataFrame.approx_n_unique", "reference/dataframe/api/polars.DataFrame.bottom_k", "reference/dataframe/api/polars.DataFrame.cast", "reference/dataframe/api/polars.DataFrame.clear", "reference/dataframe/api/polars.DataFrame.clone", "reference/dataframe/api/polars.DataFrame.collect_schema", "reference/dataframe/api/polars.DataFrame.columns", "reference/dataframe/api/polars.DataFrame.corr", "reference/dataframe/api/polars.DataFrame.count", "reference/dataframe/api/polars.DataFrame.describe", "reference/dataframe/api/polars.DataFrame.deserialize", "reference/dataframe/api/polars.DataFrame.drop", "reference/dataframe/api/polars.DataFrame.drop_in_place", "reference/dataframe/api/polars.DataFrame.drop_nans", "reference/dataframe/api/polars.DataFrame.drop_nulls", "reference/dataframe/api/polars.DataFrame.dtypes", "reference/dataframe/api/polars.DataFrame.equals", "reference/dataframe/api/polars.DataFrame.estimated_size", "reference/dataframe/api/polars.DataFrame.explode", "reference/dataframe/api/polars.DataFrame.extend", "reference/dataframe/api/polars.DataFrame.fill_nan", "reference/dataframe/api/polars.DataFrame.fill_null", "reference/dataframe/api/polars.DataFrame.filter", "reference/dataframe/api/polars.DataFrame.flags", "reference/dataframe/api/polars.DataFrame.fold", "reference/dataframe/api/polars.DataFrame.gather_every", "reference/dataframe/api/polars.DataFrame.get_column", "reference/dataframe/api/polars.DataFrame.get_column_index", "reference/dataframe/api/polars.DataFrame.get_columns", "reference/dataframe/api/polars.DataFrame.glimpse", "reference/dataframe/api/polars.DataFrame.group_by", "reference/dataframe/api/polars.DataFrame.group_by_dynamic", "reference/dataframe/api/polars.DataFrame.hash_rows", "reference/dataframe/api/polars.DataFrame.head", "reference/dataframe/api/polars.DataFrame.height", "reference/dataframe/api/polars.DataFrame.hstack", "reference/dataframe/api/polars.DataFrame.insert_column", "reference/dataframe/api/polars.DataFrame.interpolate", "reference/dataframe/api/polars.DataFrame.is_duplicated", "reference/dataframe/api/polars.DataFrame.is_empty", "reference/dataframe/api/polars.DataFrame.is_unique", "reference/dataframe/api/polars.DataFrame.item", "reference/dataframe/api/polars.DataFrame.iter_columns", "reference/dataframe/api/polars.DataFrame.iter_rows", "reference/dataframe/api/polars.DataFrame.iter_slices", "reference/dataframe/api/polars.DataFrame.join", "reference/dataframe/api/polars.DataFrame.join_asof", "reference/dataframe/api/polars.DataFrame.join_where", "reference/dataframe/api/polars.DataFrame.lazy", "reference/dataframe/api/polars.DataFrame.limit", "reference/dataframe/api/polars.DataFrame.map_rows", "reference/dataframe/api/polars.DataFrame.max", "reference/dataframe/api/polars.DataFrame.max_horizontal", "reference/dataframe/api/polars.DataFrame.mean", "reference/dataframe/api/polars.DataFrame.mean_horizontal", "reference/dataframe/api/polars.DataFrame.median", "reference/dataframe/api/polars.DataFrame.melt", "reference/dataframe/api/polars.DataFrame.merge_sorted", "reference/dataframe/api/polars.DataFrame.min", "reference/dataframe/api/polars.DataFrame.min_horizontal", "reference/dataframe/api/polars.DataFrame.n_chunks", "reference/dataframe/api/polars.DataFrame.n_unique", "reference/dataframe/api/polars.DataFrame.null_count", "reference/dataframe/api/polars.DataFrame.partition_by", "reference/dataframe/api/polars.DataFrame.pipe", "reference/dataframe/api/polars.DataFrame.pivot", "reference/dataframe/api/polars.DataFrame.product", "reference/dataframe/api/polars.DataFrame.quantile", "reference/dataframe/api/polars.DataFrame.rechunk", "reference/dataframe/api/polars.DataFrame.rename", "reference/dataframe/api/polars.DataFrame.replace_column", "reference/dataframe/api/polars.DataFrame.reverse", "reference/dataframe/api/polars.DataFrame.rolling", "reference/dataframe/api/polars.DataFrame.row", "reference/dataframe/api/polars.DataFrame.rows", "reference/dataframe/api/polars.DataFrame.rows_by_key", "reference/dataframe/api/polars.DataFrame.sample", "reference/dataframe/api/polars.DataFrame.schema", "reference/dataframe/api/polars.DataFrame.select", "reference/dataframe/api/polars.DataFrame.select_seq", "reference/dataframe/api/polars.DataFrame.serialize", "reference/dataframe/api/polars.DataFrame.set_sorted", "reference/dataframe/api/polars.DataFrame.shape", "reference/dataframe/api/polars.DataFrame.shift", "reference/dataframe/api/polars.DataFrame.shrink_to_fit", "reference/dataframe/api/polars.DataFrame.slice", "reference/dataframe/api/polars.DataFrame.sort", "reference/dataframe/api/polars.DataFrame.sql", "reference/dataframe/api/polars.DataFrame.std", "reference/dataframe/api/polars.DataFrame.sum", "reference/dataframe/api/polars.DataFrame.sum_horizontal", "reference/dataframe/api/polars.DataFrame.tail", "reference/dataframe/api/polars.DataFrame.to_arrow", "reference/dataframe/api/polars.DataFrame.to_dict", "reference/dataframe/api/polars.DataFrame.to_dicts", "reference/dataframe/api/polars.DataFrame.to_dummies", "reference/dataframe/api/polars.DataFrame.to_init_repr", "reference/dataframe/api/polars.DataFrame.to_jax", "reference/dataframe/api/polars.DataFrame.to_numpy", "reference/dataframe/api/polars.DataFrame.to_pandas", "reference/dataframe/api/polars.DataFrame.to_series", "reference/dataframe/api/polars.DataFrame.to_struct", "reference/dataframe/api/polars.DataFrame.to_torch", "reference/dataframe/api/polars.DataFrame.top_k", "reference/dataframe/api/polars.DataFrame.transpose", "reference/dataframe/api/polars.DataFrame.unique", "reference/dataframe/api/polars.DataFrame.unnest", "reference/dataframe/api/polars.DataFrame.unpivot", "reference/dataframe/api/polars.DataFrame.unstack", "reference/dataframe/api/polars.DataFrame.update", "reference/dataframe/api/polars.DataFrame.upsample", "reference/dataframe/api/polars.DataFrame.var", "reference/dataframe/api/polars.DataFrame.vstack", "reference/dataframe/api/polars.DataFrame.width", "reference/dataframe/api/polars.DataFrame.with_columns", "reference/dataframe/api/polars.DataFrame.with_columns_seq", "reference/dataframe/api/polars.DataFrame.with_row_count", "reference/dataframe/api/polars.DataFrame.with_row_index", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail", "reference/dataframe/attributes", "reference/dataframe/computation", "reference/dataframe/descriptive", "reference/dataframe/export", "reference/dataframe/group_by", "reference/dataframe/index", "reference/dataframe/miscellaneous", "reference/dataframe/modify_select", "reference/dataframe/plot", "reference/dataframe/style", "reference/datatypes", "reference/exceptions", "reference/expressions/aggregation", "reference/expressions/api/polars.Expr.abs", "reference/expressions/api/polars.Expr.add", "reference/expressions/api/polars.Expr.agg_groups", "reference/expressions/api/polars.Expr.alias", "reference/expressions/api/polars.Expr.all", "reference/expressions/api/polars.Expr.and_", "reference/expressions/api/polars.Expr.any", "reference/expressions/api/polars.Expr.append", "reference/expressions/api/polars.Expr.approx_n_unique", "reference/expressions/api/polars.Expr.arccos", "reference/expressions/api/polars.Expr.arccosh", "reference/expressions/api/polars.Expr.arcsin", "reference/expressions/api/polars.Expr.arcsinh", "reference/expressions/api/polars.Expr.arctan", "reference/expressions/api/polars.Expr.arctanh", "reference/expressions/api/polars.Expr.arg_max", "reference/expressions/api/polars.Expr.arg_min", "reference/expressions/api/polars.Expr.arg_sort", "reference/expressions/api/polars.Expr.arg_true", "reference/expressions/api/polars.Expr.arg_unique", "reference/expressions/api/polars.Expr.arr.all", "reference/expressions/api/polars.Expr.arr.any", "reference/expressions/api/polars.Expr.arr.arg_max", "reference/expressions/api/polars.Expr.arr.arg_min", "reference/expressions/api/polars.Expr.arr.contains", "reference/expressions/api/polars.Expr.arr.count_matches", "reference/expressions/api/polars.Expr.arr.explode", "reference/expressions/api/polars.Expr.arr.first", "reference/expressions/api/polars.Expr.arr.get", "reference/expressions/api/polars.Expr.arr.join", "reference/expressions/api/polars.Expr.arr.last", "reference/expressions/api/polars.Expr.arr.max", "reference/expressions/api/polars.Expr.arr.median", "reference/expressions/api/polars.Expr.arr.min", "reference/expressions/api/polars.Expr.arr.n_unique", "reference/expressions/api/polars.Expr.arr.reverse", "reference/expressions/api/polars.Expr.arr.shift", "reference/expressions/api/polars.Expr.arr.sort", "reference/expressions/api/polars.Expr.arr.std", "reference/expressions/api/polars.Expr.arr.sum", "reference/expressions/api/polars.Expr.arr.to_list", "reference/expressions/api/polars.Expr.arr.to_struct", "reference/expressions/api/polars.Expr.arr.unique", "reference/expressions/api/polars.Expr.arr.var", "reference/expressions/api/polars.Expr.backward_fill", "reference/expressions/api/polars.Expr.bin.contains", "reference/expressions/api/polars.Expr.bin.decode", "reference/expressions/api/polars.Expr.bin.encode", "reference/expressions/api/polars.Expr.bin.ends_with", "reference/expressions/api/polars.Expr.bin.reinterpret", "reference/expressions/api/polars.Expr.bin.size", "reference/expressions/api/polars.Expr.bin.starts_with", "reference/expressions/api/polars.Expr.bitwise_and", "reference/expressions/api/polars.Expr.bitwise_count_ones", "reference/expressions/api/polars.Expr.bitwise_count_zeros", "reference/expressions/api/polars.Expr.bitwise_leading_ones", "reference/expressions/api/polars.Expr.bitwise_leading_zeros", "reference/expressions/api/polars.Expr.bitwise_or", "reference/expressions/api/polars.Expr.bitwise_trailing_ones", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros", "reference/expressions/api/polars.Expr.bitwise_xor", "reference/expressions/api/polars.Expr.bottom_k", "reference/expressions/api/polars.Expr.bottom_k_by", "reference/expressions/api/polars.Expr.cast", "reference/expressions/api/polars.Expr.cat.ends_with", "reference/expressions/api/polars.Expr.cat.get_categories", "reference/expressions/api/polars.Expr.cat.len_bytes", "reference/expressions/api/polars.Expr.cat.len_chars", "reference/expressions/api/polars.Expr.cat.starts_with", "reference/expressions/api/polars.Expr.cbrt", "reference/expressions/api/polars.Expr.ceil", "reference/expressions/api/polars.Expr.clip", "reference/expressions/api/polars.Expr.cos", "reference/expressions/api/polars.Expr.cosh", "reference/expressions/api/polars.Expr.cot", "reference/expressions/api/polars.Expr.count", "reference/expressions/api/polars.Expr.cum_count", "reference/expressions/api/polars.Expr.cum_max", "reference/expressions/api/polars.Expr.cum_min", "reference/expressions/api/polars.Expr.cum_prod", "reference/expressions/api/polars.Expr.cum_sum", "reference/expressions/api/polars.Expr.cumulative_eval", "reference/expressions/api/polars.Expr.cut", "reference/expressions/api/polars.Expr.degrees", "reference/expressions/api/polars.Expr.deserialize", "reference/expressions/api/polars.Expr.diff", "reference/expressions/api/polars.Expr.dot", "reference/expressions/api/polars.Expr.drop_nans", "reference/expressions/api/polars.Expr.drop_nulls", "reference/expressions/api/polars.Expr.dt.add_business_days", "reference/expressions/api/polars.Expr.dt.base_utc_offset", "reference/expressions/api/polars.Expr.dt.cast_time_unit", "reference/expressions/api/polars.Expr.dt.century", "reference/expressions/api/polars.Expr.dt.combine", "reference/expressions/api/polars.Expr.dt.convert_time_zone", "reference/expressions/api/polars.Expr.dt.date", "reference/expressions/api/polars.Expr.dt.datetime", "reference/expressions/api/polars.Expr.dt.day", "reference/expressions/api/polars.Expr.dt.dst_offset", "reference/expressions/api/polars.Expr.dt.epoch", "reference/expressions/api/polars.Expr.dt.hour", "reference/expressions/api/polars.Expr.dt.is_leap_year", "reference/expressions/api/polars.Expr.dt.iso_year", "reference/expressions/api/polars.Expr.dt.microsecond", "reference/expressions/api/polars.Expr.dt.millennium", "reference/expressions/api/polars.Expr.dt.millisecond", "reference/expressions/api/polars.Expr.dt.minute", "reference/expressions/api/polars.Expr.dt.month", "reference/expressions/api/polars.Expr.dt.month_end", "reference/expressions/api/polars.Expr.dt.month_start", "reference/expressions/api/polars.Expr.dt.nanosecond", "reference/expressions/api/polars.Expr.dt.offset_by", "reference/expressions/api/polars.Expr.dt.ordinal_day", "reference/expressions/api/polars.Expr.dt.quarter", "reference/expressions/api/polars.Expr.dt.replace", "reference/expressions/api/polars.Expr.dt.replace_time_zone", "reference/expressions/api/polars.Expr.dt.round", "reference/expressions/api/polars.Expr.dt.second", "reference/expressions/api/polars.Expr.dt.strftime", "reference/expressions/api/polars.Expr.dt.time", "reference/expressions/api/polars.Expr.dt.timestamp", "reference/expressions/api/polars.Expr.dt.to_string", "reference/expressions/api/polars.Expr.dt.total_days", "reference/expressions/api/polars.Expr.dt.total_hours", "reference/expressions/api/polars.Expr.dt.total_microseconds", "reference/expressions/api/polars.Expr.dt.total_milliseconds", "reference/expressions/api/polars.Expr.dt.total_minutes", "reference/expressions/api/polars.Expr.dt.total_nanoseconds", "reference/expressions/api/polars.Expr.dt.total_seconds", "reference/expressions/api/polars.Expr.dt.truncate", "reference/expressions/api/polars.Expr.dt.week", "reference/expressions/api/polars.Expr.dt.weekday", "reference/expressions/api/polars.Expr.dt.with_time_unit", "reference/expressions/api/polars.Expr.dt.year", "reference/expressions/api/polars.Expr.entropy", "reference/expressions/api/polars.Expr.eq", "reference/expressions/api/polars.Expr.eq_missing", "reference/expressions/api/polars.Expr.ewm_mean", "reference/expressions/api/polars.Expr.ewm_mean_by", "reference/expressions/api/polars.Expr.ewm_std", "reference/expressions/api/polars.Expr.ewm_var", "reference/expressions/api/polars.Expr.exclude", "reference/expressions/api/polars.Expr.exp", "reference/expressions/api/polars.Expr.explode", "reference/expressions/api/polars.Expr.extend_constant", "reference/expressions/api/polars.Expr.fill_nan", "reference/expressions/api/polars.Expr.fill_null", "reference/expressions/api/polars.Expr.filter", "reference/expressions/api/polars.Expr.first", "reference/expressions/api/polars.Expr.flatten", "reference/expressions/api/polars.Expr.floor", "reference/expressions/api/polars.Expr.floordiv", "reference/expressions/api/polars.Expr.forward_fill", "reference/expressions/api/polars.Expr.from_json", "reference/expressions/api/polars.Expr.gather", "reference/expressions/api/polars.Expr.gather_every", "reference/expressions/api/polars.Expr.ge", "reference/expressions/api/polars.Expr.get", "reference/expressions/api/polars.Expr.gt", "reference/expressions/api/polars.Expr.has_nulls", "reference/expressions/api/polars.Expr.hash", "reference/expressions/api/polars.Expr.head", "reference/expressions/api/polars.Expr.hist", "reference/expressions/api/polars.Expr.implode", "reference/expressions/api/polars.Expr.index_of", "reference/expressions/api/polars.Expr.inspect", "reference/expressions/api/polars.Expr.interpolate", "reference/expressions/api/polars.Expr.interpolate_by", "reference/expressions/api/polars.Expr.is_between", "reference/expressions/api/polars.Expr.is_duplicated", "reference/expressions/api/polars.Expr.is_finite", "reference/expressions/api/polars.Expr.is_first_distinct", "reference/expressions/api/polars.Expr.is_in", "reference/expressions/api/polars.Expr.is_infinite", "reference/expressions/api/polars.Expr.is_last_distinct", "reference/expressions/api/polars.Expr.is_nan", "reference/expressions/api/polars.Expr.is_not_nan", "reference/expressions/api/polars.Expr.is_not_null", "reference/expressions/api/polars.Expr.is_null", "reference/expressions/api/polars.Expr.is_unique", "reference/expressions/api/polars.Expr.kurtosis", "reference/expressions/api/polars.Expr.last", "reference/expressions/api/polars.Expr.le", "reference/expressions/api/polars.Expr.len", "reference/expressions/api/polars.Expr.limit", "reference/expressions/api/polars.Expr.list.all", "reference/expressions/api/polars.Expr.list.any", "reference/expressions/api/polars.Expr.list.arg_max", "reference/expressions/api/polars.Expr.list.arg_min", "reference/expressions/api/polars.Expr.list.concat", "reference/expressions/api/polars.Expr.list.contains", "reference/expressions/api/polars.Expr.list.count_matches", "reference/expressions/api/polars.Expr.list.diff", "reference/expressions/api/polars.Expr.list.drop_nulls", "reference/expressions/api/polars.Expr.list.eval", "reference/expressions/api/polars.Expr.list.explode", "reference/expressions/api/polars.Expr.list.first", "reference/expressions/api/polars.Expr.list.gather", "reference/expressions/api/polars.Expr.list.gather_every", "reference/expressions/api/polars.Expr.list.get", "reference/expressions/api/polars.Expr.list.head", "reference/expressions/api/polars.Expr.list.join", "reference/expressions/api/polars.Expr.list.last", "reference/expressions/api/polars.Expr.list.len", "reference/expressions/api/polars.Expr.list.max", "reference/expressions/api/polars.Expr.list.mean", "reference/expressions/api/polars.Expr.list.median", "reference/expressions/api/polars.Expr.list.min", "reference/expressions/api/polars.Expr.list.n_unique", "reference/expressions/api/polars.Expr.list.reverse", "reference/expressions/api/polars.Expr.list.sample", "reference/expressions/api/polars.Expr.list.set_difference", "reference/expressions/api/polars.Expr.list.set_intersection", "reference/expressions/api/polars.Expr.list.set_symmetric_difference", "reference/expressions/api/polars.Expr.list.set_union", "reference/expressions/api/polars.Expr.list.shift", "reference/expressions/api/polars.Expr.list.slice", "reference/expressions/api/polars.Expr.list.sort", "reference/expressions/api/polars.Expr.list.std", "reference/expressions/api/polars.Expr.list.sum", "reference/expressions/api/polars.Expr.list.tail", "reference/expressions/api/polars.Expr.list.to_array", "reference/expressions/api/polars.Expr.list.to_struct", "reference/expressions/api/polars.Expr.list.unique", "reference/expressions/api/polars.Expr.list.var", "reference/expressions/api/polars.Expr.log", "reference/expressions/api/polars.Expr.log10", "reference/expressions/api/polars.Expr.log1p", "reference/expressions/api/polars.Expr.lower_bound", "reference/expressions/api/polars.Expr.lt", "reference/expressions/api/polars.Expr.map_batches", "reference/expressions/api/polars.Expr.map_elements", "reference/expressions/api/polars.Expr.max", "reference/expressions/api/polars.Expr.mean", "reference/expressions/api/polars.Expr.median", "reference/expressions/api/polars.Expr.meta.eq", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs", "reference/expressions/api/polars.Expr.meta.is_column", "reference/expressions/api/polars.Expr.meta.is_column_selection", "reference/expressions/api/polars.Expr.meta.is_literal", "reference/expressions/api/polars.Expr.meta.is_regex_projection", "reference/expressions/api/polars.Expr.meta.ne", "reference/expressions/api/polars.Expr.meta.output_name", "reference/expressions/api/polars.Expr.meta.pop", "reference/expressions/api/polars.Expr.meta.root_names", "reference/expressions/api/polars.Expr.meta.serialize", "reference/expressions/api/polars.Expr.meta.show_graph", "reference/expressions/api/polars.Expr.meta.tree_format", "reference/expressions/api/polars.Expr.meta.undo_aliases", "reference/expressions/api/polars.Expr.meta.write_json", "reference/expressions/api/polars.Expr.min", "reference/expressions/api/polars.Expr.mod", "reference/expressions/api/polars.Expr.mode", "reference/expressions/api/polars.Expr.mul", "reference/expressions/api/polars.Expr.n_unique", "reference/expressions/api/polars.Expr.name.keep", "reference/expressions/api/polars.Expr.name.map", "reference/expressions/api/polars.Expr.name.map_fields", "reference/expressions/api/polars.Expr.name.prefix", "reference/expressions/api/polars.Expr.name.prefix_fields", "reference/expressions/api/polars.Expr.name.suffix", "reference/expressions/api/polars.Expr.name.suffix_fields", "reference/expressions/api/polars.Expr.name.to_lowercase", "reference/expressions/api/polars.Expr.name.to_uppercase", "reference/expressions/api/polars.Expr.nan_max", "reference/expressions/api/polars.Expr.nan_min", "reference/expressions/api/polars.Expr.ne", "reference/expressions/api/polars.Expr.ne_missing", "reference/expressions/api/polars.Expr.neg", "reference/expressions/api/polars.Expr.not_", "reference/expressions/api/polars.Expr.null_count", "reference/expressions/api/polars.Expr.or_", "reference/expressions/api/polars.Expr.over", "reference/expressions/api/polars.Expr.pct_change", "reference/expressions/api/polars.Expr.peak_max", "reference/expressions/api/polars.Expr.peak_min", "reference/expressions/api/polars.Expr.pipe", "reference/expressions/api/polars.Expr.pow", "reference/expressions/api/polars.Expr.product", "reference/expressions/api/polars.Expr.qcut", "reference/expressions/api/polars.Expr.quantile", "reference/expressions/api/polars.Expr.radians", "reference/expressions/api/polars.Expr.rank", "reference/expressions/api/polars.Expr.rechunk", "reference/expressions/api/polars.Expr.reinterpret", "reference/expressions/api/polars.Expr.repeat_by", "reference/expressions/api/polars.Expr.replace", "reference/expressions/api/polars.Expr.replace_strict", "reference/expressions/api/polars.Expr.reshape", "reference/expressions/api/polars.Expr.reverse", "reference/expressions/api/polars.Expr.rle", "reference/expressions/api/polars.Expr.rle_id", "reference/expressions/api/polars.Expr.rolling", "reference/expressions/api/polars.Expr.rolling_map", "reference/expressions/api/polars.Expr.rolling_max", "reference/expressions/api/polars.Expr.rolling_max_by", "reference/expressions/api/polars.Expr.rolling_mean", "reference/expressions/api/polars.Expr.rolling_mean_by", "reference/expressions/api/polars.Expr.rolling_median", "reference/expressions/api/polars.Expr.rolling_median_by", "reference/expressions/api/polars.Expr.rolling_min", "reference/expressions/api/polars.Expr.rolling_min_by", "reference/expressions/api/polars.Expr.rolling_quantile", "reference/expressions/api/polars.Expr.rolling_quantile_by", "reference/expressions/api/polars.Expr.rolling_skew", "reference/expressions/api/polars.Expr.rolling_std", "reference/expressions/api/polars.Expr.rolling_std_by", "reference/expressions/api/polars.Expr.rolling_sum", "reference/expressions/api/polars.Expr.rolling_sum_by", "reference/expressions/api/polars.Expr.rolling_var", "reference/expressions/api/polars.Expr.rolling_var_by", "reference/expressions/api/polars.Expr.round", "reference/expressions/api/polars.Expr.round_sig_figs", "reference/expressions/api/polars.Expr.sample", "reference/expressions/api/polars.Expr.search_sorted", "reference/expressions/api/polars.Expr.set_sorted", "reference/expressions/api/polars.Expr.shift", "reference/expressions/api/polars.Expr.shrink_dtype", "reference/expressions/api/polars.Expr.shuffle", "reference/expressions/api/polars.Expr.sign", "reference/expressions/api/polars.Expr.sin", "reference/expressions/api/polars.Expr.sinh", "reference/expressions/api/polars.Expr.skew", "reference/expressions/api/polars.Expr.slice", "reference/expressions/api/polars.Expr.sort", "reference/expressions/api/polars.Expr.sort_by", "reference/expressions/api/polars.Expr.sqrt", "reference/expressions/api/polars.Expr.std", "reference/expressions/api/polars.Expr.str.concat", "reference/expressions/api/polars.Expr.str.contains", "reference/expressions/api/polars.Expr.str.contains_any", "reference/expressions/api/polars.Expr.str.count_matches", "reference/expressions/api/polars.Expr.str.decode", "reference/expressions/api/polars.Expr.str.encode", "reference/expressions/api/polars.Expr.str.ends_with", "reference/expressions/api/polars.Expr.str.escape_regex", "reference/expressions/api/polars.Expr.str.explode", "reference/expressions/api/polars.Expr.str.extract", "reference/expressions/api/polars.Expr.str.extract_all", "reference/expressions/api/polars.Expr.str.extract_groups", "reference/expressions/api/polars.Expr.str.extract_many", "reference/expressions/api/polars.Expr.str.find", "reference/expressions/api/polars.Expr.str.find_many", "reference/expressions/api/polars.Expr.str.head", "reference/expressions/api/polars.Expr.str.join", "reference/expressions/api/polars.Expr.str.json_decode", "reference/expressions/api/polars.Expr.str.json_path_match", "reference/expressions/api/polars.Expr.str.len_bytes", "reference/expressions/api/polars.Expr.str.len_chars", "reference/expressions/api/polars.Expr.str.normalize", "reference/expressions/api/polars.Expr.str.pad_end", "reference/expressions/api/polars.Expr.str.pad_start", "reference/expressions/api/polars.Expr.str.replace", "reference/expressions/api/polars.Expr.str.replace_all", "reference/expressions/api/polars.Expr.str.replace_many", "reference/expressions/api/polars.Expr.str.reverse", "reference/expressions/api/polars.Expr.str.slice", "reference/expressions/api/polars.Expr.str.split", "reference/expressions/api/polars.Expr.str.split_exact", "reference/expressions/api/polars.Expr.str.splitn", "reference/expressions/api/polars.Expr.str.starts_with", "reference/expressions/api/polars.Expr.str.strip_chars", "reference/expressions/api/polars.Expr.str.strip_chars_end", "reference/expressions/api/polars.Expr.str.strip_chars_start", "reference/expressions/api/polars.Expr.str.strip_prefix", "reference/expressions/api/polars.Expr.str.strip_suffix", "reference/expressions/api/polars.Expr.str.strptime", "reference/expressions/api/polars.Expr.str.tail", "reference/expressions/api/polars.Expr.str.to_date", "reference/expressions/api/polars.Expr.str.to_datetime", "reference/expressions/api/polars.Expr.str.to_decimal", "reference/expressions/api/polars.Expr.str.to_integer", "reference/expressions/api/polars.Expr.str.to_lowercase", "reference/expressions/api/polars.Expr.str.to_time", "reference/expressions/api/polars.Expr.str.to_titlecase", "reference/expressions/api/polars.Expr.str.to_uppercase", "reference/expressions/api/polars.Expr.str.zfill", "reference/expressions/api/polars.Expr.struct.field", "reference/expressions/api/polars.Expr.struct.json_encode", "reference/expressions/api/polars.Expr.struct.rename_fields", "reference/expressions/api/polars.Expr.struct.unnest", "reference/expressions/api/polars.Expr.struct.with_fields", "reference/expressions/api/polars.Expr.sub", "reference/expressions/api/polars.Expr.sum", "reference/expressions/api/polars.Expr.tail", "reference/expressions/api/polars.Expr.tan", "reference/expressions/api/polars.Expr.tanh", "reference/expressions/api/polars.Expr.to_physical", "reference/expressions/api/polars.Expr.top_k", "reference/expressions/api/polars.Expr.top_k_by", "reference/expressions/api/polars.Expr.truediv", "reference/expressions/api/polars.Expr.unique", "reference/expressions/api/polars.Expr.unique_counts", "reference/expressions/api/polars.Expr.upper_bound", "reference/expressions/api/polars.Expr.value_counts", "reference/expressions/api/polars.Expr.var", "reference/expressions/api/polars.Expr.where", "reference/expressions/api/polars.Expr.xor", "reference/expressions/api/polars.all", "reference/expressions/api/polars.all_horizontal", "reference/expressions/api/polars.any", "reference/expressions/api/polars.any_horizontal", "reference/expressions/api/polars.approx_n_unique", "reference/expressions/api/polars.arange", "reference/expressions/api/polars.arctan2", "reference/expressions/api/polars.arctan2d", "reference/expressions/api/polars.arg_sort_by", "reference/expressions/api/polars.arg_where", "reference/expressions/api/polars.business_day_count", "reference/expressions/api/polars.coalesce", "reference/expressions/api/polars.concat_arr", "reference/expressions/api/polars.concat_list", "reference/expressions/api/polars.concat_str", "reference/expressions/api/polars.corr", "reference/expressions/api/polars.count", "reference/expressions/api/polars.cov", "reference/expressions/api/polars.cum_count", "reference/expressions/api/polars.cum_fold", "reference/expressions/api/polars.cum_reduce", "reference/expressions/api/polars.cum_sum", "reference/expressions/api/polars.cum_sum_horizontal", "reference/expressions/api/polars.date", "reference/expressions/api/polars.date_range", "reference/expressions/api/polars.date_ranges", "reference/expressions/api/polars.datetime", "reference/expressions/api/polars.datetime_range", "reference/expressions/api/polars.datetime_ranges", "reference/expressions/api/polars.duration", "reference/expressions/api/polars.element", "reference/expressions/api/polars.exclude", "reference/expressions/api/polars.first", "reference/expressions/api/polars.fold", "reference/expressions/api/polars.format", "reference/expressions/api/polars.from_epoch", "reference/expressions/api/polars.groups", "reference/expressions/api/polars.head", "reference/expressions/api/polars.implode", "reference/expressions/api/polars.int_range", "reference/expressions/api/polars.int_ranges", "reference/expressions/api/polars.last", "reference/expressions/api/polars.len", "reference/expressions/api/polars.linear_space", "reference/expressions/api/polars.lit", "reference/expressions/api/polars.map_batches", "reference/expressions/api/polars.map_groups", "reference/expressions/api/polars.max", "reference/expressions/api/polars.max_horizontal", "reference/expressions/api/polars.mean", "reference/expressions/api/polars.mean_horizontal", "reference/expressions/api/polars.median", "reference/expressions/api/polars.min", "reference/expressions/api/polars.min_horizontal", "reference/expressions/api/polars.n_unique", "reference/expressions/api/polars.nth", "reference/expressions/api/polars.ones", "reference/expressions/api/polars.quantile", "reference/expressions/api/polars.reduce", "reference/expressions/api/polars.repeat", "reference/expressions/api/polars.rolling_corr", "reference/expressions/api/polars.rolling_cov", "reference/expressions/api/polars.select", "reference/expressions/api/polars.sql", "reference/expressions/api/polars.sql_expr", "reference/expressions/api/polars.std", "reference/expressions/api/polars.struct", "reference/expressions/api/polars.sum", "reference/expressions/api/polars.sum_horizontal", "reference/expressions/api/polars.tail", "reference/expressions/api/polars.time", "reference/expressions/api/polars.time_range", "reference/expressions/api/polars.time_ranges", "reference/expressions/api/polars.var", "reference/expressions/api/polars.when", "reference/expressions/api/polars.zeros", "reference/expressions/array", "reference/expressions/binary", "reference/expressions/boolean", "reference/expressions/categories", "reference/expressions/col", "reference/expressions/columns", "reference/expressions/computation", "reference/expressions/functions", "reference/expressions/index", "reference/expressions/list", "reference/expressions/meta", "reference/expressions/miscellaneous", "reference/expressions/modify_select", "reference/expressions/name", "reference/expressions/operators", "reference/expressions/string", "reference/expressions/struct", "reference/expressions/temporal", "reference/expressions/window", "reference/functions", "reference/index", "reference/io", "reference/lazyframe/aggregation", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique", "reference/lazyframe/api/polars.LazyFrame.bottom_k", "reference/lazyframe/api/polars.LazyFrame.cache", "reference/lazyframe/api/polars.LazyFrame.cast", "reference/lazyframe/api/polars.LazyFrame.clear", "reference/lazyframe/api/polars.LazyFrame.clone", "reference/lazyframe/api/polars.LazyFrame.collect", "reference/lazyframe/api/polars.LazyFrame.collect_async", "reference/lazyframe/api/polars.LazyFrame.collect_schema", "reference/lazyframe/api/polars.LazyFrame.columns", "reference/lazyframe/api/polars.LazyFrame.count", "reference/lazyframe/api/polars.LazyFrame.describe", "reference/lazyframe/api/polars.LazyFrame.deserialize", "reference/lazyframe/api/polars.LazyFrame.drop", "reference/lazyframe/api/polars.LazyFrame.drop_nans", "reference/lazyframe/api/polars.LazyFrame.drop_nulls", "reference/lazyframe/api/polars.LazyFrame.dtypes", "reference/lazyframe/api/polars.LazyFrame.explain", "reference/lazyframe/api/polars.LazyFrame.explode", "reference/lazyframe/api/polars.LazyFrame.fill_nan", "reference/lazyframe/api/polars.LazyFrame.fill_null", "reference/lazyframe/api/polars.LazyFrame.filter", "reference/lazyframe/api/polars.LazyFrame.first", "reference/lazyframe/api/polars.LazyFrame.gather_every", "reference/lazyframe/api/polars.LazyFrame.group_by", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic", "reference/lazyframe/api/polars.LazyFrame.head", "reference/lazyframe/api/polars.LazyFrame.inspect", "reference/lazyframe/api/polars.LazyFrame.interpolate", "reference/lazyframe/api/polars.LazyFrame.join", "reference/lazyframe/api/polars.LazyFrame.join_asof", "reference/lazyframe/api/polars.LazyFrame.join_where", "reference/lazyframe/api/polars.LazyFrame.last", "reference/lazyframe/api/polars.LazyFrame.lazy", "reference/lazyframe/api/polars.LazyFrame.limit", "reference/lazyframe/api/polars.LazyFrame.map_batches", "reference/lazyframe/api/polars.LazyFrame.max", "reference/lazyframe/api/polars.LazyFrame.mean", "reference/lazyframe/api/polars.LazyFrame.median", "reference/lazyframe/api/polars.LazyFrame.melt", "reference/lazyframe/api/polars.LazyFrame.merge_sorted", "reference/lazyframe/api/polars.LazyFrame.min", "reference/lazyframe/api/polars.LazyFrame.null_count", "reference/lazyframe/api/polars.LazyFrame.pipe", "reference/lazyframe/api/polars.LazyFrame.profile", "reference/lazyframe/api/polars.LazyFrame.quantile", "reference/lazyframe/api/polars.LazyFrame.rename", "reference/lazyframe/api/polars.LazyFrame.reverse", "reference/lazyframe/api/polars.LazyFrame.rolling", "reference/lazyframe/api/polars.LazyFrame.schema", "reference/lazyframe/api/polars.LazyFrame.select", "reference/lazyframe/api/polars.LazyFrame.select_seq", "reference/lazyframe/api/polars.LazyFrame.serialize", "reference/lazyframe/api/polars.LazyFrame.set_sorted", "reference/lazyframe/api/polars.LazyFrame.shift", "reference/lazyframe/api/polars.LazyFrame.show_graph", "reference/lazyframe/api/polars.LazyFrame.slice", "reference/lazyframe/api/polars.LazyFrame.sort", "reference/lazyframe/api/polars.LazyFrame.sql", "reference/lazyframe/api/polars.LazyFrame.std", "reference/lazyframe/api/polars.LazyFrame.sum", "reference/lazyframe/api/polars.LazyFrame.tail", "reference/lazyframe/api/polars.LazyFrame.top_k", "reference/lazyframe/api/polars.LazyFrame.unique", "reference/lazyframe/api/polars.LazyFrame.unnest", "reference/lazyframe/api/polars.LazyFrame.unpivot", "reference/lazyframe/api/polars.LazyFrame.update", "reference/lazyframe/api/polars.LazyFrame.var", "reference/lazyframe/api/polars.LazyFrame.width", "reference/lazyframe/api/polars.LazyFrame.with_columns", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq", "reference/lazyframe/api/polars.LazyFrame.with_context", "reference/lazyframe/api/polars.LazyFrame.with_row_count", "reference/lazyframe/api/polars.LazyFrame.with_row_index", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "reference/lazyframe/attributes", "reference/lazyframe/descriptive", "reference/lazyframe/gpu_engine", "reference/lazyframe/group_by", "reference/lazyframe/in_process", "reference/lazyframe/index", "reference/lazyframe/miscellaneous", "reference/lazyframe/modify_select", "reference/metadata", "reference/plugins", "reference/schema/index", "reference/selectors", "reference/series/aggregation", "reference/series/api/polars.Series.__array__", "reference/series/api/polars.Series.__arrow_c_stream__", "reference/series/api/polars.Series.__getitem__", "reference/series/api/polars.Series.abs", "reference/series/api/polars.Series.alias", "reference/series/api/polars.Series.all", "reference/series/api/polars.Series.any", "reference/series/api/polars.Series.append", "reference/series/api/polars.Series.approx_n_unique", "reference/series/api/polars.Series.arccos", "reference/series/api/polars.Series.arccosh", "reference/series/api/polars.Series.arcsin", "reference/series/api/polars.Series.arcsinh", "reference/series/api/polars.Series.arctan", "reference/series/api/polars.Series.arctanh", "reference/series/api/polars.Series.arg_max", "reference/series/api/polars.Series.arg_min", "reference/series/api/polars.Series.arg_sort", "reference/series/api/polars.Series.arg_true", "reference/series/api/polars.Series.arg_unique", "reference/series/api/polars.Series.arr.all", "reference/series/api/polars.Series.arr.any", "reference/series/api/polars.Series.arr.arg_max", "reference/series/api/polars.Series.arr.arg_min", "reference/series/api/polars.Series.arr.contains", "reference/series/api/polars.Series.arr.count_matches", "reference/series/api/polars.Series.arr.explode", "reference/series/api/polars.Series.arr.first", "reference/series/api/polars.Series.arr.get", "reference/series/api/polars.Series.arr.join", "reference/series/api/polars.Series.arr.last", "reference/series/api/polars.Series.arr.max", "reference/series/api/polars.Series.arr.median", "reference/series/api/polars.Series.arr.min", "reference/series/api/polars.Series.arr.n_unique", "reference/series/api/polars.Series.arr.reverse", "reference/series/api/polars.Series.arr.shift", "reference/series/api/polars.Series.arr.sort", "reference/series/api/polars.Series.arr.std", "reference/series/api/polars.Series.arr.sum", "reference/series/api/polars.Series.arr.to_list", "reference/series/api/polars.Series.arr.to_struct", "reference/series/api/polars.Series.arr.unique", "reference/series/api/polars.Series.arr.var", "reference/series/api/polars.Series.bin.contains", "reference/series/api/polars.Series.bin.decode", "reference/series/api/polars.Series.bin.encode", "reference/series/api/polars.Series.bin.ends_with", "reference/series/api/polars.Series.bin.reinterpret", "reference/series/api/polars.Series.bin.size", "reference/series/api/polars.Series.bin.starts_with", "reference/series/api/polars.Series.bitwise_and", "reference/series/api/polars.Series.bitwise_count_ones", "reference/series/api/polars.Series.bitwise_count_zeros", "reference/series/api/polars.Series.bitwise_leading_ones", "reference/series/api/polars.Series.bitwise_leading_zeros", "reference/series/api/polars.Series.bitwise_or", "reference/series/api/polars.Series.bitwise_trailing_ones", "reference/series/api/polars.Series.bitwise_trailing_zeros", "reference/series/api/polars.Series.bitwise_xor", "reference/series/api/polars.Series.bottom_k", "reference/series/api/polars.Series.cast", "reference/series/api/polars.Series.cat.ends_with", "reference/series/api/polars.Series.cat.get_categories", "reference/series/api/polars.Series.cat.is_local", "reference/series/api/polars.Series.cat.len_bytes", "reference/series/api/polars.Series.cat.len_chars", "reference/series/api/polars.Series.cat.starts_with", "reference/series/api/polars.Series.cat.to_local", "reference/series/api/polars.Series.cat.uses_lexical_ordering", "reference/series/api/polars.Series.cbrt", "reference/series/api/polars.Series.ceil", "reference/series/api/polars.Series.chunk_lengths", "reference/series/api/polars.Series.clear", "reference/series/api/polars.Series.clip", "reference/series/api/polars.Series.clone", "reference/series/api/polars.Series.cos", "reference/series/api/polars.Series.cosh", "reference/series/api/polars.Series.cot", "reference/series/api/polars.Series.count", "reference/series/api/polars.Series.cum_count", "reference/series/api/polars.Series.cum_max", "reference/series/api/polars.Series.cum_min", "reference/series/api/polars.Series.cum_prod", "reference/series/api/polars.Series.cum_sum", "reference/series/api/polars.Series.cumulative_eval", "reference/series/api/polars.Series.cut", "reference/series/api/polars.Series.describe", "reference/series/api/polars.Series.diff", "reference/series/api/polars.Series.dot", "reference/series/api/polars.Series.drop_nans", "reference/series/api/polars.Series.drop_nulls", "reference/series/api/polars.Series.dt.add_business_days", "reference/series/api/polars.Series.dt.base_utc_offset", "reference/series/api/polars.Series.dt.cast_time_unit", "reference/series/api/polars.Series.dt.century", "reference/series/api/polars.Series.dt.combine", "reference/series/api/polars.Series.dt.convert_time_zone", "reference/series/api/polars.Series.dt.date", "reference/series/api/polars.Series.dt.datetime", "reference/series/api/polars.Series.dt.day", "reference/series/api/polars.Series.dt.dst_offset", "reference/series/api/polars.Series.dt.epoch", "reference/series/api/polars.Series.dt.hour", "reference/series/api/polars.Series.dt.is_leap_year", "reference/series/api/polars.Series.dt.iso_year", "reference/series/api/polars.Series.dt.max", "reference/series/api/polars.Series.dt.mean", "reference/series/api/polars.Series.dt.median", "reference/series/api/polars.Series.dt.microsecond", "reference/series/api/polars.Series.dt.millennium", "reference/series/api/polars.Series.dt.millisecond", "reference/series/api/polars.Series.dt.min", "reference/series/api/polars.Series.dt.minute", "reference/series/api/polars.Series.dt.month", "reference/series/api/polars.Series.dt.month_end", "reference/series/api/polars.Series.dt.month_start", "reference/series/api/polars.Series.dt.nanosecond", "reference/series/api/polars.Series.dt.offset_by", "reference/series/api/polars.Series.dt.ordinal_day", "reference/series/api/polars.Series.dt.quarter", "reference/series/api/polars.Series.dt.replace", "reference/series/api/polars.Series.dt.replace_time_zone", "reference/series/api/polars.Series.dt.round", "reference/series/api/polars.Series.dt.second", "reference/series/api/polars.Series.dt.strftime", "reference/series/api/polars.Series.dt.time", "reference/series/api/polars.Series.dt.timestamp", "reference/series/api/polars.Series.dt.to_string", "reference/series/api/polars.Series.dt.total_days", "reference/series/api/polars.Series.dt.total_hours", "reference/series/api/polars.Series.dt.total_microseconds", "reference/series/api/polars.Series.dt.total_milliseconds", "reference/series/api/polars.Series.dt.total_minutes", "reference/series/api/polars.Series.dt.total_nanoseconds", "reference/series/api/polars.Series.dt.total_seconds", "reference/series/api/polars.Series.dt.truncate", "reference/series/api/polars.Series.dt.week", "reference/series/api/polars.Series.dt.weekday", "reference/series/api/polars.Series.dt.with_time_unit", "reference/series/api/polars.Series.dt.year", "reference/series/api/polars.Series.dtype", "reference/series/api/polars.Series.entropy", "reference/series/api/polars.Series.eq", "reference/series/api/polars.Series.eq_missing", "reference/series/api/polars.Series.equals", "reference/series/api/polars.Series.estimated_size", "reference/series/api/polars.Series.ewm_mean", "reference/series/api/polars.Series.ewm_mean_by", "reference/series/api/polars.Series.ewm_std", "reference/series/api/polars.Series.ewm_var", "reference/series/api/polars.Series.exp", "reference/series/api/polars.Series.explode", "reference/series/api/polars.Series.extend", "reference/series/api/polars.Series.extend_constant", "reference/series/api/polars.Series.fill_nan", "reference/series/api/polars.Series.fill_null", "reference/series/api/polars.Series.filter", "reference/series/api/polars.Series.first", "reference/series/api/polars.Series.flags", "reference/series/api/polars.Series.floor", "reference/series/api/polars.Series.gather", "reference/series/api/polars.Series.gather_every", "reference/series/api/polars.Series.ge", "reference/series/api/polars.Series.get_chunks", "reference/series/api/polars.Series.gt", "reference/series/api/polars.Series.has_nulls", "reference/series/api/polars.Series.has_validity", "reference/series/api/polars.Series.hash", "reference/series/api/polars.Series.head", "reference/series/api/polars.Series.hist", "reference/series/api/polars.Series.implode", "reference/series/api/polars.Series.index_of", "reference/series/api/polars.Series.interpolate", "reference/series/api/polars.Series.interpolate_by", "reference/series/api/polars.Series.is_between", "reference/series/api/polars.Series.is_duplicated", "reference/series/api/polars.Series.is_empty", "reference/series/api/polars.Series.is_finite", "reference/series/api/polars.Series.is_first_distinct", "reference/series/api/polars.Series.is_in", "reference/series/api/polars.Series.is_infinite", "reference/series/api/polars.Series.is_last_distinct", "reference/series/api/polars.Series.is_nan", "reference/series/api/polars.Series.is_not_nan", "reference/series/api/polars.Series.is_not_null", "reference/series/api/polars.Series.is_null", "reference/series/api/polars.Series.is_sorted", "reference/series/api/polars.Series.is_unique", "reference/series/api/polars.Series.item", "reference/series/api/polars.Series.kurtosis", "reference/series/api/polars.Series.last", "reference/series/api/polars.Series.le", "reference/series/api/polars.Series.len", "reference/series/api/polars.Series.limit", "reference/series/api/polars.Series.list.all", "reference/series/api/polars.Series.list.any", "reference/series/api/polars.Series.list.arg_max", "reference/series/api/polars.Series.list.arg_min", "reference/series/api/polars.Series.list.concat", "reference/series/api/polars.Series.list.contains", "reference/series/api/polars.Series.list.count_matches", "reference/series/api/polars.Series.list.diff", "reference/series/api/polars.Series.list.drop_nulls", "reference/series/api/polars.Series.list.eval", "reference/series/api/polars.Series.list.explode", "reference/series/api/polars.Series.list.first", "reference/series/api/polars.Series.list.gather", "reference/series/api/polars.Series.list.gather_every", "reference/series/api/polars.Series.list.get", "reference/series/api/polars.Series.list.head", "reference/series/api/polars.Series.list.join", "reference/series/api/polars.Series.list.last", "reference/series/api/polars.Series.list.len", "reference/series/api/polars.Series.list.max", "reference/series/api/polars.Series.list.mean", "reference/series/api/polars.Series.list.median", "reference/series/api/polars.Series.list.min", "reference/series/api/polars.Series.list.n_unique", "reference/series/api/polars.Series.list.reverse", "reference/series/api/polars.Series.list.sample", "reference/series/api/polars.Series.list.set_difference", "reference/series/api/polars.Series.list.set_intersection", "reference/series/api/polars.Series.list.set_symmetric_difference", "reference/series/api/polars.Series.list.set_union", "reference/series/api/polars.Series.list.shift", "reference/series/api/polars.Series.list.slice", "reference/series/api/polars.Series.list.sort", "reference/series/api/polars.Series.list.std", "reference/series/api/polars.Series.list.sum", "reference/series/api/polars.Series.list.tail", "reference/series/api/polars.Series.list.to_array", "reference/series/api/polars.Series.list.to_struct", "reference/series/api/polars.Series.list.unique", "reference/series/api/polars.Series.list.var", "reference/series/api/polars.Series.log", "reference/series/api/polars.Series.log10", "reference/series/api/polars.Series.log1p", "reference/series/api/polars.Series.lower_bound", "reference/series/api/polars.Series.lt", "reference/series/api/polars.Series.map_elements", "reference/series/api/polars.Series.max", "reference/series/api/polars.Series.mean", "reference/series/api/polars.Series.median", "reference/series/api/polars.Series.min", "reference/series/api/polars.Series.mode", "reference/series/api/polars.Series.n_chunks", "reference/series/api/polars.Series.n_unique", "reference/series/api/polars.Series.name", "reference/series/api/polars.Series.nan_max", "reference/series/api/polars.Series.nan_min", "reference/series/api/polars.Series.ne", "reference/series/api/polars.Series.ne_missing", "reference/series/api/polars.Series.new_from_index", "reference/series/api/polars.Series.not_", "reference/series/api/polars.Series.null_count", "reference/series/api/polars.Series.pct_change", "reference/series/api/polars.Series.peak_max", "reference/series/api/polars.Series.peak_min", "reference/series/api/polars.Series.pow", "reference/series/api/polars.Series.product", "reference/series/api/polars.Series.qcut", "reference/series/api/polars.Series.quantile", "reference/series/api/polars.Series.rank", "reference/series/api/polars.Series.rechunk", "reference/series/api/polars.Series.reinterpret", "reference/series/api/polars.Series.rename", "reference/series/api/polars.Series.replace", "reference/series/api/polars.Series.replace_strict", "reference/series/api/polars.Series.reshape", "reference/series/api/polars.Series.reverse", "reference/series/api/polars.Series.rle", "reference/series/api/polars.Series.rle_id", "reference/series/api/polars.Series.rolling_map", "reference/series/api/polars.Series.rolling_max", "reference/series/api/polars.Series.rolling_mean", "reference/series/api/polars.Series.rolling_median", "reference/series/api/polars.Series.rolling_min", "reference/series/api/polars.Series.rolling_quantile", "reference/series/api/polars.Series.rolling_skew", "reference/series/api/polars.Series.rolling_std", "reference/series/api/polars.Series.rolling_sum", "reference/series/api/polars.Series.rolling_var", "reference/series/api/polars.Series.round", "reference/series/api/polars.Series.round_sig_figs", "reference/series/api/polars.Series.sample", "reference/series/api/polars.Series.scatter", "reference/series/api/polars.Series.search_sorted", "reference/series/api/polars.Series.set", "reference/series/api/polars.Series.set_sorted", "reference/series/api/polars.Series.shape", "reference/series/api/polars.Series.shift", "reference/series/api/polars.Series.shrink_dtype", "reference/series/api/polars.Series.shrink_to_fit", "reference/series/api/polars.Series.shuffle", "reference/series/api/polars.Series.sign", "reference/series/api/polars.Series.sin", "reference/series/api/polars.Series.sinh", "reference/series/api/polars.Series.skew", "reference/series/api/polars.Series.slice", "reference/series/api/polars.Series.sort", "reference/series/api/polars.Series.sqrt", "reference/series/api/polars.Series.std", "reference/series/api/polars.Series.str.concat", "reference/series/api/polars.Series.str.contains", "reference/series/api/polars.Series.str.contains_any", "reference/series/api/polars.Series.str.count_matches", "reference/series/api/polars.Series.str.decode", "reference/series/api/polars.Series.str.encode", "reference/series/api/polars.Series.str.ends_with", "reference/series/api/polars.Series.str.escape_regex", "reference/series/api/polars.Series.str.explode", "reference/series/api/polars.Series.str.extract", "reference/series/api/polars.Series.str.extract_all", "reference/series/api/polars.Series.str.extract_groups", "reference/series/api/polars.Series.str.extract_many", "reference/series/api/polars.Series.str.find", "reference/series/api/polars.Series.str.find_many", "reference/series/api/polars.Series.str.head", "reference/series/api/polars.Series.str.join", "reference/series/api/polars.Series.str.json_decode", "reference/series/api/polars.Series.str.json_path_match", "reference/series/api/polars.Series.str.len_bytes", "reference/series/api/polars.Series.str.len_chars", "reference/series/api/polars.Series.str.normalize", "reference/series/api/polars.Series.str.pad_end", "reference/series/api/polars.Series.str.pad_start", "reference/series/api/polars.Series.str.replace", "reference/series/api/polars.Series.str.replace_all", "reference/series/api/polars.Series.str.replace_many", "reference/series/api/polars.Series.str.reverse", "reference/series/api/polars.Series.str.slice", "reference/series/api/polars.Series.str.split", "reference/series/api/polars.Series.str.split_exact", "reference/series/api/polars.Series.str.splitn", "reference/series/api/polars.Series.str.starts_with", "reference/series/api/polars.Series.str.strip_chars", "reference/series/api/polars.Series.str.strip_chars_end", "reference/series/api/polars.Series.str.strip_chars_start", "reference/series/api/polars.Series.str.strip_prefix", "reference/series/api/polars.Series.str.strip_suffix", "reference/series/api/polars.Series.str.strptime", "reference/series/api/polars.Series.str.tail", "reference/series/api/polars.Series.str.to_date", "reference/series/api/polars.Series.str.to_datetime", "reference/series/api/polars.Series.str.to_decimal", "reference/series/api/polars.Series.str.to_integer", "reference/series/api/polars.Series.str.to_lowercase", "reference/series/api/polars.Series.str.to_time", "reference/series/api/polars.Series.str.to_titlecase", "reference/series/api/polars.Series.str.to_uppercase", "reference/series/api/polars.Series.str.zfill", "reference/series/api/polars.Series.struct.field", "reference/series/api/polars.Series.struct.fields", "reference/series/api/polars.Series.struct.json_encode", "reference/series/api/polars.Series.struct.rename_fields", "reference/series/api/polars.Series.struct.schema", "reference/series/api/polars.Series.struct.unnest", "reference/series/api/polars.Series.sum", "reference/series/api/polars.Series.tail", "reference/series/api/polars.Series.tan", "reference/series/api/polars.Series.tanh", "reference/series/api/polars.Series.to_arrow", "reference/series/api/polars.Series.to_dummies", "reference/series/api/polars.Series.to_frame", "reference/series/api/polars.Series.to_init_repr", "reference/series/api/polars.Series.to_jax", "reference/series/api/polars.Series.to_list", "reference/series/api/polars.Series.to_numpy", "reference/series/api/polars.Series.to_pandas", "reference/series/api/polars.Series.to_physical", "reference/series/api/polars.Series.to_torch", "reference/series/api/polars.Series.top_k", "reference/series/api/polars.Series.unique", "reference/series/api/polars.Series.unique_counts", "reference/series/api/polars.Series.upper_bound", "reference/series/api/polars.Series.value_counts", "reference/series/api/polars.Series.var", "reference/series/api/polars.Series.zip_with", "reference/series/array", "reference/series/attributes", "reference/series/binary", "reference/series/boolean", "reference/series/categories", "reference/series/computation", "reference/series/descriptive", "reference/series/export", "reference/series/index", "reference/series/list", "reference/series/miscellaneous", "reference/series/modify_select", "reference/series/operators", "reference/series/plot", "reference/series/string", "reference/series/struct", "reference/series/temporal", "reference/sql/api/polars.SQLContext.execute", "reference/sql/api/polars.SQLContext.execute_global", "reference/sql/api/polars.SQLContext.register", "reference/sql/api/polars.SQLContext.register_globals", "reference/sql/api/polars.SQLContext.register_many", "reference/sql/api/polars.SQLContext.tables", "reference/sql/api/polars.SQLContext.unregister", "reference/sql/clauses", "reference/sql/functions/aggregate", "reference/sql/functions/array", "reference/sql/functions/bitwise", "reference/sql/functions/conditional", "reference/sql/functions/index", "reference/sql/functions/math", "reference/sql/functions/string", "reference/sql/functions/temporal", "reference/sql/functions/trigonometry", "reference/sql/functions/types", "reference/sql/index", "reference/sql/python_api", "reference/sql/set_operations", "reference/sql/table_operations", "reference/testing"], "envversion": {"sphinx": 64, "sphinx.domains.c": 3, "sphinx.domains.changeset": 1, "sphinx.domains.citation": 1, "sphinx.domains.cpp": 9, "sphinx.domains.index": 1, "sphinx.domains.javascript": 3, "sphinx.domains.math": 2, "sphinx.domains.python": 4, "sphinx.domains.rst": 2, "sphinx.domains.std": 2, "sphinx.ext.intersphinx": 1}, "filenames": ["index.rst", "reference/api.rst", "reference/api/polars.Config.load.rst", "reference/api/polars.Config.load_from_file.rst", "reference/api/polars.Config.restore_defaults.rst", "reference/api/polars.Config.save.rst", "reference/api/polars.Config.save_to_file.rst", "reference/api/polars.Config.set_ascii_tables.rst", "reference/api/polars.Config.set_auto_structify.rst", "reference/api/polars.Config.set_decimal_separator.rst", "reference/api/polars.Config.set_float_precision.rst", "reference/api/polars.Config.set_fmt_float.rst", "reference/api/polars.Config.set_fmt_str_lengths.rst", "reference/api/polars.Config.set_fmt_table_cell_list_len.rst", "reference/api/polars.Config.set_streaming_chunk_size.rst", "reference/api/polars.Config.set_tbl_cell_alignment.rst", "reference/api/polars.Config.set_tbl_cell_numeric_alignment.rst", "reference/api/polars.Config.set_tbl_cols.rst", "reference/api/polars.Config.set_tbl_column_data_type_inline.rst", "reference/api/polars.Config.set_tbl_dataframe_shape_below.rst", "reference/api/polars.Config.set_tbl_formatting.rst", "reference/api/polars.Config.set_tbl_hide_column_data_types.rst", "reference/api/polars.Config.set_tbl_hide_column_names.rst", "reference/api/polars.Config.set_tbl_hide_dataframe_shape.rst", "reference/api/polars.Config.set_tbl_hide_dtype_separator.rst", "reference/api/polars.Config.set_tbl_rows.rst", "reference/api/polars.Config.set_tbl_width_chars.rst", "reference/api/polars.Config.set_thousands_separator.rst", "reference/api/polars.Config.set_trim_decimal_zeros.rst", "reference/api/polars.Config.set_verbose.rst", "reference/api/polars.Config.state.rst", "reference/api/polars.CredentialProvider.rst", "reference/api/polars.CredentialProviderAWS.rst", "reference/api/polars.CredentialProviderAzure.rst", "reference/api/polars.CredentialProviderGCP.rst", "reference/api/polars.DataFrame.write_avro.rst", "reference/api/polars.DataFrame.write_clipboard.rst", "reference/api/polars.DataFrame.write_csv.rst", "reference/api/polars.DataFrame.write_database.rst", "reference/api/polars.DataFrame.write_delta.rst", "reference/api/polars.DataFrame.write_excel.rst", "reference/api/polars.DataFrame.write_ipc.rst", "reference/api/polars.DataFrame.write_ipc_stream.rst", "reference/api/polars.DataFrame.write_json.rst", "reference/api/polars.DataFrame.write_ndjson.rst", "reference/api/polars.DataFrame.write_parquet.rst", "reference/api/polars.LazyFrame.sink_csv.rst", "reference/api/polars.LazyFrame.sink_ipc.rst", "reference/api/polars.LazyFrame.sink_ndjson.rst", "reference/api/polars.LazyFrame.sink_parquet.rst", "reference/api/polars.StringCache.rst", "reference/api/polars.align_frames.rst", "reference/api/polars.api.register_dataframe_namespace.rst", "reference/api/polars.api.register_expr_namespace.rst", "reference/api/polars.api.register_lazyframe_namespace.rst", "reference/api/polars.api.register_series_namespace.rst", "reference/api/polars.build_info.rst", "reference/api/polars.collect_all.rst", "reference/api/polars.collect_all_async.rst", "reference/api/polars.concat.rst", "reference/api/polars.datatypes.Array.rst", "reference/api/polars.datatypes.Binary.rst", "reference/api/polars.datatypes.Boolean.rst", "reference/api/polars.datatypes.Categorical.rst", "reference/api/polars.datatypes.DataType.rst", "reference/api/polars.datatypes.Date.rst", "reference/api/polars.datatypes.Datetime.rst", "reference/api/polars.datatypes.Decimal.rst", "reference/api/polars.datatypes.Duration.rst", "reference/api/polars.datatypes.Enum.rst", "reference/api/polars.datatypes.Field.rst", "reference/api/polars.datatypes.Float32.rst", "reference/api/polars.datatypes.Float64.rst", "reference/api/polars.datatypes.Int128.rst", "reference/api/polars.datatypes.Int16.rst", "reference/api/polars.datatypes.Int32.rst", "reference/api/polars.datatypes.Int64.rst", "reference/api/polars.datatypes.Int8.rst", "reference/api/polars.datatypes.List.rst", "reference/api/polars.datatypes.Null.rst", "reference/api/polars.datatypes.Object.rst", "reference/api/polars.datatypes.String.rst", "reference/api/polars.datatypes.Struct.rst", "reference/api/polars.datatypes.Time.rst", "reference/api/polars.datatypes.UInt16.rst", "reference/api/polars.datatypes.UInt32.rst", "reference/api/polars.datatypes.UInt64.rst", "reference/api/polars.datatypes.UInt8.rst", "reference/api/polars.datatypes.Unknown.rst", "reference/api/polars.datatypes.Utf8.rst", "reference/api/polars.disable_string_cache.rst", "reference/api/polars.enable_string_cache.rst", "reference/api/polars.escape_regex.rst", "reference/api/polars.exceptions.CategoricalRemappingWarning.rst", "reference/api/polars.exceptions.ChronoFormatWarning.rst", "reference/api/polars.exceptions.ColumnNotFoundError.rst", "reference/api/polars.exceptions.ComputeError.rst", "reference/api/polars.exceptions.CustomUFuncWarning.rst", "reference/api/polars.exceptions.DataOrientationWarning.rst", "reference/api/polars.exceptions.DuplicateError.rst", "reference/api/polars.exceptions.InvalidOperationError.rst", "reference/api/polars.exceptions.MapWithoutReturnDtypeWarning.rst", "reference/api/polars.exceptions.ModuleUpgradeRequiredError.rst", "reference/api/polars.exceptions.NoDataError.rst", "reference/api/polars.exceptions.NoRowsReturnedError.rst", "reference/api/polars.exceptions.OutOfBoundsError.rst", "reference/api/polars.exceptions.PanicException.rst", "reference/api/polars.exceptions.ParameterCollisionError.rst", "reference/api/polars.exceptions.PerformanceWarning.rst", "reference/api/polars.exceptions.PolarsError.rst", "reference/api/polars.exceptions.PolarsInefficientMapWarning.rst", "reference/api/polars.exceptions.PolarsWarning.rst", "reference/api/polars.exceptions.RowsError.rst", "reference/api/polars.exceptions.SQLInterfaceError.rst", "reference/api/polars.exceptions.SQLSyntaxError.rst", "reference/api/polars.exceptions.SchemaError.rst", "reference/api/polars.exceptions.SchemaFieldNotFoundError.rst", "reference/api/polars.exceptions.ShapeError.rst", "reference/api/polars.exceptions.StringCacheMismatchError.rst", "reference/api/polars.exceptions.StructFieldNotFoundError.rst", "reference/api/polars.exceptions.TooManyRowsReturnedError.rst", "reference/api/polars.exceptions.UnstableWarning.rst", "reference/api/polars.exceptions.UnsuitableSQLError.rst", "reference/api/polars.from_arrow.rst", "reference/api/polars.from_dataframe.rst", "reference/api/polars.from_dict.rst", "reference/api/polars.from_dicts.rst", "reference/api/polars.from_numpy.rst", "reference/api/polars.from_pandas.rst", "reference/api/polars.from_records.rst", "reference/api/polars.from_repr.rst", "reference/api/polars.get_index_type.rst", "reference/api/polars.io.csv.batched_reader.BatchedCsvReader.next_batches.rst", "reference/api/polars.io.plugins.register_io_source.rst", "reference/api/polars.json_normalize.rst", "reference/api/polars.plugins.register_plugin_function.rst", "reference/api/polars.read_avro.rst", "reference/api/polars.read_clipboard.rst", "reference/api/polars.read_csv.rst", "reference/api/polars.read_csv_batched.rst", "reference/api/polars.read_database.rst", "reference/api/polars.read_database_uri.rst", "reference/api/polars.read_delta.rst", "reference/api/polars.read_excel.rst", "reference/api/polars.read_ipc.rst", "reference/api/polars.read_ipc_schema.rst", "reference/api/polars.read_ipc_stream.rst", "reference/api/polars.read_json.rst", "reference/api/polars.read_ndjson.rst", "reference/api/polars.read_ods.rst", "reference/api/polars.read_parquet.rst", "reference/api/polars.read_parquet_schema.rst", "reference/api/polars.scan_csv.rst", "reference/api/polars.scan_delta.rst", "reference/api/polars.scan_iceberg.rst", "reference/api/polars.scan_ipc.rst", "reference/api/polars.scan_ndjson.rst", "reference/api/polars.scan_parquet.rst", "reference/api/polars.scan_pyarrow_dataset.rst", "reference/api/polars.set_random_seed.rst", "reference/api/polars.show_versions.rst", "reference/api/polars.testing.assert_frame_equal.rst", "reference/api/polars.testing.assert_frame_not_equal.rst", "reference/api/polars.testing.assert_series_equal.rst", "reference/api/polars.testing.assert_series_not_equal.rst", "reference/api/polars.testing.parametric.column.rst", "reference/api/polars.testing.parametric.columns.rst", "reference/api/polars.testing.parametric.create_list_strategy.rst", "reference/api/polars.testing.parametric.dataframes.rst", "reference/api/polars.testing.parametric.dtypes.rst", "reference/api/polars.testing.parametric.lists.rst", "reference/api/polars.testing.parametric.load_profile.rst", "reference/api/polars.testing.parametric.series.rst", "reference/api/polars.testing.parametric.set_profile.rst", "reference/api/polars.thread_pool_size.rst", "reference/api/polars.threadpool_size.rst", "reference/api/polars.using_string_cache.rst", "reference/catalog/api/polars.Catalog.rst", "reference/catalog/api/polars.Catalog.get_table_info.rst", "reference/catalog/api/polars.Catalog.list_catalogs.rst", "reference/catalog/api/polars.Catalog.list_namespaces.rst", "reference/catalog/api/polars.Catalog.list_tables.rst", "reference/catalog/api/polars.Catalog.scan_table.rst", "reference/catalog/api/polars.catalog.unity.CatalogInfo.rst", "reference/catalog/api/polars.catalog.unity.ColumnInfo.rst", "reference/catalog/api/polars.catalog.unity.DataSourceFormat.rst", "reference/catalog/api/polars.catalog.unity.NamespaceInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.rst", "reference/catalog/api/polars.catalog.unity.TableInfo.get_polars_schema.rst", "reference/catalog/api/polars.catalog.unity.TableType.rst", "reference/catalog/index.rst", "reference/catalog/unity.rst", "reference/config.rst", "reference/dataframe/aggregation.rst", "reference/dataframe/api/polars.DataFrame.__array__.rst", "reference/dataframe/api/polars.DataFrame.__arrow_c_stream__.rst", "reference/dataframe/api/polars.DataFrame.__dataframe__.rst", "reference/dataframe/api/polars.DataFrame.__getitem__.rst", "reference/dataframe/api/polars.DataFrame.approx_n_unique.rst", "reference/dataframe/api/polars.DataFrame.bottom_k.rst", "reference/dataframe/api/polars.DataFrame.cast.rst", "reference/dataframe/api/polars.DataFrame.clear.rst", "reference/dataframe/api/polars.DataFrame.clone.rst", "reference/dataframe/api/polars.DataFrame.collect_schema.rst", "reference/dataframe/api/polars.DataFrame.columns.rst", "reference/dataframe/api/polars.DataFrame.corr.rst", "reference/dataframe/api/polars.DataFrame.count.rst", "reference/dataframe/api/polars.DataFrame.describe.rst", "reference/dataframe/api/polars.DataFrame.deserialize.rst", "reference/dataframe/api/polars.DataFrame.drop.rst", "reference/dataframe/api/polars.DataFrame.drop_in_place.rst", "reference/dataframe/api/polars.DataFrame.drop_nans.rst", "reference/dataframe/api/polars.DataFrame.drop_nulls.rst", "reference/dataframe/api/polars.DataFrame.dtypes.rst", "reference/dataframe/api/polars.DataFrame.equals.rst", "reference/dataframe/api/polars.DataFrame.estimated_size.rst", "reference/dataframe/api/polars.DataFrame.explode.rst", "reference/dataframe/api/polars.DataFrame.extend.rst", "reference/dataframe/api/polars.DataFrame.fill_nan.rst", "reference/dataframe/api/polars.DataFrame.fill_null.rst", "reference/dataframe/api/polars.DataFrame.filter.rst", "reference/dataframe/api/polars.DataFrame.flags.rst", "reference/dataframe/api/polars.DataFrame.fold.rst", "reference/dataframe/api/polars.DataFrame.gather_every.rst", "reference/dataframe/api/polars.DataFrame.get_column.rst", "reference/dataframe/api/polars.DataFrame.get_column_index.rst", "reference/dataframe/api/polars.DataFrame.get_columns.rst", "reference/dataframe/api/polars.DataFrame.glimpse.rst", "reference/dataframe/api/polars.DataFrame.group_by.rst", "reference/dataframe/api/polars.DataFrame.group_by_dynamic.rst", "reference/dataframe/api/polars.DataFrame.hash_rows.rst", "reference/dataframe/api/polars.DataFrame.head.rst", "reference/dataframe/api/polars.DataFrame.height.rst", "reference/dataframe/api/polars.DataFrame.hstack.rst", "reference/dataframe/api/polars.DataFrame.insert_column.rst", "reference/dataframe/api/polars.DataFrame.interpolate.rst", "reference/dataframe/api/polars.DataFrame.is_duplicated.rst", "reference/dataframe/api/polars.DataFrame.is_empty.rst", "reference/dataframe/api/polars.DataFrame.is_unique.rst", "reference/dataframe/api/polars.DataFrame.item.rst", "reference/dataframe/api/polars.DataFrame.iter_columns.rst", "reference/dataframe/api/polars.DataFrame.iter_rows.rst", "reference/dataframe/api/polars.DataFrame.iter_slices.rst", "reference/dataframe/api/polars.DataFrame.join.rst", "reference/dataframe/api/polars.DataFrame.join_asof.rst", "reference/dataframe/api/polars.DataFrame.join_where.rst", "reference/dataframe/api/polars.DataFrame.lazy.rst", "reference/dataframe/api/polars.DataFrame.limit.rst", "reference/dataframe/api/polars.DataFrame.map_rows.rst", "reference/dataframe/api/polars.DataFrame.max.rst", "reference/dataframe/api/polars.DataFrame.max_horizontal.rst", "reference/dataframe/api/polars.DataFrame.mean.rst", "reference/dataframe/api/polars.DataFrame.mean_horizontal.rst", "reference/dataframe/api/polars.DataFrame.median.rst", "reference/dataframe/api/polars.DataFrame.melt.rst", "reference/dataframe/api/polars.DataFrame.merge_sorted.rst", "reference/dataframe/api/polars.DataFrame.min.rst", "reference/dataframe/api/polars.DataFrame.min_horizontal.rst", "reference/dataframe/api/polars.DataFrame.n_chunks.rst", "reference/dataframe/api/polars.DataFrame.n_unique.rst", "reference/dataframe/api/polars.DataFrame.null_count.rst", "reference/dataframe/api/polars.DataFrame.partition_by.rst", "reference/dataframe/api/polars.DataFrame.pipe.rst", "reference/dataframe/api/polars.DataFrame.pivot.rst", "reference/dataframe/api/polars.DataFrame.product.rst", "reference/dataframe/api/polars.DataFrame.quantile.rst", "reference/dataframe/api/polars.DataFrame.rechunk.rst", "reference/dataframe/api/polars.DataFrame.rename.rst", "reference/dataframe/api/polars.DataFrame.replace_column.rst", "reference/dataframe/api/polars.DataFrame.reverse.rst", "reference/dataframe/api/polars.DataFrame.rolling.rst", "reference/dataframe/api/polars.DataFrame.row.rst", "reference/dataframe/api/polars.DataFrame.rows.rst", "reference/dataframe/api/polars.DataFrame.rows_by_key.rst", "reference/dataframe/api/polars.DataFrame.sample.rst", "reference/dataframe/api/polars.DataFrame.schema.rst", "reference/dataframe/api/polars.DataFrame.select.rst", "reference/dataframe/api/polars.DataFrame.select_seq.rst", "reference/dataframe/api/polars.DataFrame.serialize.rst", "reference/dataframe/api/polars.DataFrame.set_sorted.rst", "reference/dataframe/api/polars.DataFrame.shape.rst", "reference/dataframe/api/polars.DataFrame.shift.rst", "reference/dataframe/api/polars.DataFrame.shrink_to_fit.rst", "reference/dataframe/api/polars.DataFrame.slice.rst", "reference/dataframe/api/polars.DataFrame.sort.rst", "reference/dataframe/api/polars.DataFrame.sql.rst", "reference/dataframe/api/polars.DataFrame.std.rst", "reference/dataframe/api/polars.DataFrame.sum.rst", "reference/dataframe/api/polars.DataFrame.sum_horizontal.rst", "reference/dataframe/api/polars.DataFrame.tail.rst", "reference/dataframe/api/polars.DataFrame.to_arrow.rst", "reference/dataframe/api/polars.DataFrame.to_dict.rst", "reference/dataframe/api/polars.DataFrame.to_dicts.rst", "reference/dataframe/api/polars.DataFrame.to_dummies.rst", "reference/dataframe/api/polars.DataFrame.to_init_repr.rst", "reference/dataframe/api/polars.DataFrame.to_jax.rst", "reference/dataframe/api/polars.DataFrame.to_numpy.rst", "reference/dataframe/api/polars.DataFrame.to_pandas.rst", "reference/dataframe/api/polars.DataFrame.to_series.rst", "reference/dataframe/api/polars.DataFrame.to_struct.rst", "reference/dataframe/api/polars.DataFrame.to_torch.rst", "reference/dataframe/api/polars.DataFrame.top_k.rst", "reference/dataframe/api/polars.DataFrame.transpose.rst", "reference/dataframe/api/polars.DataFrame.unique.rst", "reference/dataframe/api/polars.DataFrame.unnest.rst", "reference/dataframe/api/polars.DataFrame.unpivot.rst", "reference/dataframe/api/polars.DataFrame.unstack.rst", "reference/dataframe/api/polars.DataFrame.update.rst", "reference/dataframe/api/polars.DataFrame.upsample.rst", "reference/dataframe/api/polars.DataFrame.var.rst", "reference/dataframe/api/polars.DataFrame.vstack.rst", "reference/dataframe/api/polars.DataFrame.width.rst", "reference/dataframe/api/polars.DataFrame.with_columns.rst", "reference/dataframe/api/polars.DataFrame.with_columns_seq.rst", "reference/dataframe/api/polars.DataFrame.with_row_count.rst", "reference/dataframe/api/polars.DataFrame.with_row_index.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.__iter__.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.agg.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.all.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.count.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.first.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.head.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.last.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.len.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.map_groups.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.max.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.mean.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.median.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.min.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.n_unique.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.quantile.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.sum.rst", "reference/dataframe/api/polars.dataframe.group_by.GroupBy.tail.rst", "reference/dataframe/attributes.rst", "reference/dataframe/computation.rst", "reference/dataframe/descriptive.rst", "reference/dataframe/export.rst", "reference/dataframe/group_by.rst", "reference/dataframe/index.rst", "reference/dataframe/miscellaneous.rst", "reference/dataframe/modify_select.rst", "reference/dataframe/plot.rst", "reference/dataframe/style.rst", "reference/datatypes.rst", "reference/exceptions.rst", "reference/expressions/aggregation.rst", "reference/expressions/api/polars.Expr.abs.rst", "reference/expressions/api/polars.Expr.add.rst", "reference/expressions/api/polars.Expr.agg_groups.rst", "reference/expressions/api/polars.Expr.alias.rst", "reference/expressions/api/polars.Expr.all.rst", "reference/expressions/api/polars.Expr.and_.rst", "reference/expressions/api/polars.Expr.any.rst", "reference/expressions/api/polars.Expr.append.rst", "reference/expressions/api/polars.Expr.approx_n_unique.rst", "reference/expressions/api/polars.Expr.arccos.rst", "reference/expressions/api/polars.Expr.arccosh.rst", "reference/expressions/api/polars.Expr.arcsin.rst", "reference/expressions/api/polars.Expr.arcsinh.rst", "reference/expressions/api/polars.Expr.arctan.rst", "reference/expressions/api/polars.Expr.arctanh.rst", "reference/expressions/api/polars.Expr.arg_max.rst", "reference/expressions/api/polars.Expr.arg_min.rst", "reference/expressions/api/polars.Expr.arg_sort.rst", "reference/expressions/api/polars.Expr.arg_true.rst", "reference/expressions/api/polars.Expr.arg_unique.rst", "reference/expressions/api/polars.Expr.arr.all.rst", "reference/expressions/api/polars.Expr.arr.any.rst", "reference/expressions/api/polars.Expr.arr.arg_max.rst", "reference/expressions/api/polars.Expr.arr.arg_min.rst", "reference/expressions/api/polars.Expr.arr.contains.rst", "reference/expressions/api/polars.Expr.arr.count_matches.rst", "reference/expressions/api/polars.Expr.arr.explode.rst", "reference/expressions/api/polars.Expr.arr.first.rst", "reference/expressions/api/polars.Expr.arr.get.rst", "reference/expressions/api/polars.Expr.arr.join.rst", "reference/expressions/api/polars.Expr.arr.last.rst", "reference/expressions/api/polars.Expr.arr.max.rst", "reference/expressions/api/polars.Expr.arr.median.rst", "reference/expressions/api/polars.Expr.arr.min.rst", "reference/expressions/api/polars.Expr.arr.n_unique.rst", "reference/expressions/api/polars.Expr.arr.reverse.rst", "reference/expressions/api/polars.Expr.arr.shift.rst", "reference/expressions/api/polars.Expr.arr.sort.rst", "reference/expressions/api/polars.Expr.arr.std.rst", "reference/expressions/api/polars.Expr.arr.sum.rst", "reference/expressions/api/polars.Expr.arr.to_list.rst", "reference/expressions/api/polars.Expr.arr.to_struct.rst", "reference/expressions/api/polars.Expr.arr.unique.rst", "reference/expressions/api/polars.Expr.arr.var.rst", "reference/expressions/api/polars.Expr.backward_fill.rst", "reference/expressions/api/polars.Expr.bin.contains.rst", "reference/expressions/api/polars.Expr.bin.decode.rst", "reference/expressions/api/polars.Expr.bin.encode.rst", "reference/expressions/api/polars.Expr.bin.ends_with.rst", "reference/expressions/api/polars.Expr.bin.reinterpret.rst", "reference/expressions/api/polars.Expr.bin.size.rst", "reference/expressions/api/polars.Expr.bin.starts_with.rst", "reference/expressions/api/polars.Expr.bitwise_and.rst", "reference/expressions/api/polars.Expr.bitwise_count_ones.rst", "reference/expressions/api/polars.Expr.bitwise_count_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_leading_ones.rst", "reference/expressions/api/polars.Expr.bitwise_leading_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_or.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_ones.rst", "reference/expressions/api/polars.Expr.bitwise_trailing_zeros.rst", "reference/expressions/api/polars.Expr.bitwise_xor.rst", "reference/expressions/api/polars.Expr.bottom_k.rst", "reference/expressions/api/polars.Expr.bottom_k_by.rst", "reference/expressions/api/polars.Expr.cast.rst", "reference/expressions/api/polars.Expr.cat.ends_with.rst", "reference/expressions/api/polars.Expr.cat.get_categories.rst", "reference/expressions/api/polars.Expr.cat.len_bytes.rst", "reference/expressions/api/polars.Expr.cat.len_chars.rst", "reference/expressions/api/polars.Expr.cat.starts_with.rst", "reference/expressions/api/polars.Expr.cbrt.rst", "reference/expressions/api/polars.Expr.ceil.rst", "reference/expressions/api/polars.Expr.clip.rst", "reference/expressions/api/polars.Expr.cos.rst", "reference/expressions/api/polars.Expr.cosh.rst", "reference/expressions/api/polars.Expr.cot.rst", "reference/expressions/api/polars.Expr.count.rst", "reference/expressions/api/polars.Expr.cum_count.rst", "reference/expressions/api/polars.Expr.cum_max.rst", "reference/expressions/api/polars.Expr.cum_min.rst", "reference/expressions/api/polars.Expr.cum_prod.rst", "reference/expressions/api/polars.Expr.cum_sum.rst", "reference/expressions/api/polars.Expr.cumulative_eval.rst", "reference/expressions/api/polars.Expr.cut.rst", "reference/expressions/api/polars.Expr.degrees.rst", "reference/expressions/api/polars.Expr.deserialize.rst", "reference/expressions/api/polars.Expr.diff.rst", "reference/expressions/api/polars.Expr.dot.rst", "reference/expressions/api/polars.Expr.drop_nans.rst", "reference/expressions/api/polars.Expr.drop_nulls.rst", "reference/expressions/api/polars.Expr.dt.add_business_days.rst", "reference/expressions/api/polars.Expr.dt.base_utc_offset.rst", "reference/expressions/api/polars.Expr.dt.cast_time_unit.rst", "reference/expressions/api/polars.Expr.dt.century.rst", "reference/expressions/api/polars.Expr.dt.combine.rst", "reference/expressions/api/polars.Expr.dt.convert_time_zone.rst", "reference/expressions/api/polars.Expr.dt.date.rst", "reference/expressions/api/polars.Expr.dt.datetime.rst", "reference/expressions/api/polars.Expr.dt.day.rst", "reference/expressions/api/polars.Expr.dt.dst_offset.rst", "reference/expressions/api/polars.Expr.dt.epoch.rst", "reference/expressions/api/polars.Expr.dt.hour.rst", "reference/expressions/api/polars.Expr.dt.is_leap_year.rst", "reference/expressions/api/polars.Expr.dt.iso_year.rst", "reference/expressions/api/polars.Expr.dt.microsecond.rst", "reference/expressions/api/polars.Expr.dt.millennium.rst", "reference/expressions/api/polars.Expr.dt.millisecond.rst", "reference/expressions/api/polars.Expr.dt.minute.rst", "reference/expressions/api/polars.Expr.dt.month.rst", "reference/expressions/api/polars.Expr.dt.month_end.rst", "reference/expressions/api/polars.Expr.dt.month_start.rst", "reference/expressions/api/polars.Expr.dt.nanosecond.rst", "reference/expressions/api/polars.Expr.dt.offset_by.rst", "reference/expressions/api/polars.Expr.dt.ordinal_day.rst", "reference/expressions/api/polars.Expr.dt.quarter.rst", "reference/expressions/api/polars.Expr.dt.replace.rst", "reference/expressions/api/polars.Expr.dt.replace_time_zone.rst", "reference/expressions/api/polars.Expr.dt.round.rst", "reference/expressions/api/polars.Expr.dt.second.rst", "reference/expressions/api/polars.Expr.dt.strftime.rst", "reference/expressions/api/polars.Expr.dt.time.rst", "reference/expressions/api/polars.Expr.dt.timestamp.rst", "reference/expressions/api/polars.Expr.dt.to_string.rst", "reference/expressions/api/polars.Expr.dt.total_days.rst", "reference/expressions/api/polars.Expr.dt.total_hours.rst", "reference/expressions/api/polars.Expr.dt.total_microseconds.rst", "reference/expressions/api/polars.Expr.dt.total_milliseconds.rst", "reference/expressions/api/polars.Expr.dt.total_minutes.rst", "reference/expressions/api/polars.Expr.dt.total_nanoseconds.rst", "reference/expressions/api/polars.Expr.dt.total_seconds.rst", "reference/expressions/api/polars.Expr.dt.truncate.rst", "reference/expressions/api/polars.Expr.dt.week.rst", "reference/expressions/api/polars.Expr.dt.weekday.rst", "reference/expressions/api/polars.Expr.dt.with_time_unit.rst", "reference/expressions/api/polars.Expr.dt.year.rst", "reference/expressions/api/polars.Expr.entropy.rst", "reference/expressions/api/polars.Expr.eq.rst", "reference/expressions/api/polars.Expr.eq_missing.rst", "reference/expressions/api/polars.Expr.ewm_mean.rst", "reference/expressions/api/polars.Expr.ewm_mean_by.rst", "reference/expressions/api/polars.Expr.ewm_std.rst", "reference/expressions/api/polars.Expr.ewm_var.rst", "reference/expressions/api/polars.Expr.exclude.rst", "reference/expressions/api/polars.Expr.exp.rst", "reference/expressions/api/polars.Expr.explode.rst", "reference/expressions/api/polars.Expr.extend_constant.rst", "reference/expressions/api/polars.Expr.fill_nan.rst", "reference/expressions/api/polars.Expr.fill_null.rst", "reference/expressions/api/polars.Expr.filter.rst", "reference/expressions/api/polars.Expr.first.rst", "reference/expressions/api/polars.Expr.flatten.rst", "reference/expressions/api/polars.Expr.floor.rst", "reference/expressions/api/polars.Expr.floordiv.rst", "reference/expressions/api/polars.Expr.forward_fill.rst", "reference/expressions/api/polars.Expr.from_json.rst", "reference/expressions/api/polars.Expr.gather.rst", "reference/expressions/api/polars.Expr.gather_every.rst", "reference/expressions/api/polars.Expr.ge.rst", "reference/expressions/api/polars.Expr.get.rst", "reference/expressions/api/polars.Expr.gt.rst", "reference/expressions/api/polars.Expr.has_nulls.rst", "reference/expressions/api/polars.Expr.hash.rst", "reference/expressions/api/polars.Expr.head.rst", "reference/expressions/api/polars.Expr.hist.rst", "reference/expressions/api/polars.Expr.implode.rst", "reference/expressions/api/polars.Expr.index_of.rst", "reference/expressions/api/polars.Expr.inspect.rst", "reference/expressions/api/polars.Expr.interpolate.rst", "reference/expressions/api/polars.Expr.interpolate_by.rst", "reference/expressions/api/polars.Expr.is_between.rst", "reference/expressions/api/polars.Expr.is_duplicated.rst", "reference/expressions/api/polars.Expr.is_finite.rst", "reference/expressions/api/polars.Expr.is_first_distinct.rst", "reference/expressions/api/polars.Expr.is_in.rst", "reference/expressions/api/polars.Expr.is_infinite.rst", "reference/expressions/api/polars.Expr.is_last_distinct.rst", "reference/expressions/api/polars.Expr.is_nan.rst", "reference/expressions/api/polars.Expr.is_not_nan.rst", "reference/expressions/api/polars.Expr.is_not_null.rst", "reference/expressions/api/polars.Expr.is_null.rst", "reference/expressions/api/polars.Expr.is_unique.rst", "reference/expressions/api/polars.Expr.kurtosis.rst", "reference/expressions/api/polars.Expr.last.rst", "reference/expressions/api/polars.Expr.le.rst", "reference/expressions/api/polars.Expr.len.rst", "reference/expressions/api/polars.Expr.limit.rst", "reference/expressions/api/polars.Expr.list.all.rst", "reference/expressions/api/polars.Expr.list.any.rst", "reference/expressions/api/polars.Expr.list.arg_max.rst", "reference/expressions/api/polars.Expr.list.arg_min.rst", "reference/expressions/api/polars.Expr.list.concat.rst", "reference/expressions/api/polars.Expr.list.contains.rst", "reference/expressions/api/polars.Expr.list.count_matches.rst", "reference/expressions/api/polars.Expr.list.diff.rst", "reference/expressions/api/polars.Expr.list.drop_nulls.rst", "reference/expressions/api/polars.Expr.list.eval.rst", "reference/expressions/api/polars.Expr.list.explode.rst", "reference/expressions/api/polars.Expr.list.first.rst", "reference/expressions/api/polars.Expr.list.gather.rst", "reference/expressions/api/polars.Expr.list.gather_every.rst", "reference/expressions/api/polars.Expr.list.get.rst", "reference/expressions/api/polars.Expr.list.head.rst", "reference/expressions/api/polars.Expr.list.join.rst", "reference/expressions/api/polars.Expr.list.last.rst", "reference/expressions/api/polars.Expr.list.len.rst", "reference/expressions/api/polars.Expr.list.max.rst", "reference/expressions/api/polars.Expr.list.mean.rst", "reference/expressions/api/polars.Expr.list.median.rst", "reference/expressions/api/polars.Expr.list.min.rst", "reference/expressions/api/polars.Expr.list.n_unique.rst", "reference/expressions/api/polars.Expr.list.reverse.rst", "reference/expressions/api/polars.Expr.list.sample.rst", "reference/expressions/api/polars.Expr.list.set_difference.rst", "reference/expressions/api/polars.Expr.list.set_intersection.rst", "reference/expressions/api/polars.Expr.list.set_symmetric_difference.rst", "reference/expressions/api/polars.Expr.list.set_union.rst", "reference/expressions/api/polars.Expr.list.shift.rst", "reference/expressions/api/polars.Expr.list.slice.rst", "reference/expressions/api/polars.Expr.list.sort.rst", "reference/expressions/api/polars.Expr.list.std.rst", "reference/expressions/api/polars.Expr.list.sum.rst", "reference/expressions/api/polars.Expr.list.tail.rst", "reference/expressions/api/polars.Expr.list.to_array.rst", "reference/expressions/api/polars.Expr.list.to_struct.rst", "reference/expressions/api/polars.Expr.list.unique.rst", "reference/expressions/api/polars.Expr.list.var.rst", "reference/expressions/api/polars.Expr.log.rst", "reference/expressions/api/polars.Expr.log10.rst", "reference/expressions/api/polars.Expr.log1p.rst", "reference/expressions/api/polars.Expr.lower_bound.rst", "reference/expressions/api/polars.Expr.lt.rst", "reference/expressions/api/polars.Expr.map_batches.rst", "reference/expressions/api/polars.Expr.map_elements.rst", "reference/expressions/api/polars.Expr.max.rst", "reference/expressions/api/polars.Expr.mean.rst", "reference/expressions/api/polars.Expr.median.rst", "reference/expressions/api/polars.Expr.meta.eq.rst", "reference/expressions/api/polars.Expr.meta.has_multiple_outputs.rst", "reference/expressions/api/polars.Expr.meta.is_column.rst", "reference/expressions/api/polars.Expr.meta.is_column_selection.rst", "reference/expressions/api/polars.Expr.meta.is_literal.rst", "reference/expressions/api/polars.Expr.meta.is_regex_projection.rst", "reference/expressions/api/polars.Expr.meta.ne.rst", "reference/expressions/api/polars.Expr.meta.output_name.rst", "reference/expressions/api/polars.Expr.meta.pop.rst", "reference/expressions/api/polars.Expr.meta.root_names.rst", "reference/expressions/api/polars.Expr.meta.serialize.rst", "reference/expressions/api/polars.Expr.meta.show_graph.rst", "reference/expressions/api/polars.Expr.meta.tree_format.rst", "reference/expressions/api/polars.Expr.meta.undo_aliases.rst", "reference/expressions/api/polars.Expr.meta.write_json.rst", "reference/expressions/api/polars.Expr.min.rst", "reference/expressions/api/polars.Expr.mod.rst", "reference/expressions/api/polars.Expr.mode.rst", "reference/expressions/api/polars.Expr.mul.rst", "reference/expressions/api/polars.Expr.n_unique.rst", "reference/expressions/api/polars.Expr.name.keep.rst", "reference/expressions/api/polars.Expr.name.map.rst", "reference/expressions/api/polars.Expr.name.map_fields.rst", "reference/expressions/api/polars.Expr.name.prefix.rst", "reference/expressions/api/polars.Expr.name.prefix_fields.rst", "reference/expressions/api/polars.Expr.name.suffix.rst", "reference/expressions/api/polars.Expr.name.suffix_fields.rst", "reference/expressions/api/polars.Expr.name.to_lowercase.rst", "reference/expressions/api/polars.Expr.name.to_uppercase.rst", "reference/expressions/api/polars.Expr.nan_max.rst", "reference/expressions/api/polars.Expr.nan_min.rst", "reference/expressions/api/polars.Expr.ne.rst", "reference/expressions/api/polars.Expr.ne_missing.rst", "reference/expressions/api/polars.Expr.neg.rst", "reference/expressions/api/polars.Expr.not_.rst", "reference/expressions/api/polars.Expr.null_count.rst", "reference/expressions/api/polars.Expr.or_.rst", "reference/expressions/api/polars.Expr.over.rst", "reference/expressions/api/polars.Expr.pct_change.rst", "reference/expressions/api/polars.Expr.peak_max.rst", "reference/expressions/api/polars.Expr.peak_min.rst", "reference/expressions/api/polars.Expr.pipe.rst", "reference/expressions/api/polars.Expr.pow.rst", "reference/expressions/api/polars.Expr.product.rst", "reference/expressions/api/polars.Expr.qcut.rst", "reference/expressions/api/polars.Expr.quantile.rst", "reference/expressions/api/polars.Expr.radians.rst", "reference/expressions/api/polars.Expr.rank.rst", "reference/expressions/api/polars.Expr.rechunk.rst", "reference/expressions/api/polars.Expr.reinterpret.rst", "reference/expressions/api/polars.Expr.repeat_by.rst", "reference/expressions/api/polars.Expr.replace.rst", "reference/expressions/api/polars.Expr.replace_strict.rst", "reference/expressions/api/polars.Expr.reshape.rst", "reference/expressions/api/polars.Expr.reverse.rst", "reference/expressions/api/polars.Expr.rle.rst", "reference/expressions/api/polars.Expr.rle_id.rst", "reference/expressions/api/polars.Expr.rolling.rst", "reference/expressions/api/polars.Expr.rolling_map.rst", "reference/expressions/api/polars.Expr.rolling_max.rst", "reference/expressions/api/polars.Expr.rolling_max_by.rst", "reference/expressions/api/polars.Expr.rolling_mean.rst", "reference/expressions/api/polars.Expr.rolling_mean_by.rst", "reference/expressions/api/polars.Expr.rolling_median.rst", "reference/expressions/api/polars.Expr.rolling_median_by.rst", "reference/expressions/api/polars.Expr.rolling_min.rst", "reference/expressions/api/polars.Expr.rolling_min_by.rst", "reference/expressions/api/polars.Expr.rolling_quantile.rst", "reference/expressions/api/polars.Expr.rolling_quantile_by.rst", "reference/expressions/api/polars.Expr.rolling_skew.rst", "reference/expressions/api/polars.Expr.rolling_std.rst", "reference/expressions/api/polars.Expr.rolling_std_by.rst", "reference/expressions/api/polars.Expr.rolling_sum.rst", "reference/expressions/api/polars.Expr.rolling_sum_by.rst", "reference/expressions/api/polars.Expr.rolling_var.rst", "reference/expressions/api/polars.Expr.rolling_var_by.rst", "reference/expressions/api/polars.Expr.round.rst", "reference/expressions/api/polars.Expr.round_sig_figs.rst", "reference/expressions/api/polars.Expr.sample.rst", "reference/expressions/api/polars.Expr.search_sorted.rst", "reference/expressions/api/polars.Expr.set_sorted.rst", "reference/expressions/api/polars.Expr.shift.rst", "reference/expressions/api/polars.Expr.shrink_dtype.rst", "reference/expressions/api/polars.Expr.shuffle.rst", "reference/expressions/api/polars.Expr.sign.rst", "reference/expressions/api/polars.Expr.sin.rst", "reference/expressions/api/polars.Expr.sinh.rst", "reference/expressions/api/polars.Expr.skew.rst", "reference/expressions/api/polars.Expr.slice.rst", "reference/expressions/api/polars.Expr.sort.rst", "reference/expressions/api/polars.Expr.sort_by.rst", "reference/expressions/api/polars.Expr.sqrt.rst", "reference/expressions/api/polars.Expr.std.rst", "reference/expressions/api/polars.Expr.str.concat.rst", "reference/expressions/api/polars.Expr.str.contains.rst", "reference/expressions/api/polars.Expr.str.contains_any.rst", "reference/expressions/api/polars.Expr.str.count_matches.rst", "reference/expressions/api/polars.Expr.str.decode.rst", "reference/expressions/api/polars.Expr.str.encode.rst", "reference/expressions/api/polars.Expr.str.ends_with.rst", "reference/expressions/api/polars.Expr.str.escape_regex.rst", "reference/expressions/api/polars.Expr.str.explode.rst", "reference/expressions/api/polars.Expr.str.extract.rst", "reference/expressions/api/polars.Expr.str.extract_all.rst", "reference/expressions/api/polars.Expr.str.extract_groups.rst", "reference/expressions/api/polars.Expr.str.extract_many.rst", "reference/expressions/api/polars.Expr.str.find.rst", "reference/expressions/api/polars.Expr.str.find_many.rst", "reference/expressions/api/polars.Expr.str.head.rst", "reference/expressions/api/polars.Expr.str.join.rst", "reference/expressions/api/polars.Expr.str.json_decode.rst", "reference/expressions/api/polars.Expr.str.json_path_match.rst", "reference/expressions/api/polars.Expr.str.len_bytes.rst", "reference/expressions/api/polars.Expr.str.len_chars.rst", "reference/expressions/api/polars.Expr.str.normalize.rst", "reference/expressions/api/polars.Expr.str.pad_end.rst", "reference/expressions/api/polars.Expr.str.pad_start.rst", "reference/expressions/api/polars.Expr.str.replace.rst", "reference/expressions/api/polars.Expr.str.replace_all.rst", "reference/expressions/api/polars.Expr.str.replace_many.rst", "reference/expressions/api/polars.Expr.str.reverse.rst", "reference/expressions/api/polars.Expr.str.slice.rst", "reference/expressions/api/polars.Expr.str.split.rst", "reference/expressions/api/polars.Expr.str.split_exact.rst", "reference/expressions/api/polars.Expr.str.splitn.rst", "reference/expressions/api/polars.Expr.str.starts_with.rst", "reference/expressions/api/polars.Expr.str.strip_chars.rst", "reference/expressions/api/polars.Expr.str.strip_chars_end.rst", "reference/expressions/api/polars.Expr.str.strip_chars_start.rst", "reference/expressions/api/polars.Expr.str.strip_prefix.rst", "reference/expressions/api/polars.Expr.str.strip_suffix.rst", "reference/expressions/api/polars.Expr.str.strptime.rst", "reference/expressions/api/polars.Expr.str.tail.rst", "reference/expressions/api/polars.Expr.str.to_date.rst", "reference/expressions/api/polars.Expr.str.to_datetime.rst", "reference/expressions/api/polars.Expr.str.to_decimal.rst", "reference/expressions/api/polars.Expr.str.to_integer.rst", "reference/expressions/api/polars.Expr.str.to_lowercase.rst", "reference/expressions/api/polars.Expr.str.to_time.rst", "reference/expressions/api/polars.Expr.str.to_titlecase.rst", "reference/expressions/api/polars.Expr.str.to_uppercase.rst", "reference/expressions/api/polars.Expr.str.zfill.rst", "reference/expressions/api/polars.Expr.struct.field.rst", "reference/expressions/api/polars.Expr.struct.json_encode.rst", "reference/expressions/api/polars.Expr.struct.rename_fields.rst", "reference/expressions/api/polars.Expr.struct.unnest.rst", "reference/expressions/api/polars.Expr.struct.with_fields.rst", "reference/expressions/api/polars.Expr.sub.rst", "reference/expressions/api/polars.Expr.sum.rst", "reference/expressions/api/polars.Expr.tail.rst", "reference/expressions/api/polars.Expr.tan.rst", "reference/expressions/api/polars.Expr.tanh.rst", "reference/expressions/api/polars.Expr.to_physical.rst", "reference/expressions/api/polars.Expr.top_k.rst", "reference/expressions/api/polars.Expr.top_k_by.rst", "reference/expressions/api/polars.Expr.truediv.rst", "reference/expressions/api/polars.Expr.unique.rst", "reference/expressions/api/polars.Expr.unique_counts.rst", "reference/expressions/api/polars.Expr.upper_bound.rst", "reference/expressions/api/polars.Expr.value_counts.rst", "reference/expressions/api/polars.Expr.var.rst", "reference/expressions/api/polars.Expr.where.rst", "reference/expressions/api/polars.Expr.xor.rst", "reference/expressions/api/polars.all.rst", "reference/expressions/api/polars.all_horizontal.rst", "reference/expressions/api/polars.any.rst", "reference/expressions/api/polars.any_horizontal.rst", "reference/expressions/api/polars.approx_n_unique.rst", "reference/expressions/api/polars.arange.rst", "reference/expressions/api/polars.arctan2.rst", "reference/expressions/api/polars.arctan2d.rst", "reference/expressions/api/polars.arg_sort_by.rst", "reference/expressions/api/polars.arg_where.rst", "reference/expressions/api/polars.business_day_count.rst", "reference/expressions/api/polars.coalesce.rst", "reference/expressions/api/polars.concat_arr.rst", "reference/expressions/api/polars.concat_list.rst", "reference/expressions/api/polars.concat_str.rst", "reference/expressions/api/polars.corr.rst", "reference/expressions/api/polars.count.rst", "reference/expressions/api/polars.cov.rst", "reference/expressions/api/polars.cum_count.rst", "reference/expressions/api/polars.cum_fold.rst", "reference/expressions/api/polars.cum_reduce.rst", "reference/expressions/api/polars.cum_sum.rst", "reference/expressions/api/polars.cum_sum_horizontal.rst", "reference/expressions/api/polars.date.rst", "reference/expressions/api/polars.date_range.rst", "reference/expressions/api/polars.date_ranges.rst", "reference/expressions/api/polars.datetime.rst", "reference/expressions/api/polars.datetime_range.rst", "reference/expressions/api/polars.datetime_ranges.rst", "reference/expressions/api/polars.duration.rst", "reference/expressions/api/polars.element.rst", "reference/expressions/api/polars.exclude.rst", "reference/expressions/api/polars.first.rst", "reference/expressions/api/polars.fold.rst", "reference/expressions/api/polars.format.rst", "reference/expressions/api/polars.from_epoch.rst", "reference/expressions/api/polars.groups.rst", "reference/expressions/api/polars.head.rst", "reference/expressions/api/polars.implode.rst", "reference/expressions/api/polars.int_range.rst", "reference/expressions/api/polars.int_ranges.rst", "reference/expressions/api/polars.last.rst", "reference/expressions/api/polars.len.rst", "reference/expressions/api/polars.linear_space.rst", "reference/expressions/api/polars.lit.rst", "reference/expressions/api/polars.map_batches.rst", "reference/expressions/api/polars.map_groups.rst", "reference/expressions/api/polars.max.rst", "reference/expressions/api/polars.max_horizontal.rst", "reference/expressions/api/polars.mean.rst", "reference/expressions/api/polars.mean_horizontal.rst", "reference/expressions/api/polars.median.rst", "reference/expressions/api/polars.min.rst", "reference/expressions/api/polars.min_horizontal.rst", "reference/expressions/api/polars.n_unique.rst", "reference/expressions/api/polars.nth.rst", "reference/expressions/api/polars.ones.rst", "reference/expressions/api/polars.quantile.rst", "reference/expressions/api/polars.reduce.rst", "reference/expressions/api/polars.repeat.rst", "reference/expressions/api/polars.rolling_corr.rst", "reference/expressions/api/polars.rolling_cov.rst", "reference/expressions/api/polars.select.rst", "reference/expressions/api/polars.sql.rst", "reference/expressions/api/polars.sql_expr.rst", "reference/expressions/api/polars.std.rst", "reference/expressions/api/polars.struct.rst", "reference/expressions/api/polars.sum.rst", "reference/expressions/api/polars.sum_horizontal.rst", "reference/expressions/api/polars.tail.rst", "reference/expressions/api/polars.time.rst", "reference/expressions/api/polars.time_range.rst", "reference/expressions/api/polars.time_ranges.rst", "reference/expressions/api/polars.var.rst", "reference/expressions/api/polars.when.rst", "reference/expressions/api/polars.zeros.rst", "reference/expressions/array.rst", "reference/expressions/binary.rst", "reference/expressions/boolean.rst", "reference/expressions/categories.rst", "reference/expressions/col.rst", "reference/expressions/columns.rst", "reference/expressions/computation.rst", "reference/expressions/functions.rst", "reference/expressions/index.rst", "reference/expressions/list.rst", "reference/expressions/meta.rst", "reference/expressions/miscellaneous.rst", "reference/expressions/modify_select.rst", "reference/expressions/name.rst", "reference/expressions/operators.rst", "reference/expressions/string.rst", "reference/expressions/struct.rst", "reference/expressions/temporal.rst", "reference/expressions/window.rst", "reference/functions.rst", "reference/index.rst", "reference/io.rst", "reference/lazyframe/aggregation.rst", "reference/lazyframe/api/polars.LazyFrame.approx_n_unique.rst", "reference/lazyframe/api/polars.LazyFrame.bottom_k.rst", "reference/lazyframe/api/polars.LazyFrame.cache.rst", "reference/lazyframe/api/polars.LazyFrame.cast.rst", "reference/lazyframe/api/polars.LazyFrame.clear.rst", "reference/lazyframe/api/polars.LazyFrame.clone.rst", "reference/lazyframe/api/polars.LazyFrame.collect.rst", "reference/lazyframe/api/polars.LazyFrame.collect_async.rst", "reference/lazyframe/api/polars.LazyFrame.collect_schema.rst", "reference/lazyframe/api/polars.LazyFrame.columns.rst", "reference/lazyframe/api/polars.LazyFrame.count.rst", "reference/lazyframe/api/polars.LazyFrame.describe.rst", "reference/lazyframe/api/polars.LazyFrame.deserialize.rst", "reference/lazyframe/api/polars.LazyFrame.drop.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nans.rst", "reference/lazyframe/api/polars.LazyFrame.drop_nulls.rst", "reference/lazyframe/api/polars.LazyFrame.dtypes.rst", "reference/lazyframe/api/polars.LazyFrame.explain.rst", "reference/lazyframe/api/polars.LazyFrame.explode.rst", "reference/lazyframe/api/polars.LazyFrame.fill_nan.rst", "reference/lazyframe/api/polars.LazyFrame.fill_null.rst", "reference/lazyframe/api/polars.LazyFrame.filter.rst", "reference/lazyframe/api/polars.LazyFrame.first.rst", "reference/lazyframe/api/polars.LazyFrame.gather_every.rst", "reference/lazyframe/api/polars.LazyFrame.group_by.rst", "reference/lazyframe/api/polars.LazyFrame.group_by_dynamic.rst", "reference/lazyframe/api/polars.LazyFrame.head.rst", "reference/lazyframe/api/polars.LazyFrame.inspect.rst", "reference/lazyframe/api/polars.LazyFrame.interpolate.rst", "reference/lazyframe/api/polars.LazyFrame.join.rst", "reference/lazyframe/api/polars.LazyFrame.join_asof.rst", "reference/lazyframe/api/polars.LazyFrame.join_where.rst", "reference/lazyframe/api/polars.LazyFrame.last.rst", "reference/lazyframe/api/polars.LazyFrame.lazy.rst", "reference/lazyframe/api/polars.LazyFrame.limit.rst", "reference/lazyframe/api/polars.LazyFrame.map_batches.rst", "reference/lazyframe/api/polars.LazyFrame.max.rst", "reference/lazyframe/api/polars.LazyFrame.mean.rst", "reference/lazyframe/api/polars.LazyFrame.median.rst", "reference/lazyframe/api/polars.LazyFrame.melt.rst", "reference/lazyframe/api/polars.LazyFrame.merge_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.min.rst", "reference/lazyframe/api/polars.LazyFrame.null_count.rst", "reference/lazyframe/api/polars.LazyFrame.pipe.rst", "reference/lazyframe/api/polars.LazyFrame.profile.rst", "reference/lazyframe/api/polars.LazyFrame.quantile.rst", "reference/lazyframe/api/polars.LazyFrame.rename.rst", "reference/lazyframe/api/polars.LazyFrame.reverse.rst", "reference/lazyframe/api/polars.LazyFrame.rolling.rst", "reference/lazyframe/api/polars.LazyFrame.schema.rst", "reference/lazyframe/api/polars.LazyFrame.select.rst", "reference/lazyframe/api/polars.LazyFrame.select_seq.rst", "reference/lazyframe/api/polars.LazyFrame.serialize.rst", "reference/lazyframe/api/polars.LazyFrame.set_sorted.rst", "reference/lazyframe/api/polars.LazyFrame.shift.rst", "reference/lazyframe/api/polars.LazyFrame.show_graph.rst", "reference/lazyframe/api/polars.LazyFrame.slice.rst", "reference/lazyframe/api/polars.LazyFrame.sort.rst", "reference/lazyframe/api/polars.LazyFrame.sql.rst", "reference/lazyframe/api/polars.LazyFrame.std.rst", "reference/lazyframe/api/polars.LazyFrame.sum.rst", "reference/lazyframe/api/polars.LazyFrame.tail.rst", "reference/lazyframe/api/polars.LazyFrame.top_k.rst", "reference/lazyframe/api/polars.LazyFrame.unique.rst", "reference/lazyframe/api/polars.LazyFrame.unnest.rst", "reference/lazyframe/api/polars.LazyFrame.unpivot.rst", "reference/lazyframe/api/polars.LazyFrame.update.rst", "reference/lazyframe/api/polars.LazyFrame.var.rst", "reference/lazyframe/api/polars.LazyFrame.width.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns.rst", "reference/lazyframe/api/polars.LazyFrame.with_columns_seq.rst", "reference/lazyframe/api/polars.LazyFrame.with_context.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_count.rst", "reference/lazyframe/api/polars.LazyFrame.with_row_index.rst", "reference/lazyframe/api/polars.lazyframe.engine_config.GPUEngine.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.agg.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.all.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.count.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.first.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.head.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.last.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.len.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.map_groups.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.max.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.mean.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.median.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.min.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.n_unique.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.quantile.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.sum.rst", "reference/lazyframe/api/polars.lazyframe.group_by.LazyGroupBy.tail.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.cancel.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch.rst", "reference/lazyframe/api/polars.lazyframe.in_process.InProcessQuery.fetch_blocking.rst", "reference/lazyframe/attributes.rst", "reference/lazyframe/descriptive.rst", "reference/lazyframe/gpu_engine.rst", "reference/lazyframe/group_by.rst", "reference/lazyframe/in_process.rst", "reference/lazyframe/index.rst", "reference/lazyframe/miscellaneous.rst", "reference/lazyframe/modify_select.rst", "reference/metadata.rst", "reference/plugins.rst", "reference/schema/index.rst", "reference/selectors.rst", "reference/series/aggregation.rst", "reference/series/api/polars.Series.__array__.rst", "reference/series/api/polars.Series.__arrow_c_stream__.rst", "reference/series/api/polars.Series.__getitem__.rst", "reference/series/api/polars.Series.abs.rst", "reference/series/api/polars.Series.alias.rst", "reference/series/api/polars.Series.all.rst", "reference/series/api/polars.Series.any.rst", "reference/series/api/polars.Series.append.rst", "reference/series/api/polars.Series.approx_n_unique.rst", "reference/series/api/polars.Series.arccos.rst", "reference/series/api/polars.Series.arccosh.rst", "reference/series/api/polars.Series.arcsin.rst", "reference/series/api/polars.Series.arcsinh.rst", "reference/series/api/polars.Series.arctan.rst", "reference/series/api/polars.Series.arctanh.rst", "reference/series/api/polars.Series.arg_max.rst", "reference/series/api/polars.Series.arg_min.rst", "reference/series/api/polars.Series.arg_sort.rst", "reference/series/api/polars.Series.arg_true.rst", "reference/series/api/polars.Series.arg_unique.rst", "reference/series/api/polars.Series.arr.all.rst", "reference/series/api/polars.Series.arr.any.rst", "reference/series/api/polars.Series.arr.arg_max.rst", "reference/series/api/polars.Series.arr.arg_min.rst", "reference/series/api/polars.Series.arr.contains.rst", "reference/series/api/polars.Series.arr.count_matches.rst", "reference/series/api/polars.Series.arr.explode.rst", "reference/series/api/polars.Series.arr.first.rst", "reference/series/api/polars.Series.arr.get.rst", "reference/series/api/polars.Series.arr.join.rst", "reference/series/api/polars.Series.arr.last.rst", "reference/series/api/polars.Series.arr.max.rst", "reference/series/api/polars.Series.arr.median.rst", "reference/series/api/polars.Series.arr.min.rst", "reference/series/api/polars.Series.arr.n_unique.rst", "reference/series/api/polars.Series.arr.reverse.rst", "reference/series/api/polars.Series.arr.shift.rst", "reference/series/api/polars.Series.arr.sort.rst", "reference/series/api/polars.Series.arr.std.rst", "reference/series/api/polars.Series.arr.sum.rst", "reference/series/api/polars.Series.arr.to_list.rst", "reference/series/api/polars.Series.arr.to_struct.rst", "reference/series/api/polars.Series.arr.unique.rst", "reference/series/api/polars.Series.arr.var.rst", "reference/series/api/polars.Series.bin.contains.rst", "reference/series/api/polars.Series.bin.decode.rst", "reference/series/api/polars.Series.bin.encode.rst", "reference/series/api/polars.Series.bin.ends_with.rst", "reference/series/api/polars.Series.bin.reinterpret.rst", "reference/series/api/polars.Series.bin.size.rst", "reference/series/api/polars.Series.bin.starts_with.rst", "reference/series/api/polars.Series.bitwise_and.rst", "reference/series/api/polars.Series.bitwise_count_ones.rst", "reference/series/api/polars.Series.bitwise_count_zeros.rst", "reference/series/api/polars.Series.bitwise_leading_ones.rst", "reference/series/api/polars.Series.bitwise_leading_zeros.rst", "reference/series/api/polars.Series.bitwise_or.rst", "reference/series/api/polars.Series.bitwise_trailing_ones.rst", "reference/series/api/polars.Series.bitwise_trailing_zeros.rst", "reference/series/api/polars.Series.bitwise_xor.rst", "reference/series/api/polars.Series.bottom_k.rst", "reference/series/api/polars.Series.cast.rst", "reference/series/api/polars.Series.cat.ends_with.rst", "reference/series/api/polars.Series.cat.get_categories.rst", "reference/series/api/polars.Series.cat.is_local.rst", "reference/series/api/polars.Series.cat.len_bytes.rst", "reference/series/api/polars.Series.cat.len_chars.rst", "reference/series/api/polars.Series.cat.starts_with.rst", "reference/series/api/polars.Series.cat.to_local.rst", "reference/series/api/polars.Series.cat.uses_lexical_ordering.rst", "reference/series/api/polars.Series.cbrt.rst", "reference/series/api/polars.Series.ceil.rst", "reference/series/api/polars.Series.chunk_lengths.rst", "reference/series/api/polars.Series.clear.rst", "reference/series/api/polars.Series.clip.rst", "reference/series/api/polars.Series.clone.rst", "reference/series/api/polars.Series.cos.rst", "reference/series/api/polars.Series.cosh.rst", "reference/series/api/polars.Series.cot.rst", "reference/series/api/polars.Series.count.rst", "reference/series/api/polars.Series.cum_count.rst", "reference/series/api/polars.Series.cum_max.rst", "reference/series/api/polars.Series.cum_min.rst", "reference/series/api/polars.Series.cum_prod.rst", "reference/series/api/polars.Series.cum_sum.rst", "reference/series/api/polars.Series.cumulative_eval.rst", "reference/series/api/polars.Series.cut.rst", "reference/series/api/polars.Series.describe.rst", "reference/series/api/polars.Series.diff.rst", "reference/series/api/polars.Series.dot.rst", "reference/series/api/polars.Series.drop_nans.rst", "reference/series/api/polars.Series.drop_nulls.rst", "reference/series/api/polars.Series.dt.add_business_days.rst", "reference/series/api/polars.Series.dt.base_utc_offset.rst", "reference/series/api/polars.Series.dt.cast_time_unit.rst", "reference/series/api/polars.Series.dt.century.rst", "reference/series/api/polars.Series.dt.combine.rst", "reference/series/api/polars.Series.dt.convert_time_zone.rst", "reference/series/api/polars.Series.dt.date.rst", "reference/series/api/polars.Series.dt.datetime.rst", "reference/series/api/polars.Series.dt.day.rst", "reference/series/api/polars.Series.dt.dst_offset.rst", "reference/series/api/polars.Series.dt.epoch.rst", "reference/series/api/polars.Series.dt.hour.rst", "reference/series/api/polars.Series.dt.is_leap_year.rst", "reference/series/api/polars.Series.dt.iso_year.rst", "reference/series/api/polars.Series.dt.max.rst", "reference/series/api/polars.Series.dt.mean.rst", "reference/series/api/polars.Series.dt.median.rst", "reference/series/api/polars.Series.dt.microsecond.rst", "reference/series/api/polars.Series.dt.millennium.rst", "reference/series/api/polars.Series.dt.millisecond.rst", "reference/series/api/polars.Series.dt.min.rst", "reference/series/api/polars.Series.dt.minute.rst", "reference/series/api/polars.Series.dt.month.rst", "reference/series/api/polars.Series.dt.month_end.rst", "reference/series/api/polars.Series.dt.month_start.rst", "reference/series/api/polars.Series.dt.nanosecond.rst", "reference/series/api/polars.Series.dt.offset_by.rst", "reference/series/api/polars.Series.dt.ordinal_day.rst", "reference/series/api/polars.Series.dt.quarter.rst", "reference/series/api/polars.Series.dt.replace.rst", "reference/series/api/polars.Series.dt.replace_time_zone.rst", "reference/series/api/polars.Series.dt.round.rst", "reference/series/api/polars.Series.dt.second.rst", "reference/series/api/polars.Series.dt.strftime.rst", "reference/series/api/polars.Series.dt.time.rst", "reference/series/api/polars.Series.dt.timestamp.rst", "reference/series/api/polars.Series.dt.to_string.rst", "reference/series/api/polars.Series.dt.total_days.rst", "reference/series/api/polars.Series.dt.total_hours.rst", "reference/series/api/polars.Series.dt.total_microseconds.rst", "reference/series/api/polars.Series.dt.total_milliseconds.rst", "reference/series/api/polars.Series.dt.total_minutes.rst", "reference/series/api/polars.Series.dt.total_nanoseconds.rst", "reference/series/api/polars.Series.dt.total_seconds.rst", "reference/series/api/polars.Series.dt.truncate.rst", "reference/series/api/polars.Series.dt.week.rst", "reference/series/api/polars.Series.dt.weekday.rst", "reference/series/api/polars.Series.dt.with_time_unit.rst", "reference/series/api/polars.Series.dt.year.rst", "reference/series/api/polars.Series.dtype.rst", "reference/series/api/polars.Series.entropy.rst", "reference/series/api/polars.Series.eq.rst", "reference/series/api/polars.Series.eq_missing.rst", "reference/series/api/polars.Series.equals.rst", "reference/series/api/polars.Series.estimated_size.rst", "reference/series/api/polars.Series.ewm_mean.rst", "reference/series/api/polars.Series.ewm_mean_by.rst", "reference/series/api/polars.Series.ewm_std.rst", "reference/series/api/polars.Series.ewm_var.rst", "reference/series/api/polars.Series.exp.rst", "reference/series/api/polars.Series.explode.rst", "reference/series/api/polars.Series.extend.rst", "reference/series/api/polars.Series.extend_constant.rst", "reference/series/api/polars.Series.fill_nan.rst", "reference/series/api/polars.Series.fill_null.rst", "reference/series/api/polars.Series.filter.rst", "reference/series/api/polars.Series.first.rst", "reference/series/api/polars.Series.flags.rst", "reference/series/api/polars.Series.floor.rst", "reference/series/api/polars.Series.gather.rst", "reference/series/api/polars.Series.gather_every.rst", "reference/series/api/polars.Series.ge.rst", "reference/series/api/polars.Series.get_chunks.rst", "reference/series/api/polars.Series.gt.rst", "reference/series/api/polars.Series.has_nulls.rst", "reference/series/api/polars.Series.has_validity.rst", "reference/series/api/polars.Series.hash.rst", "reference/series/api/polars.Series.head.rst", "reference/series/api/polars.Series.hist.rst", "reference/series/api/polars.Series.implode.rst", "reference/series/api/polars.Series.index_of.rst", "reference/series/api/polars.Series.interpolate.rst", "reference/series/api/polars.Series.interpolate_by.rst", "reference/series/api/polars.Series.is_between.rst", "reference/series/api/polars.Series.is_duplicated.rst", "reference/series/api/polars.Series.is_empty.rst", "reference/series/api/polars.Series.is_finite.rst", "reference/series/api/polars.Series.is_first_distinct.rst", "reference/series/api/polars.Series.is_in.rst", "reference/series/api/polars.Series.is_infinite.rst", "reference/series/api/polars.Series.is_last_distinct.rst", "reference/series/api/polars.Series.is_nan.rst", "reference/series/api/polars.Series.is_not_nan.rst", "reference/series/api/polars.Series.is_not_null.rst", "reference/series/api/polars.Series.is_null.rst", "reference/series/api/polars.Series.is_sorted.rst", "reference/series/api/polars.Series.is_unique.rst", "reference/series/api/polars.Series.item.rst", "reference/series/api/polars.Series.kurtosis.rst", "reference/series/api/polars.Series.last.rst", "reference/series/api/polars.Series.le.rst", "reference/series/api/polars.Series.len.rst", "reference/series/api/polars.Series.limit.rst", "reference/series/api/polars.Series.list.all.rst", "reference/series/api/polars.Series.list.any.rst", "reference/series/api/polars.Series.list.arg_max.rst", "reference/series/api/polars.Series.list.arg_min.rst", "reference/series/api/polars.Series.list.concat.rst", "reference/series/api/polars.Series.list.contains.rst", "reference/series/api/polars.Series.list.count_matches.rst", "reference/series/api/polars.Series.list.diff.rst", "reference/series/api/polars.Series.list.drop_nulls.rst", "reference/series/api/polars.Series.list.eval.rst", "reference/series/api/polars.Series.list.explode.rst", "reference/series/api/polars.Series.list.first.rst", "reference/series/api/polars.Series.list.gather.rst", "reference/series/api/polars.Series.list.gather_every.rst", "reference/series/api/polars.Series.list.get.rst", "reference/series/api/polars.Series.list.head.rst", "reference/series/api/polars.Series.list.join.rst", "reference/series/api/polars.Series.list.last.rst", "reference/series/api/polars.Series.list.len.rst", "reference/series/api/polars.Series.list.max.rst", "reference/series/api/polars.Series.list.mean.rst", "reference/series/api/polars.Series.list.median.rst", "reference/series/api/polars.Series.list.min.rst", "reference/series/api/polars.Series.list.n_unique.rst", "reference/series/api/polars.Series.list.reverse.rst", "reference/series/api/polars.Series.list.sample.rst", "reference/series/api/polars.Series.list.set_difference.rst", "reference/series/api/polars.Series.list.set_intersection.rst", "reference/series/api/polars.Series.list.set_symmetric_difference.rst", "reference/series/api/polars.Series.list.set_union.rst", "reference/series/api/polars.Series.list.shift.rst", "reference/series/api/polars.Series.list.slice.rst", "reference/series/api/polars.Series.list.sort.rst", "reference/series/api/polars.Series.list.std.rst", "reference/series/api/polars.Series.list.sum.rst", "reference/series/api/polars.Series.list.tail.rst", "reference/series/api/polars.Series.list.to_array.rst", "reference/series/api/polars.Series.list.to_struct.rst", "reference/series/api/polars.Series.list.unique.rst", "reference/series/api/polars.Series.list.var.rst", "reference/series/api/polars.Series.log.rst", "reference/series/api/polars.Series.log10.rst", "reference/series/api/polars.Series.log1p.rst", "reference/series/api/polars.Series.lower_bound.rst", "reference/series/api/polars.Series.lt.rst", "reference/series/api/polars.Series.map_elements.rst", "reference/series/api/polars.Series.max.rst", "reference/series/api/polars.Series.mean.rst", "reference/series/api/polars.Series.median.rst", "reference/series/api/polars.Series.min.rst", "reference/series/api/polars.Series.mode.rst", "reference/series/api/polars.Series.n_chunks.rst", "reference/series/api/polars.Series.n_unique.rst", "reference/series/api/polars.Series.name.rst", "reference/series/api/polars.Series.nan_max.rst", "reference/series/api/polars.Series.nan_min.rst", "reference/series/api/polars.Series.ne.rst", "reference/series/api/polars.Series.ne_missing.rst", "reference/series/api/polars.Series.new_from_index.rst", "reference/series/api/polars.Series.not_.rst", "reference/series/api/polars.Series.null_count.rst", "reference/series/api/polars.Series.pct_change.rst", "reference/series/api/polars.Series.peak_max.rst", "reference/series/api/polars.Series.peak_min.rst", "reference/series/api/polars.Series.pow.rst", "reference/series/api/polars.Series.product.rst", "reference/series/api/polars.Series.qcut.rst", "reference/series/api/polars.Series.quantile.rst", "reference/series/api/polars.Series.rank.rst", "reference/series/api/polars.Series.rechunk.rst", "reference/series/api/polars.Series.reinterpret.rst", "reference/series/api/polars.Series.rename.rst", "reference/series/api/polars.Series.replace.rst", "reference/series/api/polars.Series.replace_strict.rst", "reference/series/api/polars.Series.reshape.rst", "reference/series/api/polars.Series.reverse.rst", "reference/series/api/polars.Series.rle.rst", "reference/series/api/polars.Series.rle_id.rst", "reference/series/api/polars.Series.rolling_map.rst", "reference/series/api/polars.Series.rolling_max.rst", "reference/series/api/polars.Series.rolling_mean.rst", "reference/series/api/polars.Series.rolling_median.rst", "reference/series/api/polars.Series.rolling_min.rst", "reference/series/api/polars.Series.rolling_quantile.rst", "reference/series/api/polars.Series.rolling_skew.rst", "reference/series/api/polars.Series.rolling_std.rst", "reference/series/api/polars.Series.rolling_sum.rst", "reference/series/api/polars.Series.rolling_var.rst", "reference/series/api/polars.Series.round.rst", "reference/series/api/polars.Series.round_sig_figs.rst", "reference/series/api/polars.Series.sample.rst", "reference/series/api/polars.Series.scatter.rst", "reference/series/api/polars.Series.search_sorted.rst", "reference/series/api/polars.Series.set.rst", "reference/series/api/polars.Series.set_sorted.rst", "reference/series/api/polars.Series.shape.rst", "reference/series/api/polars.Series.shift.rst", "reference/series/api/polars.Series.shrink_dtype.rst", "reference/series/api/polars.Series.shrink_to_fit.rst", "reference/series/api/polars.Series.shuffle.rst", "reference/series/api/polars.Series.sign.rst", "reference/series/api/polars.Series.sin.rst", "reference/series/api/polars.Series.sinh.rst", "reference/series/api/polars.Series.skew.rst", "reference/series/api/polars.Series.slice.rst", "reference/series/api/polars.Series.sort.rst", "reference/series/api/polars.Series.sqrt.rst", "reference/series/api/polars.Series.std.rst", "reference/series/api/polars.Series.str.concat.rst", "reference/series/api/polars.Series.str.contains.rst", "reference/series/api/polars.Series.str.contains_any.rst", "reference/series/api/polars.Series.str.count_matches.rst", "reference/series/api/polars.Series.str.decode.rst", "reference/series/api/polars.Series.str.encode.rst", "reference/series/api/polars.Series.str.ends_with.rst", "reference/series/api/polars.Series.str.escape_regex.rst", "reference/series/api/polars.Series.str.explode.rst", "reference/series/api/polars.Series.str.extract.rst", "reference/series/api/polars.Series.str.extract_all.rst", "reference/series/api/polars.Series.str.extract_groups.rst", "reference/series/api/polars.Series.str.extract_many.rst", "reference/series/api/polars.Series.str.find.rst", "reference/series/api/polars.Series.str.find_many.rst", "reference/series/api/polars.Series.str.head.rst", "reference/series/api/polars.Series.str.join.rst", "reference/series/api/polars.Series.str.json_decode.rst", "reference/series/api/polars.Series.str.json_path_match.rst", "reference/series/api/polars.Series.str.len_bytes.rst", "reference/series/api/polars.Series.str.len_chars.rst", "reference/series/api/polars.Series.str.normalize.rst", "reference/series/api/polars.Series.str.pad_end.rst", "reference/series/api/polars.Series.str.pad_start.rst", "reference/series/api/polars.Series.str.replace.rst", "reference/series/api/polars.Series.str.replace_all.rst", "reference/series/api/polars.Series.str.replace_many.rst", "reference/series/api/polars.Series.str.reverse.rst", "reference/series/api/polars.Series.str.slice.rst", "reference/series/api/polars.Series.str.split.rst", "reference/series/api/polars.Series.str.split_exact.rst", "reference/series/api/polars.Series.str.splitn.rst", "reference/series/api/polars.Series.str.starts_with.rst", "reference/series/api/polars.Series.str.strip_chars.rst", "reference/series/api/polars.Series.str.strip_chars_end.rst", "reference/series/api/polars.Series.str.strip_chars_start.rst", "reference/series/api/polars.Series.str.strip_prefix.rst", "reference/series/api/polars.Series.str.strip_suffix.rst", "reference/series/api/polars.Series.str.strptime.rst", "reference/series/api/polars.Series.str.tail.rst", "reference/series/api/polars.Series.str.to_date.rst", "reference/series/api/polars.Series.str.to_datetime.rst", "reference/series/api/polars.Series.str.to_decimal.rst", "reference/series/api/polars.Series.str.to_integer.rst", "reference/series/api/polars.Series.str.to_lowercase.rst", "reference/series/api/polars.Series.str.to_time.rst", "reference/series/api/polars.Series.str.to_titlecase.rst", "reference/series/api/polars.Series.str.to_uppercase.rst", "reference/series/api/polars.Series.str.zfill.rst", "reference/series/api/polars.Series.struct.field.rst", "reference/series/api/polars.Series.struct.fields.rst", "reference/series/api/polars.Series.struct.json_encode.rst", "reference/series/api/polars.Series.struct.rename_fields.rst", "reference/series/api/polars.Series.struct.schema.rst", "reference/series/api/polars.Series.struct.unnest.rst", "reference/series/api/polars.Series.sum.rst", "reference/series/api/polars.Series.tail.rst", "reference/series/api/polars.Series.tan.rst", "reference/series/api/polars.Series.tanh.rst", "reference/series/api/polars.Series.to_arrow.rst", "reference/series/api/polars.Series.to_dummies.rst", "reference/series/api/polars.Series.to_frame.rst", "reference/series/api/polars.Series.to_init_repr.rst", "reference/series/api/polars.Series.to_jax.rst", "reference/series/api/polars.Series.to_list.rst", "reference/series/api/polars.Series.to_numpy.rst", "reference/series/api/polars.Series.to_pandas.rst", "reference/series/api/polars.Series.to_physical.rst", "reference/series/api/polars.Series.to_torch.rst", "reference/series/api/polars.Series.top_k.rst", "reference/series/api/polars.Series.unique.rst", "reference/series/api/polars.Series.unique_counts.rst", "reference/series/api/polars.Series.upper_bound.rst", "reference/series/api/polars.Series.value_counts.rst", "reference/series/api/polars.Series.var.rst", "reference/series/api/polars.Series.zip_with.rst", "reference/series/array.rst", "reference/series/attributes.rst", "reference/series/binary.rst", "reference/series/boolean.rst", "reference/series/categories.rst", "reference/series/computation.rst", "reference/series/descriptive.rst", "reference/series/export.rst", "reference/series/index.rst", "reference/series/list.rst", "reference/series/miscellaneous.rst", "reference/series/modify_select.rst", "reference/series/operators.rst", "reference/series/plot.rst", "reference/series/string.rst", "reference/series/struct.rst", "reference/series/temporal.rst", "reference/sql/api/polars.SQLContext.execute.rst", "reference/sql/api/polars.SQLContext.execute_global.rst", "reference/sql/api/polars.SQLContext.register.rst", "reference/sql/api/polars.SQLContext.register_globals.rst", "reference/sql/api/polars.SQLContext.register_many.rst", "reference/sql/api/polars.SQLContext.tables.rst", "reference/sql/api/polars.SQLContext.unregister.rst", "reference/sql/clauses.rst", "reference/sql/functions/aggregate.rst", "reference/sql/functions/array.rst", "reference/sql/functions/bitwise.rst", "reference/sql/functions/conditional.rst", "reference/sql/functions/index.rst", "reference/sql/functions/math.rst", "reference/sql/functions/string.rst", "reference/sql/functions/temporal.rst", "reference/sql/functions/trigonometry.rst", "reference/sql/functions/types.rst", "reference/sql/index.rst", "reference/sql/python_api.rst", "reference/sql/set_operations.rst", "reference/sql/table_operations.rst", "reference/testing.rst"], "indexentries": {"__array__() (polars.dataframe method)": [[194, "polars.DataFrame.__array__", false]], "__array__() (polars.series method)": [[950, "polars.Series.__array__", false]], "__arrow_c_stream__() (polars.dataframe method)": [[195, "polars.DataFrame.__arrow_c_stream__", false]], "__arrow_c_stream__() (polars.series method)": [[951, "polars.Series.__arrow_c_stream__", false]], "__dataframe__() (polars.dataframe method)": [[196, "polars.DataFrame.__dataframe__", false]], "__enter__() (polars.sqlcontext method)": [[1365, "polars.SQLContext.__enter__", false]], "__exit__() (polars.sqlcontext method)": [[1365, "polars.SQLContext.__exit__", false]], "__getitem__() (polars.dataframe method)": [[197, "polars.DataFrame.__getitem__", false]], "__getitem__() (polars.series method)": [[952, "polars.Series.__getitem__", false]], "__init__() (polars.catalog method)": [[177, "polars.Catalog.__init__", false]], "__init__() (polars.catalog.unity.cataloginfo method)": [[183, "polars.catalog.unity.CatalogInfo.__init__", false]], "__init__() (polars.catalog.unity.columninfo method)": [[184, "polars.catalog.unity.ColumnInfo.__init__", false]], "__init__() (polars.catalog.unity.namespaceinfo method)": [[186, "polars.catalog.unity.NamespaceInfo.__init__", false]], "__init__() (polars.catalog.unity.tableinfo method)": [[187, "polars.catalog.unity.TableInfo.__init__", false]], "__init__() (polars.credentialprovider method)": [[31, "polars.CredentialProvider.__init__", false]], "__init__() (polars.credentialprovideraws method)": [[32, "polars.CredentialProviderAWS.__init__", false]], "__init__() (polars.credentialproviderazure method)": [[33, "polars.CredentialProviderAzure.__init__", false]], "__init__() (polars.credentialprovidergcp method)": [[34, "polars.CredentialProviderGCP.__init__", false]], "__init__() (polars.datatypes.array method)": [[60, "polars.datatypes.Array.__init__", false]], "__init__() (polars.datatypes.binary method)": [[61, "polars.datatypes.Binary.__init__", false]], "__init__() (polars.datatypes.boolean method)": [[62, "polars.datatypes.Boolean.__init__", false]], "__init__() (polars.datatypes.categorical method)": [[63, "polars.datatypes.Categorical.__init__", false]], "__init__() (polars.datatypes.datatype method)": [[64, "polars.datatypes.DataType.__init__", false]], "__init__() (polars.datatypes.date method)": [[65, "polars.datatypes.Date.__init__", false]], "__init__() (polars.datatypes.datetime method)": [[66, "polars.datatypes.Datetime.__init__", false]], "__init__() (polars.datatypes.decimal method)": [[67, "polars.datatypes.Decimal.__init__", false]], "__init__() (polars.datatypes.duration method)": [[68, "polars.datatypes.Duration.__init__", false]], "__init__() (polars.datatypes.enum method)": [[69, "polars.datatypes.Enum.__init__", false]], "__init__() (polars.datatypes.field method)": [[70, "polars.datatypes.Field.__init__", false]], "__init__() (polars.datatypes.float32 method)": [[71, "polars.datatypes.Float32.__init__", false]], "__init__() (polars.datatypes.float64 method)": [[72, "polars.datatypes.Float64.__init__", false]], "__init__() (polars.datatypes.int128 method)": [[73, "polars.datatypes.Int128.__init__", false]], "__init__() (polars.datatypes.int16 method)": [[74, "polars.datatypes.Int16.__init__", false]], "__init__() (polars.datatypes.int32 method)": [[75, "polars.datatypes.Int32.__init__", false]], "__init__() (polars.datatypes.int64 method)": [[76, "polars.datatypes.Int64.__init__", false]], "__init__() (polars.datatypes.int8 method)": [[77, "polars.datatypes.Int8.__init__", false]], "__init__() (polars.datatypes.list method)": [[78, "polars.datatypes.List.__init__", false]], "__init__() (polars.datatypes.null method)": [[79, "polars.datatypes.Null.__init__", false]], "__init__() (polars.datatypes.object method)": [[80, "polars.datatypes.Object.__init__", false]], "__init__() (polars.datatypes.string method)": [[81, "polars.datatypes.String.__init__", false]], "__init__() (polars.datatypes.struct method)": [[82, "polars.datatypes.Struct.__init__", false]], "__init__() (polars.datatypes.time method)": [[83, "polars.datatypes.Time.__init__", false]], "__init__() (polars.datatypes.uint16 method)": [[84, "polars.datatypes.UInt16.__init__", false]], "__init__() (polars.datatypes.uint32 method)": [[85, "polars.datatypes.UInt32.__init__", false]], "__init__() (polars.datatypes.uint64 method)": [[86, "polars.datatypes.UInt64.__init__", false]], "__init__() (polars.datatypes.uint8 method)": [[87, "polars.datatypes.UInt8.__init__", false]], "__init__() (polars.datatypes.unknown method)": [[88, "polars.datatypes.Unknown.__init__", false]], "__init__() (polars.lazyframe.engine_config.gpuengine method)": [[917, "polars.lazyframe.engine_config.GPUEngine.__init__", false]], "__init__() (polars.sqlcontext method)": [[1365, "polars.SQLContext.__init__", false]], "__init__() (polars.stringcache method)": [[50, "polars.StringCache.__init__", false]], "__init__() (polars.testing.parametric.column method)": [[165, "polars.testing.parametric.column.__init__", false]], "__iter__() (polars.dataframe.group_by.groupby method)": [[316, "polars.dataframe.group_by.GroupBy.__iter__", false]], "abs() (polars.expr method)": [[346, "polars.Expr.abs", false]], "abs() (polars.series method)": [[953, "polars.Series.abs", false]], "add() (polars.expr method)": [[347, "polars.Expr.add", false]], "add_business_days() (polars.expr.dt method)": [[435, "polars.Expr.dt.add_business_days", false]], "add_business_days() (polars.series.dt method)": [[1042, "polars.Series.dt.add_business_days", false]], "agg() (polars.dataframe.group_by.groupby method)": [[317, "polars.dataframe.group_by.GroupBy.agg", false]], "agg() (polars.lazyframe.group_by.lazygroupby method)": [[918, "polars.lazyframe.group_by.LazyGroupBy.agg", false]], "agg_groups() (polars.expr method)": [[348, "polars.Expr.agg_groups", false]], "alias() (polars.expr method)": [[349, "polars.Expr.alias", false]], "alias() (polars.series method)": [[954, "polars.Series.alias", false]], "align_frames() (in module polars)": [[51, "polars.align_frames", false]], "all() (in module polars)": [[744, "polars.all", false]], "all() (in module polars.selectors)": [[948, "polars.selectors.all", false]], "all() (polars.dataframe.group_by.groupby method)": [[318, "polars.dataframe.group_by.GroupBy.all", false]], "all() (polars.expr method)": [[350, "polars.Expr.all", false]], "all() (polars.expr.arr method)": [[366, "polars.Expr.arr.all", false]], "all() (polars.expr.list method)": [[531, "polars.Expr.list.all", false]], "all() (polars.lazyframe.group_by.lazygroupby method)": [[919, "polars.lazyframe.group_by.LazyGroupBy.all", false]], "all() (polars.series method)": [[955, "polars.Series.all", false]], "all() (polars.series.arr method)": [[970, "polars.Series.arr.all", false]], "all() (polars.series.list method)": [[1145, "polars.Series.list.all", false]], "all_horizontal() (in module polars)": [[745, "polars.all_horizontal", false]], "alpha() (in module polars.selectors)": [[948, "polars.selectors.alpha", false]], "alphanumeric() (in module polars.selectors)": [[948, "polars.selectors.alphanumeric", false]], "and_() (polars.expr method)": [[351, "polars.Expr.and_", false]], "any() (in module polars)": [[746, "polars.any", false]], "any() (polars.expr method)": [[352, "polars.Expr.any", false]], "any() (polars.expr.arr method)": [[367, "polars.Expr.arr.any", false]], "any() (polars.expr.list method)": [[532, "polars.Expr.list.any", false]], "any() (polars.series method)": [[956, "polars.Series.any", false]], "any() (polars.series.arr method)": [[971, "polars.Series.arr.any", false]], "any() (polars.series.list method)": [[1146, "polars.Series.list.any", false]], "any_horizontal() (in module polars)": [[747, "polars.any_horizontal", false]], "append() (polars.expr method)": [[353, "polars.Expr.append", false]], "append() (polars.series method)": [[957, "polars.Series.append", false]], "approx_n_unique() (in module polars)": [[748, "polars.approx_n_unique", false]], "approx_n_unique() (polars.dataframe method)": [[198, "polars.DataFrame.approx_n_unique", false]], "approx_n_unique() (polars.expr method)": [[354, "polars.Expr.approx_n_unique", false]], "approx_n_unique() (polars.lazyframe method)": [[843, "polars.LazyFrame.approx_n_unique", false]], "approx_n_unique() (polars.series method)": [[958, "polars.Series.approx_n_unique", false]], "arange() (in module polars)": [[749, "polars.arange", false]], "arccos() (polars.expr method)": [[355, "polars.Expr.arccos", false]], "arccos() (polars.series method)": [[959, "polars.Series.arccos", false]], "arccosh() (polars.expr method)": [[356, "polars.Expr.arccosh", false]], "arccosh() (polars.series method)": [[960, "polars.Series.arccosh", false]], "arcsin() (polars.expr method)": [[357, "polars.Expr.arcsin", false]], "arcsin() (polars.series method)": [[961, "polars.Series.arcsin", false]], "arcsinh() (polars.expr method)": [[358, "polars.Expr.arcsinh", false]], "arcsinh() (polars.series method)": [[962, "polars.Series.arcsinh", false]], "arctan() (polars.expr method)": [[359, "polars.Expr.arctan", false]], "arctan() (polars.series method)": [[963, "polars.Series.arctan", false]], "arctan2() (in module polars)": [[750, "polars.arctan2", false]], "arctan2d() (in module polars)": [[751, "polars.arctan2d", false]], "arctanh() (polars.expr method)": [[360, "polars.Expr.arctanh", false]], "arctanh() (polars.series method)": [[964, "polars.Series.arctanh", false]], "arg_max() (polars.expr method)": [[361, "polars.Expr.arg_max", false]], "arg_max() (polars.expr.arr method)": [[368, "polars.Expr.arr.arg_max", false]], "arg_max() (polars.expr.list method)": [[533, "polars.Expr.list.arg_max", false]], "arg_max() (polars.series method)": [[965, "polars.Series.arg_max", false]], "arg_max() (polars.series.arr method)": [[972, "polars.Series.arr.arg_max", false]], "arg_max() (polars.series.list method)": [[1147, "polars.Series.list.arg_max", false]], "arg_min() (polars.expr method)": [[362, "polars.Expr.arg_min", false]], "arg_min() (polars.expr.arr method)": [[369, "polars.Expr.arr.arg_min", false]], "arg_min() (polars.expr.list method)": [[534, "polars.Expr.list.arg_min", false]], "arg_min() (polars.series method)": [[966, "polars.Series.arg_min", false]], "arg_min() (polars.series.arr method)": [[973, "polars.Series.arr.arg_min", false]], "arg_min() (polars.series.list method)": [[1148, "polars.Series.list.arg_min", false]], "arg_sort() (polars.expr method)": [[363, "polars.Expr.arg_sort", false]], "arg_sort() (polars.series method)": [[967, "polars.Series.arg_sort", false]], "arg_sort_by() (in module polars)": [[752, "polars.arg_sort_by", false]], "arg_true() (polars.expr method)": [[364, "polars.Expr.arg_true", false]], "arg_true() (polars.series method)": [[968, "polars.Series.arg_true", false]], "arg_unique() (polars.expr method)": [[365, "polars.Expr.arg_unique", false]], "arg_unique() (polars.series method)": [[969, "polars.Series.arg_unique", false]], "arg_where() (in module polars)": [[753, "polars.arg_where", false]], "array (class in polars.datatypes)": [[60, "polars.datatypes.Array", false]], "assert_frame_equal() (in module polars.testing)": [[161, "polars.testing.assert_frame_equal", false]], "assert_frame_not_equal() (in module polars.testing)": [[162, "polars.testing.assert_frame_not_equal", false]], "assert_series_equal() (in module polars.testing)": [[163, "polars.testing.assert_series_equal", false]], "assert_series_not_equal() (in module polars.testing)": [[164, "polars.testing.assert_series_not_equal", false]], "backward_fill() (polars.expr method)": [[390, "polars.Expr.backward_fill", false]], "base_utc_offset() (polars.expr.dt method)": [[436, "polars.Expr.dt.base_utc_offset", false]], "base_utc_offset() (polars.series.dt method)": [[1043, "polars.Series.dt.base_utc_offset", false]], "binary (class in polars.datatypes)": [[61, "polars.datatypes.Binary", false]], "binary() (in module polars.selectors)": [[948, "polars.selectors.binary", false]], "bitwise_and() (polars.expr method)": [[398, "polars.Expr.bitwise_and", false]], "bitwise_and() (polars.series method)": [[1001, "polars.Series.bitwise_and", false]], "bitwise_count_ones() (polars.expr method)": [[399, "polars.Expr.bitwise_count_ones", false]], "bitwise_count_ones() (polars.series method)": [[1002, "polars.Series.bitwise_count_ones", false]], "bitwise_count_zeros() (polars.expr method)": [[400, "polars.Expr.bitwise_count_zeros", false]], "bitwise_count_zeros() (polars.series method)": [[1003, "polars.Series.bitwise_count_zeros", false]], "bitwise_leading_ones() (polars.expr method)": [[401, "polars.Expr.bitwise_leading_ones", false]], "bitwise_leading_ones() (polars.series method)": [[1004, "polars.Series.bitwise_leading_ones", false]], "bitwise_leading_zeros() (polars.expr method)": [[402, "polars.Expr.bitwise_leading_zeros", false]], "bitwise_leading_zeros() (polars.series method)": [[1005, "polars.Series.bitwise_leading_zeros", false]], "bitwise_or() (polars.expr method)": [[403, "polars.Expr.bitwise_or", false]], "bitwise_or() (polars.series method)": [[1006, "polars.Series.bitwise_or", false]], "bitwise_trailing_ones() (polars.expr method)": [[404, "polars.Expr.bitwise_trailing_ones", false]], "bitwise_trailing_ones() (polars.series method)": [[1007, "polars.Series.bitwise_trailing_ones", false]], "bitwise_trailing_zeros() (polars.expr method)": [[405, "polars.Expr.bitwise_trailing_zeros", false]], "bitwise_trailing_zeros() (polars.series method)": [[1008, "polars.Series.bitwise_trailing_zeros", false]], "bitwise_xor() (polars.expr method)": [[406, "polars.Expr.bitwise_xor", false]], "bitwise_xor() (polars.series method)": [[1009, "polars.Series.bitwise_xor", false]], "boolean (class in polars.datatypes)": [[62, "polars.datatypes.Boolean", false]], "boolean() (in module polars.selectors)": [[948, "polars.selectors.boolean", false]], "bottom_k() (polars.dataframe method)": [[199, "polars.DataFrame.bottom_k", false]], "bottom_k() (polars.expr method)": [[407, "polars.Expr.bottom_k", false]], "bottom_k() (polars.lazyframe method)": [[844, "polars.LazyFrame.bottom_k", false]], "bottom_k() (polars.series method)": [[1010, "polars.Series.bottom_k", false]], "bottom_k_by() (polars.expr method)": [[408, "polars.Expr.bottom_k_by", false]], "build_info() (in module polars)": [[56, "polars.build_info", false]], "business_day_count() (in module polars)": [[754, "polars.business_day_count", false]], "by_dtype() (in module polars.selectors)": [[948, "polars.selectors.by_dtype", false]], "by_index() (in module polars.selectors)": [[948, "polars.selectors.by_index", false]], "by_name() (in module polars.selectors)": [[948, "polars.selectors.by_name", false]], "cache() (polars.lazyframe method)": [[845, "polars.LazyFrame.cache", false]], "cancel() (polars.lazyframe.in_process.inprocessquery method)": [[934, "polars.lazyframe.in_process.InProcessQuery.cancel", false]], "cast() (polars.dataframe method)": [[200, "polars.DataFrame.cast", false]], "cast() (polars.expr method)": [[409, "polars.Expr.cast", false]], "cast() (polars.lazyframe method)": [[846, "polars.LazyFrame.cast", false]], "cast() (polars.series method)": [[1011, "polars.Series.cast", false]], "cast_time_unit() (polars.expr.dt method)": [[437, "polars.Expr.dt.cast_time_unit", false]], "cast_time_unit() (polars.series.dt method)": [[1044, "polars.Series.dt.cast_time_unit", false]], "catalog (class in polars)": [[177, "polars.Catalog", false]], "cataloginfo (class in polars.catalog.unity)": [[183, "polars.catalog.unity.CatalogInfo", false]], "categorical (class in polars.datatypes)": [[63, "polars.datatypes.Categorical", false]], "categorical() (in module polars.selectors)": [[948, "polars.selectors.categorical", false]], "categoricalremappingwarning": [[93, "polars.exceptions.CategoricalRemappingWarning", false]], "cbrt() (polars.expr method)": [[415, "polars.Expr.cbrt", false]], "cbrt() (polars.series method)": [[1020, "polars.Series.cbrt", false]], "ceil() (polars.expr method)": [[416, "polars.Expr.ceil", false]], "ceil() (polars.series method)": [[1021, "polars.Series.ceil", false]], "century() (polars.expr.dt method)": [[438, "polars.Expr.dt.century", false]], "century() (polars.series.dt method)": [[1045, "polars.Series.dt.century", false]], "chronoformatwarning": [[94, "polars.exceptions.ChronoFormatWarning", false]], "chunk_lengths() (polars.series method)": [[1022, "polars.Series.chunk_lengths", false]], "clear() (polars.dataframe method)": [[201, "polars.DataFrame.clear", false]], "clear() (polars.lazyframe method)": [[847, "polars.LazyFrame.clear", false]], "clear() (polars.series method)": [[1023, "polars.Series.clear", false]], "clip() (polars.expr method)": [[417, "polars.Expr.clip", false]], "clip() (polars.series method)": [[1024, "polars.Series.clip", false]], "clone() (polars.dataframe method)": [[202, "polars.DataFrame.clone", false]], "clone() (polars.lazyframe method)": [[848, "polars.LazyFrame.clone", false]], "clone() (polars.series method)": [[1025, "polars.Series.clone", false]], "coalesce() (in module polars)": [[755, "polars.coalesce", false]], "collect() (polars.lazyframe method)": [[849, "polars.LazyFrame.collect", false]], "collect_all() (in module polars)": [[57, "polars.collect_all", false]], "collect_all_async() (in module polars)": [[58, "polars.collect_all_async", false]], "collect_async() (polars.lazyframe method)": [[850, "polars.LazyFrame.collect_async", false]], "collect_schema() (polars.dataframe method)": [[203, "polars.DataFrame.collect_schema", false]], "collect_schema() (polars.lazyframe method)": [[851, "polars.LazyFrame.collect_schema", false]], "column (class in polars.testing.parametric)": [[165, "polars.testing.parametric.column", false]], "columninfo (class in polars.catalog.unity)": [[184, "polars.catalog.unity.ColumnInfo", false]], "columnnotfounderror": [[95, "polars.exceptions.ColumnNotFoundError", false]], "columns (polars.dataframe property)": [[204, "polars.DataFrame.columns", false]], "columns (polars.lazyframe property)": [[852, "polars.LazyFrame.columns", false]], "columns() (in module polars.testing.parametric)": [[166, "polars.testing.parametric.columns", false]], "combine() (polars.expr.dt method)": [[439, "polars.Expr.dt.combine", false]], "combine() (polars.series.dt method)": [[1046, "polars.Series.dt.combine", false]], "computeerror": [[96, "polars.exceptions.ComputeError", false]], "concat() (in module polars)": [[59, "polars.concat", false]], "concat() (polars.expr.list method)": [[535, "polars.Expr.list.concat", false]], "concat() (polars.expr.str method)": [[674, "polars.Expr.str.concat", false]], "concat() (polars.series.list method)": [[1149, "polars.Series.list.concat", false]], "concat() (polars.series.str method)": [[1253, "polars.Series.str.concat", false]], "concat_arr() (in module polars)": [[756, "polars.concat_arr", false]], "concat_list() (in module polars)": [[757, "polars.concat_list", false]], "concat_str() (in module polars)": [[758, "polars.concat_str", false]], "contains() (in module polars.selectors)": [[948, "polars.selectors.contains", false]], "contains() (polars.expr.arr method)": [[370, "polars.Expr.arr.contains", false]], "contains() (polars.expr.bin method)": [[391, "polars.Expr.bin.contains", false]], "contains() (polars.expr.list method)": [[536, "polars.Expr.list.contains", false]], "contains() (polars.expr.str method)": [[675, "polars.Expr.str.contains", false]], "contains() (polars.series.arr method)": [[974, "polars.Series.arr.contains", false]], "contains() (polars.series.bin method)": [[994, "polars.Series.bin.contains", false]], "contains() (polars.series.list method)": [[1150, "polars.Series.list.contains", false]], "contains() (polars.series.str method)": [[1254, "polars.Series.str.contains", false]], "contains_any() (polars.expr.str method)": [[676, "polars.Expr.str.contains_any", false]], "contains_any() (polars.series.str method)": [[1255, "polars.Series.str.contains_any", false]], "convert_time_zone() (polars.expr.dt method)": [[440, "polars.Expr.dt.convert_time_zone", false]], "convert_time_zone() (polars.series.dt method)": [[1047, "polars.Series.dt.convert_time_zone", false]], "corr() (in module polars)": [[759, "polars.corr", false]], "corr() (polars.dataframe method)": [[205, "polars.DataFrame.corr", false]], "cos() (polars.expr method)": [[418, "polars.Expr.cos", false]], "cos() (polars.series method)": [[1026, "polars.Series.cos", false]], "cosh() (polars.expr method)": [[419, "polars.Expr.cosh", false]], "cosh() (polars.series method)": [[1027, "polars.Series.cosh", false]], "cot() (polars.expr method)": [[420, "polars.Expr.cot", false]], "cot() (polars.series method)": [[1028, "polars.Series.cot", false]], "count() (in module polars)": [[760, "polars.count", false]], "count() (polars.dataframe method)": [[206, "polars.DataFrame.count", false]], "count() (polars.dataframe.group_by.groupby method)": [[319, "polars.dataframe.group_by.GroupBy.count", false]], "count() (polars.expr method)": [[421, "polars.Expr.count", false]], "count() (polars.lazyframe method)": [[853, "polars.LazyFrame.count", false]], "count() (polars.lazyframe.group_by.lazygroupby method)": [[920, "polars.lazyframe.group_by.LazyGroupBy.count", false]], "count() (polars.series method)": [[1029, "polars.Series.count", false]], "count_matches() (polars.expr.arr method)": [[371, "polars.Expr.arr.count_matches", false]], "count_matches() (polars.expr.list method)": [[537, "polars.Expr.list.count_matches", false]], "count_matches() (polars.expr.str method)": [[677, "polars.Expr.str.count_matches", false]], "count_matches() (polars.series.arr method)": [[975, "polars.Series.arr.count_matches", false]], "count_matches() (polars.series.list method)": [[1151, "polars.Series.list.count_matches", false]], "count_matches() (polars.series.str method)": [[1256, "polars.Series.str.count_matches", false]], "cov() (in module polars)": [[761, "polars.cov", false]], "create_list_strategy() (in module polars.testing.parametric)": [[167, "polars.testing.parametric.create_list_strategy", false]], "credentialprovider (class in polars)": [[31, "polars.CredentialProvider", false]], "credentialprovideraws (class in polars)": [[32, "polars.CredentialProviderAWS", false]], "credentialproviderazure (class in polars)": [[33, "polars.CredentialProviderAzure", false]], "credentialprovidergcp (class in polars)": [[34, "polars.CredentialProviderGCP", false]], "cum_count() (in module polars)": [[762, "polars.cum_count", false]], "cum_count() (polars.expr method)": [[422, "polars.Expr.cum_count", false]], "cum_count() (polars.series method)": [[1030, "polars.Series.cum_count", false]], "cum_fold() (in module polars)": [[763, "polars.cum_fold", false]], "cum_max() (polars.expr method)": [[423, "polars.Expr.cum_max", false]], "cum_max() (polars.series method)": [[1031, "polars.Series.cum_max", false]], "cum_min() (polars.expr method)": [[424, "polars.Expr.cum_min", false]], "cum_min() (polars.series method)": [[1032, "polars.Series.cum_min", false]], "cum_prod() (polars.expr method)": [[425, "polars.Expr.cum_prod", false]], "cum_prod() (polars.series method)": [[1033, "polars.Series.cum_prod", false]], "cum_reduce() (in module polars)": [[764, "polars.cum_reduce", false]], "cum_sum() (in module polars)": [[765, "polars.cum_sum", false]], "cum_sum() (polars.expr method)": [[426, "polars.Expr.cum_sum", false]], "cum_sum() (polars.series method)": [[1034, "polars.Series.cum_sum", false]], "cum_sum_horizontal() (in module polars)": [[766, "polars.cum_sum_horizontal", false]], "cumulative_eval() (polars.expr method)": [[427, "polars.Expr.cumulative_eval", false]], "cumulative_eval() (polars.series method)": [[1035, "polars.Series.cumulative_eval", false]], "customufuncwarning": [[97, "polars.exceptions.CustomUFuncWarning", false]], "cut() (polars.expr method)": [[428, "polars.Expr.cut", false]], "cut() (polars.series method)": [[1036, "polars.Series.cut", false]], "dataframes() (in module polars.testing.parametric)": [[168, "polars.testing.parametric.dataframes", false]], "dataorientationwarning": [[98, "polars.exceptions.DataOrientationWarning", false]], "datasourceformat (in module polars.catalog.unity)": [[185, "polars.catalog.unity.DataSourceFormat", false]], "datatype (class in polars.datatypes)": [[64, "polars.datatypes.DataType", false]], "date (class in polars.datatypes)": [[65, "polars.datatypes.Date", false]], "date() (in module polars)": [[767, "polars.date", false]], "date() (in module polars.selectors)": [[948, "polars.selectors.date", false]], "date() (polars.expr.dt method)": [[441, "polars.Expr.dt.date", false]], "date() (polars.series.dt method)": [[1048, "polars.Series.dt.date", false]], "date_range() (in module polars)": [[768, "polars.date_range", false]], "date_ranges() (in module polars)": [[769, "polars.date_ranges", false]], "datetime (class in polars.datatypes)": [[66, "polars.datatypes.Datetime", false]], "datetime() (in module polars)": [[770, "polars.datetime", false]], "datetime() (in module polars.selectors)": [[948, "polars.selectors.datetime", false]], "datetime() (polars.expr.dt method)": [[442, "polars.Expr.dt.datetime", false]], "datetime() (polars.series.dt method)": [[1049, "polars.Series.dt.datetime", false]], "datetime_range() (in module polars)": [[771, "polars.datetime_range", false]], "datetime_ranges() (in module polars)": [[772, "polars.datetime_ranges", false]], "day() (polars.expr.dt method)": [[443, "polars.Expr.dt.day", false]], "day() (polars.series.dt method)": [[1050, "polars.Series.dt.day", false]], "decimal (class in polars.datatypes)": [[67, "polars.datatypes.Decimal", false]], "decimal() (in module polars.selectors)": [[948, "polars.selectors.decimal", false]], "decode() (polars.expr.bin method)": [[392, "polars.Expr.bin.decode", false]], "decode() (polars.expr.str method)": [[678, "polars.Expr.str.decode", false]], "decode() (polars.series.bin method)": [[995, "polars.Series.bin.decode", false]], "decode() (polars.series.str method)": [[1257, "polars.Series.str.decode", false]], "degrees() (polars.expr method)": [[429, "polars.Expr.degrees", false]], "describe() (polars.dataframe method)": [[207, "polars.DataFrame.describe", false]], "describe() (polars.lazyframe method)": [[854, "polars.LazyFrame.describe", false]], "describe() (polars.series method)": [[1037, "polars.Series.describe", false]], "deserialize() (polars.dataframe class method)": [[208, "polars.DataFrame.deserialize", false]], "deserialize() (polars.expr class method)": [[430, "polars.Expr.deserialize", false]], "deserialize() (polars.lazyframe class method)": [[855, "polars.LazyFrame.deserialize", false]], "diff() (polars.expr method)": [[431, "polars.Expr.diff", false]], "diff() (polars.expr.list method)": [[538, "polars.Expr.list.diff", false]], "diff() (polars.series method)": [[1038, "polars.Series.diff", false]], "diff() (polars.series.list method)": [[1152, "polars.Series.list.diff", false]], "digit() (in module polars.selectors)": [[948, "polars.selectors.digit", false]], "disable_string_cache() (in module polars)": [[90, "polars.disable_string_cache", false]], "dot() (polars.expr method)": [[432, "polars.Expr.dot", false]], "dot() (polars.series method)": [[1039, "polars.Series.dot", false]], "drop() (polars.dataframe method)": [[209, "polars.DataFrame.drop", false]], "drop() (polars.lazyframe method)": [[856, "polars.LazyFrame.drop", false]], "drop_in_place() (polars.dataframe method)": [[210, "polars.DataFrame.drop_in_place", false]], "drop_nans() (polars.dataframe method)": [[211, "polars.DataFrame.drop_nans", false]], "drop_nans() (polars.expr method)": [[433, "polars.Expr.drop_nans", false]], "drop_nans() (polars.lazyframe method)": [[857, "polars.LazyFrame.drop_nans", false]], "drop_nans() (polars.series method)": [[1040, "polars.Series.drop_nans", false]], "drop_nulls() (polars.dataframe method)": [[212, "polars.DataFrame.drop_nulls", false]], "drop_nulls() (polars.expr method)": [[434, "polars.Expr.drop_nulls", false]], "drop_nulls() (polars.expr.list method)": [[539, "polars.Expr.list.drop_nulls", false]], "drop_nulls() (polars.lazyframe method)": [[858, "polars.LazyFrame.drop_nulls", false]], "drop_nulls() (polars.series method)": [[1041, "polars.Series.drop_nulls", false]], "drop_nulls() (polars.series.list method)": [[1153, "polars.Series.list.drop_nulls", false]], "dst_offset() (polars.expr.dt method)": [[444, "polars.Expr.dt.dst_offset", false]], "dst_offset() (polars.series.dt method)": [[1051, "polars.Series.dt.dst_offset", false]], "dtype (polars.series property)": [[1091, "polars.Series.dtype", false]], "dtypes (polars.dataframe property)": [[213, "polars.DataFrame.dtypes", false]], "dtypes (polars.lazyframe property)": [[859, "polars.LazyFrame.dtypes", false]], "dtypes() (in module polars.testing.parametric)": [[169, "polars.testing.parametric.dtypes", false]], "duplicateerror": [[99, "polars.exceptions.DuplicateError", false]], "duration (class in polars.datatypes)": [[68, "polars.datatypes.Duration", false]], "duration() (in module polars)": [[773, "polars.duration", false]], "duration() (in module polars.selectors)": [[948, "polars.selectors.duration", false]], "element() (in module polars)": [[774, "polars.element", false]], "enable_string_cache() (in module polars)": [[91, "polars.enable_string_cache", false]], "encode() (polars.expr.bin method)": [[393, "polars.Expr.bin.encode", false]], "encode() (polars.expr.str method)": [[679, "polars.Expr.str.encode", false]], "encode() (polars.series.bin method)": [[996, "polars.Series.bin.encode", false]], "encode() (polars.series.str method)": [[1258, "polars.Series.str.encode", false]], "ends_with() (in module polars.selectors)": [[948, "polars.selectors.ends_with", false]], "ends_with() (polars.expr.bin method)": [[394, "polars.Expr.bin.ends_with", false]], "ends_with() (polars.expr.cat method)": [[410, "polars.Expr.cat.ends_with", false]], "ends_with() (polars.expr.str method)": [[680, "polars.Expr.str.ends_with", false]], "ends_with() (polars.series.bin method)": [[997, "polars.Series.bin.ends_with", false]], "ends_with() (polars.series.cat method)": [[1012, "polars.Series.cat.ends_with", false]], "ends_with() (polars.series.str method)": [[1259, "polars.Series.str.ends_with", false]], "entropy() (polars.expr method)": [[480, "polars.Expr.entropy", false]], "entropy() (polars.series method)": [[1092, "polars.Series.entropy", false]], "enum (class in polars.datatypes)": [[69, "polars.datatypes.Enum", false]], "epoch() (polars.expr.dt method)": [[445, "polars.Expr.dt.epoch", false]], "epoch() (polars.series.dt method)": [[1052, "polars.Series.dt.epoch", false]], "eq() (polars.expr method)": [[481, "polars.Expr.eq", false]], "eq() (polars.expr.meta method)": [[581, "polars.Expr.meta.eq", false]], "eq() (polars.series method)": [[1093, "polars.Series.eq", false]], "eq_missing() (polars.expr method)": [[482, "polars.Expr.eq_missing", false]], "eq_missing() (polars.series method)": [[1094, "polars.Series.eq_missing", false]], "equals() (polars.dataframe method)": [[214, "polars.DataFrame.equals", false]], "equals() (polars.series method)": [[1095, "polars.Series.equals", false]], "escape_regex() (in module polars)": [[92, "polars.escape_regex", false]], "escape_regex() (polars.expr.str method)": [[681, "polars.Expr.str.escape_regex", false]], "escape_regex() (polars.series.str method)": [[1260, "polars.Series.str.escape_regex", false]], "estimated_size() (polars.dataframe method)": [[215, "polars.DataFrame.estimated_size", false]], "estimated_size() (polars.series method)": [[1096, "polars.Series.estimated_size", false]], "eval() (polars.expr.list method)": [[540, "polars.Expr.list.eval", false]], "eval() (polars.series.list method)": [[1154, "polars.Series.list.eval", false]], "ewm_mean() (polars.expr method)": [[483, "polars.Expr.ewm_mean", false]], "ewm_mean() (polars.series method)": [[1097, "polars.Series.ewm_mean", false]], "ewm_mean_by() (polars.expr method)": [[484, "polars.Expr.ewm_mean_by", false]], "ewm_mean_by() (polars.series method)": [[1098, "polars.Series.ewm_mean_by", false]], "ewm_std() (polars.expr method)": [[485, "polars.Expr.ewm_std", false]], "ewm_std() (polars.series method)": [[1099, "polars.Series.ewm_std", false]], "ewm_var() (polars.expr method)": [[486, "polars.Expr.ewm_var", false]], "ewm_var() (polars.series method)": [[1100, "polars.Series.ewm_var", false]], "exclude() (in module polars)": [[775, "polars.exclude", false]], "exclude() (in module polars.selectors)": [[948, "polars.selectors.exclude", false]], "exclude() (polars.expr method)": [[487, "polars.Expr.exclude", false]], "execute() (polars.sqlcontext method)": [[1346, "polars.SQLContext.execute", false]], "execute_global() (polars.sqlcontext class method)": [[1347, "polars.SQLContext.execute_global", false]], "exp() (polars.expr method)": [[488, "polars.Expr.exp", false]], "exp() (polars.series method)": [[1101, "polars.Series.exp", false]], "expand_selector() (in module polars.selectors)": [[948, "polars.selectors.expand_selector", false]], "explain() (polars.lazyframe method)": [[860, "polars.LazyFrame.explain", false]], "explode() (polars.dataframe method)": [[216, "polars.DataFrame.explode", false]], "explode() (polars.expr method)": [[489, "polars.Expr.explode", false]], "explode() (polars.expr.arr method)": [[372, "polars.Expr.arr.explode", false]], "explode() (polars.expr.list method)": [[541, "polars.Expr.list.explode", false]], "explode() (polars.expr.str method)": [[682, "polars.Expr.str.explode", false]], "explode() (polars.lazyframe method)": [[861, "polars.LazyFrame.explode", false]], "explode() (polars.series method)": [[1102, "polars.Series.explode", false]], "explode() (polars.series.arr method)": [[976, "polars.Series.arr.explode", false]], "explode() (polars.series.list method)": [[1155, "polars.Series.list.explode", false]], "explode() (polars.series.str method)": [[1261, "polars.Series.str.explode", false]], "extend() (polars.dataframe method)": [[217, "polars.DataFrame.extend", false]], "extend() (polars.series method)": [[1103, "polars.Series.extend", false]], "extend_constant() (polars.expr method)": [[490, "polars.Expr.extend_constant", false]], "extend_constant() (polars.series method)": [[1104, "polars.Series.extend_constant", false]], "extract() (polars.expr.str method)": [[683, "polars.Expr.str.extract", false]], "extract() (polars.series.str method)": [[1262, "polars.Series.str.extract", false]], "extract_all() (polars.expr.str method)": [[684, "polars.Expr.str.extract_all", false]], "extract_all() (polars.series.str method)": [[1263, "polars.Series.str.extract_all", false]], "extract_groups() (polars.expr.str method)": [[685, "polars.Expr.str.extract_groups", false]], "extract_groups() (polars.series.str method)": [[1264, "polars.Series.str.extract_groups", false]], "extract_many() (polars.expr.str method)": [[686, "polars.Expr.str.extract_many", false]], "extract_many() (polars.series.str method)": [[1265, "polars.Series.str.extract_many", false]], "fetch() (polars.lazyframe.in_process.inprocessquery method)": [[935, "polars.lazyframe.in_process.InProcessQuery.fetch", false]], "fetch_blocking() (polars.lazyframe.in_process.inprocessquery method)": [[936, "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", false]], "field (class in polars.datatypes)": [[70, "polars.datatypes.Field", false]], "field() (polars.expr.struct method)": [[723, "polars.Expr.struct.field", false]], "field() (polars.series.struct method)": [[1302, "polars.Series.struct.field", false]], "fields (polars.series.struct attribute)": [[1303, "polars.Series.struct.fields", false]], "fill_nan() (polars.dataframe method)": [[218, "polars.DataFrame.fill_nan", false]], "fill_nan() (polars.expr method)": [[491, "polars.Expr.fill_nan", false]], "fill_nan() (polars.lazyframe method)": [[862, "polars.LazyFrame.fill_nan", false]], "fill_nan() (polars.series method)": [[1105, "polars.Series.fill_nan", false]], "fill_null() (polars.dataframe method)": [[219, "polars.DataFrame.fill_null", false]], "fill_null() (polars.expr method)": [[492, "polars.Expr.fill_null", false]], "fill_null() (polars.lazyframe method)": [[863, "polars.LazyFrame.fill_null", false]], "fill_null() (polars.series method)": [[1106, "polars.Series.fill_null", false]], "filter() (polars.dataframe method)": [[220, "polars.DataFrame.filter", false]], "filter() (polars.expr method)": [[493, "polars.Expr.filter", false]], "filter() (polars.lazyframe method)": [[864, "polars.LazyFrame.filter", false]], "filter() (polars.series method)": [[1107, "polars.Series.filter", false]], "find() (polars.expr.str method)": [[687, "polars.Expr.str.find", false]], "find() (polars.series.str method)": [[1266, "polars.Series.str.find", false]], "find_many() (polars.expr.str method)": [[688, "polars.Expr.str.find_many", false]], "find_many() (polars.series.str method)": [[1267, "polars.Series.str.find_many", false]], "first() (in module polars)": [[776, "polars.first", false]], "first() (in module polars.selectors)": [[948, "polars.selectors.first", false]], "first() (polars.dataframe.group_by.groupby method)": [[320, "polars.dataframe.group_by.GroupBy.first", false]], "first() (polars.expr method)": [[494, "polars.Expr.first", false]], "first() (polars.expr.arr method)": [[373, "polars.Expr.arr.first", false]], "first() (polars.expr.list method)": [[542, "polars.Expr.list.first", false]], "first() (polars.lazyframe method)": [[865, "polars.LazyFrame.first", false]], "first() (polars.lazyframe.group_by.lazygroupby method)": [[921, "polars.lazyframe.group_by.LazyGroupBy.first", false]], "first() (polars.series method)": [[1108, "polars.Series.first", false]], "first() (polars.series.arr method)": [[977, "polars.Series.arr.first", false]], "first() (polars.series.list method)": [[1156, "polars.Series.list.first", false]], "flags (polars.dataframe property)": [[221, "polars.DataFrame.flags", false]], "flags (polars.series property)": [[1109, "polars.Series.flags", false]], "flatten() (polars.expr method)": [[495, "polars.Expr.flatten", false]], "float() (in module polars.selectors)": [[948, "polars.selectors.float", false]], "float32 (class in polars.datatypes)": [[71, "polars.datatypes.Float32", false]], "float64 (class in polars.datatypes)": [[72, "polars.datatypes.Float64", false]], "floor() (polars.expr method)": [[496, "polars.Expr.floor", false]], "floor() (polars.series method)": [[1110, "polars.Series.floor", false]], "floordiv() (polars.expr method)": [[497, "polars.Expr.floordiv", false]], "fold() (in module polars)": [[777, "polars.fold", false]], "fold() (polars.dataframe method)": [[222, "polars.DataFrame.fold", false]], "format() (in module polars)": [[778, "polars.format", false]], "forward_fill() (polars.expr method)": [[498, "polars.Expr.forward_fill", false]], "from_arrow() (in module polars)": [[123, "polars.from_arrow", false]], "from_dataframe() (in module polars)": [[124, "polars.from_dataframe", false]], "from_dict() (in module polars)": [[125, "polars.from_dict", false]], "from_dicts() (in module polars)": [[126, "polars.from_dicts", false]], "from_epoch() (in module polars)": [[779, "polars.from_epoch", false]], "from_json() (polars.expr class method)": [[499, "polars.Expr.from_json", false]], "from_numpy() (in module polars)": [[127, "polars.from_numpy", false]], "from_pandas() (in module polars)": [[128, "polars.from_pandas", false]], "from_records() (in module polars)": [[129, "polars.from_records", false]], "from_repr() (in module polars)": [[130, "polars.from_repr", false]], "gather() (polars.expr method)": [[500, "polars.Expr.gather", false]], "gather() (polars.expr.list method)": [[543, "polars.Expr.list.gather", false]], "gather() (polars.series method)": [[1111, "polars.Series.gather", false]], "gather() (polars.series.list method)": [[1157, "polars.Series.list.gather", false]], "gather_every() (polars.dataframe method)": [[223, "polars.DataFrame.gather_every", false]], "gather_every() (polars.expr method)": [[501, "polars.Expr.gather_every", false]], "gather_every() (polars.expr.list method)": [[544, "polars.Expr.list.gather_every", false]], "gather_every() (polars.lazyframe method)": [[866, "polars.LazyFrame.gather_every", false]], "gather_every() (polars.series method)": [[1112, "polars.Series.gather_every", false]], "gather_every() (polars.series.list method)": [[1158, "polars.Series.list.gather_every", false]], "ge() (polars.expr method)": [[502, "polars.Expr.ge", false]], "ge() (polars.series method)": [[1113, "polars.Series.ge", false]], "get() (polars.expr method)": [[503, "polars.Expr.get", false]], "get() (polars.expr.arr method)": [[374, "polars.Expr.arr.get", false]], "get() (polars.expr.list method)": [[545, "polars.Expr.list.get", false]], "get() (polars.series.arr method)": [[978, "polars.Series.arr.get", false]], "get() (polars.series.list method)": [[1159, "polars.Series.list.get", false]], "get_categories() (polars.expr.cat method)": [[411, "polars.Expr.cat.get_categories", false]], "get_categories() (polars.series.cat method)": [[1013, "polars.Series.cat.get_categories", false]], "get_chunks() (polars.series method)": [[1114, "polars.Series.get_chunks", false]], "get_column() (polars.dataframe method)": [[224, "polars.DataFrame.get_column", false]], "get_column_index() (polars.dataframe method)": [[225, "polars.DataFrame.get_column_index", false]], "get_columns() (polars.dataframe method)": [[226, "polars.DataFrame.get_columns", false]], "get_index_type() (in module polars)": [[131, "polars.get_index_type", false]], "get_polars_schema() (polars.catalog.unity.tableinfo method)": [[188, "polars.catalog.unity.TableInfo.get_polars_schema", false]], "get_table_info() (polars.catalog method)": [[178, "polars.Catalog.get_table_info", false]], "glimpse() (polars.dataframe method)": [[227, "polars.DataFrame.glimpse", false]], "gpuengine (class in polars.lazyframe.engine_config)": [[917, "polars.lazyframe.engine_config.GPUEngine", false]], "group_by() (polars.dataframe method)": [[228, "polars.DataFrame.group_by", false]], "group_by() (polars.lazyframe method)": [[867, "polars.LazyFrame.group_by", false]], "group_by_dynamic() (polars.dataframe method)": [[229, "polars.DataFrame.group_by_dynamic", false]], "group_by_dynamic() (polars.lazyframe method)": [[868, "polars.LazyFrame.group_by_dynamic", false]], "groups() (in module polars)": [[780, "polars.groups", false]], "gt() (polars.expr method)": [[504, "polars.Expr.gt", false]], "gt() (polars.series method)": [[1115, "polars.Series.gt", false]], "has_multiple_outputs() (polars.expr.meta method)": [[582, "polars.Expr.meta.has_multiple_outputs", false]], "has_nulls() (polars.expr method)": [[505, "polars.Expr.has_nulls", false]], "has_nulls() (polars.series method)": [[1116, "polars.Series.has_nulls", false]], "has_validity() (polars.series method)": [[1117, "polars.Series.has_validity", false]], "hash() (polars.expr method)": [[506, "polars.Expr.hash", false]], "hash() (polars.series method)": [[1118, "polars.Series.hash", false]], "hash_rows() (polars.dataframe method)": [[230, "polars.DataFrame.hash_rows", false]], "head() (in module polars)": [[781, "polars.head", false]], "head() (polars.dataframe method)": [[231, "polars.DataFrame.head", false]], "head() (polars.dataframe.group_by.groupby method)": [[321, "polars.dataframe.group_by.GroupBy.head", false]], "head() (polars.expr method)": [[507, "polars.Expr.head", false]], "head() (polars.expr.list method)": [[546, "polars.Expr.list.head", false]], "head() (polars.expr.str method)": [[689, "polars.Expr.str.head", false]], "head() (polars.lazyframe method)": [[869, "polars.LazyFrame.head", false]], "head() (polars.lazyframe.group_by.lazygroupby method)": [[922, "polars.lazyframe.group_by.LazyGroupBy.head", false]], "head() (polars.series method)": [[1119, "polars.Series.head", false]], "head() (polars.series.list method)": [[1160, "polars.Series.list.head", false]], "head() (polars.series.str method)": [[1268, "polars.Series.str.head", false]], "height (polars.dataframe property)": [[232, "polars.DataFrame.height", false]], "hist() (polars.expr method)": [[508, "polars.Expr.hist", false]], "hist() (polars.series method)": [[1120, "polars.Series.hist", false]], "hour() (polars.expr.dt method)": [[446, "polars.Expr.dt.hour", false]], "hour() (polars.series.dt method)": [[1053, "polars.Series.dt.hour", false]], "hstack() (polars.dataframe method)": [[233, "polars.DataFrame.hstack", false]], "implode() (in module polars)": [[782, "polars.implode", false]], "implode() (polars.expr method)": [[509, "polars.Expr.implode", false]], "implode() (polars.series method)": [[1121, "polars.Series.implode", false]], "index_of() (polars.expr method)": [[510, "polars.Expr.index_of", false]], "index_of() (polars.series method)": [[1122, "polars.Series.index_of", false]], "insert_column() (polars.dataframe method)": [[234, "polars.DataFrame.insert_column", false]], "inspect() (polars.expr method)": [[511, "polars.Expr.inspect", false]], "inspect() (polars.lazyframe method)": [[870, "polars.LazyFrame.inspect", false]], "int128 (class in polars.datatypes)": [[73, "polars.datatypes.Int128", false]], "int16 (class in polars.datatypes)": [[74, "polars.datatypes.Int16", false]], "int32 (class in polars.datatypes)": [[75, "polars.datatypes.Int32", false]], "int64 (class in polars.datatypes)": [[76, "polars.datatypes.Int64", false]], "int8 (class in polars.datatypes)": [[77, "polars.datatypes.Int8", false]], "int_range() (in module polars)": [[783, "polars.int_range", false]], "int_ranges() (in module polars)": [[784, "polars.int_ranges", false]], "integer() (in module polars.selectors)": [[948, "polars.selectors.integer", false]], "interpolate() (polars.dataframe method)": [[235, "polars.DataFrame.interpolate", false]], "interpolate() (polars.expr method)": [[512, "polars.Expr.interpolate", false]], "interpolate() (polars.lazyframe method)": [[871, "polars.LazyFrame.interpolate", false]], "interpolate() (polars.series method)": [[1123, "polars.Series.interpolate", false]], "interpolate_by() (polars.expr method)": [[513, "polars.Expr.interpolate_by", false]], "interpolate_by() (polars.series method)": [[1124, "polars.Series.interpolate_by", false]], "invalidoperationerror": [[100, "polars.exceptions.InvalidOperationError", false]], "is_between() (polars.expr method)": [[514, "polars.Expr.is_between", false]], "is_between() (polars.series method)": [[1125, "polars.Series.is_between", false]], "is_column() (polars.expr.meta method)": [[583, "polars.Expr.meta.is_column", false]], "is_column_selection() (polars.expr.meta method)": [[584, "polars.Expr.meta.is_column_selection", false]], "is_duplicated() (polars.dataframe method)": [[236, "polars.DataFrame.is_duplicated", false]], "is_duplicated() (polars.expr method)": [[515, "polars.Expr.is_duplicated", false]], "is_duplicated() (polars.series method)": [[1126, "polars.Series.is_duplicated", false]], "is_empty() (polars.dataframe method)": [[237, "polars.DataFrame.is_empty", false]], "is_empty() (polars.series method)": [[1127, "polars.Series.is_empty", false]], "is_finite() (polars.expr method)": [[516, "polars.Expr.is_finite", false]], "is_finite() (polars.series method)": [[1128, "polars.Series.is_finite", false]], "is_first_distinct() (polars.expr method)": [[517, "polars.Expr.is_first_distinct", false]], "is_first_distinct() (polars.series method)": [[1129, "polars.Series.is_first_distinct", false]], "is_in() (polars.expr method)": [[518, "polars.Expr.is_in", false]], "is_in() (polars.series method)": [[1130, "polars.Series.is_in", false]], "is_infinite() (polars.expr method)": [[519, "polars.Expr.is_infinite", false]], "is_infinite() (polars.series method)": [[1131, "polars.Series.is_infinite", false]], "is_last_distinct() (polars.expr method)": [[520, "polars.Expr.is_last_distinct", false]], "is_last_distinct() (polars.series method)": [[1132, "polars.Series.is_last_distinct", false]], "is_leap_year() (polars.expr.dt method)": [[447, "polars.Expr.dt.is_leap_year", false]], "is_leap_year() (polars.series.dt method)": [[1054, "polars.Series.dt.is_leap_year", false]], "is_literal() (polars.expr.meta method)": [[585, "polars.Expr.meta.is_literal", false]], "is_local() (polars.series.cat method)": [[1014, "polars.Series.cat.is_local", false]], "is_nan() (polars.expr method)": [[521, "polars.Expr.is_nan", false]], "is_nan() (polars.series method)": [[1133, "polars.Series.is_nan", false]], "is_not_nan() (polars.expr method)": [[522, "polars.Expr.is_not_nan", false]], "is_not_nan() (polars.series method)": [[1134, "polars.Series.is_not_nan", false]], "is_not_null() (polars.expr method)": [[523, "polars.Expr.is_not_null", false]], "is_not_null() (polars.series method)": [[1135, "polars.Series.is_not_null", false]], "is_null() (polars.expr method)": [[524, "polars.Expr.is_null", false]], "is_null() (polars.series method)": [[1136, "polars.Series.is_null", false]], "is_regex_projection() (polars.expr.meta method)": [[586, "polars.Expr.meta.is_regex_projection", false]], "is_selector() (in module polars.selectors)": [[948, "polars.selectors.is_selector", false]], "is_sorted() (polars.series method)": [[1137, "polars.Series.is_sorted", false]], "is_unique() (polars.dataframe method)": [[238, "polars.DataFrame.is_unique", false]], "is_unique() (polars.expr method)": [[525, "polars.Expr.is_unique", false]], "is_unique() (polars.series method)": [[1138, "polars.Series.is_unique", false]], "iso_year() (polars.expr.dt method)": [[448, "polars.Expr.dt.iso_year", false]], "iso_year() (polars.series.dt method)": [[1055, "polars.Series.dt.iso_year", false]], "item() (polars.dataframe method)": [[239, "polars.DataFrame.item", false]], "item() (polars.series method)": [[1139, "polars.Series.item", false]], "iter_columns() (polars.dataframe method)": [[240, "polars.DataFrame.iter_columns", false]], "iter_rows() (polars.dataframe method)": [[241, "polars.DataFrame.iter_rows", false]], "iter_slices() (polars.dataframe method)": [[242, "polars.DataFrame.iter_slices", false]], "join() (polars.dataframe method)": [[243, "polars.DataFrame.join", false]], "join() (polars.expr.arr method)": [[375, "polars.Expr.arr.join", false]], "join() (polars.expr.list method)": [[547, "polars.Expr.list.join", false]], "join() (polars.expr.str method)": [[690, "polars.Expr.str.join", false]], "join() (polars.lazyframe method)": [[872, "polars.LazyFrame.join", false]], "join() (polars.series.arr method)": [[979, "polars.Series.arr.join", false]], "join() (polars.series.list method)": [[1161, "polars.Series.list.join", false]], "join() (polars.series.str method)": [[1269, "polars.Series.str.join", false]], "join_asof() (polars.dataframe method)": [[244, "polars.DataFrame.join_asof", false]], "join_asof() (polars.lazyframe method)": [[873, "polars.LazyFrame.join_asof", false]], "join_where() (polars.dataframe method)": [[245, "polars.DataFrame.join_where", false]], "join_where() (polars.lazyframe method)": [[874, "polars.LazyFrame.join_where", false]], "json_decode() (polars.expr.str method)": [[691, "polars.Expr.str.json_decode", false]], "json_decode() (polars.series.str method)": [[1270, "polars.Series.str.json_decode", false]], "json_encode() (polars.expr.struct method)": [[724, "polars.Expr.struct.json_encode", false]], "json_encode() (polars.series.struct method)": [[1304, "polars.Series.struct.json_encode", false]], "json_normalize() (in module polars)": [[134, "polars.json_normalize", false]], "json_path_match() (polars.expr.str method)": [[692, "polars.Expr.str.json_path_match", false]], "json_path_match() (polars.series.str method)": [[1271, "polars.Series.str.json_path_match", false]], "keep() (polars.expr.name method)": [[601, "polars.Expr.name.keep", false]], "kurtosis() (polars.expr method)": [[526, "polars.Expr.kurtosis", false]], "kurtosis() (polars.series method)": [[1140, "polars.Series.kurtosis", false]], "last() (in module polars)": [[785, "polars.last", false]], "last() (in module polars.selectors)": [[948, "polars.selectors.last", false]], "last() (polars.dataframe.group_by.groupby method)": [[322, "polars.dataframe.group_by.GroupBy.last", false]], "last() (polars.expr method)": [[527, "polars.Expr.last", false]], "last() (polars.expr.arr method)": [[376, "polars.Expr.arr.last", false]], "last() (polars.expr.list method)": [[548, "polars.Expr.list.last", false]], "last() (polars.lazyframe method)": [[875, "polars.LazyFrame.last", false]], "last() (polars.lazyframe.group_by.lazygroupby method)": [[923, "polars.lazyframe.group_by.LazyGroupBy.last", false]], "last() (polars.series method)": [[1141, "polars.Series.last", false]], "last() (polars.series.arr method)": [[980, "polars.Series.arr.last", false]], "last() (polars.series.list method)": [[1162, "polars.Series.list.last", false]], "lazy() (polars.dataframe method)": [[246, "polars.DataFrame.lazy", false]], "lazy() (polars.lazyframe method)": [[876, "polars.LazyFrame.lazy", false]], "le() (polars.expr method)": [[528, "polars.Expr.le", false]], "le() (polars.series method)": [[1142, "polars.Series.le", false]], "len() (in module polars)": [[786, "polars.len", false]], "len() (polars.dataframe.group_by.groupby method)": [[323, "polars.dataframe.group_by.GroupBy.len", false]], "len() (polars.expr method)": [[529, "polars.Expr.len", false]], "len() (polars.expr.list method)": [[549, "polars.Expr.list.len", false]], "len() (polars.lazyframe.group_by.lazygroupby method)": [[924, "polars.lazyframe.group_by.LazyGroupBy.len", false]], "len() (polars.series method)": [[1143, "polars.Series.len", false]], "len() (polars.series.list method)": [[1163, "polars.Series.list.len", false]], "len_bytes() (polars.expr.cat method)": [[412, "polars.Expr.cat.len_bytes", false]], "len_bytes() (polars.expr.str method)": [[693, "polars.Expr.str.len_bytes", false]], "len_bytes() (polars.series.cat method)": [[1015, "polars.Series.cat.len_bytes", false]], "len_bytes() (polars.series.str method)": [[1272, "polars.Series.str.len_bytes", false]], "len_chars() (polars.expr.cat method)": [[413, "polars.Expr.cat.len_chars", false]], "len_chars() (polars.expr.str method)": [[694, "polars.Expr.str.len_chars", false]], "len_chars() (polars.series.cat method)": [[1016, "polars.Series.cat.len_chars", false]], "len_chars() (polars.series.str method)": [[1273, "polars.Series.str.len_chars", false]], "limit() (polars.dataframe method)": [[247, "polars.DataFrame.limit", false]], "limit() (polars.expr method)": [[530, "polars.Expr.limit", false]], "limit() (polars.lazyframe method)": [[877, "polars.LazyFrame.limit", false]], "limit() (polars.series method)": [[1144, "polars.Series.limit", false]], "linear_space() (in module polars)": [[787, "polars.linear_space", false]], "list (class in polars.datatypes)": [[78, "polars.datatypes.List", false]], "list_catalogs() (polars.catalog method)": [[179, "polars.Catalog.list_catalogs", false]], "list_namespaces() (polars.catalog method)": [[180, "polars.Catalog.list_namespaces", false]], "list_tables() (polars.catalog method)": [[181, "polars.Catalog.list_tables", false]], "lists() (in module polars.testing.parametric)": [[170, "polars.testing.parametric.lists", false]], "lit() (in module polars)": [[788, "polars.lit", false]], "load() (polars.config class method)": [[2, "polars.Config.load", false]], "load_from_file() (polars.config class method)": [[3, "polars.Config.load_from_file", false]], "load_profile() (in module polars.testing.parametric)": [[171, "polars.testing.parametric.load_profile", false]], "log() (polars.expr method)": [[571, "polars.Expr.log", false]], "log() (polars.series method)": [[1185, "polars.Series.log", false]], "log10() (polars.expr method)": [[572, "polars.Expr.log10", false]], "log10() (polars.series method)": [[1186, "polars.Series.log10", false]], "log1p() (polars.expr method)": [[573, "polars.Expr.log1p", false]], "log1p() (polars.series method)": [[1187, "polars.Series.log1p", false]], "lower_bound() (polars.expr method)": [[574, "polars.Expr.lower_bound", false]], "lower_bound() (polars.series method)": [[1188, "polars.Series.lower_bound", false]], "lt() (polars.expr method)": [[575, "polars.Expr.lt", false]], "lt() (polars.series method)": [[1189, "polars.Series.lt", false]], "map() (polars.expr.name method)": [[602, "polars.Expr.name.map", false]], "map_batches() (in module polars)": [[789, "polars.map_batches", false]], "map_batches() (polars.expr method)": [[576, "polars.Expr.map_batches", false]], "map_batches() (polars.lazyframe method)": [[878, "polars.LazyFrame.map_batches", false]], "map_elements() (polars.expr method)": [[577, "polars.Expr.map_elements", false]], "map_elements() (polars.series method)": [[1190, "polars.Series.map_elements", false]], "map_fields() (polars.expr.name method)": [[603, "polars.Expr.name.map_fields", false]], "map_groups() (in module polars)": [[790, "polars.map_groups", false]], "map_groups() (polars.dataframe.group_by.groupby method)": [[324, "polars.dataframe.group_by.GroupBy.map_groups", false]], "map_groups() (polars.lazyframe.group_by.lazygroupby method)": [[925, "polars.lazyframe.group_by.LazyGroupBy.map_groups", false]], "map_rows() (polars.dataframe method)": [[248, "polars.DataFrame.map_rows", false]], "mapwithoutreturndtypewarning": [[101, "polars.exceptions.MapWithoutReturnDtypeWarning", false]], "matches() (in module polars.selectors)": [[948, "polars.selectors.matches", false]], "max() (in module polars)": [[791, "polars.max", false]], "max() (polars.dataframe method)": [[249, "polars.DataFrame.max", false]], "max() (polars.dataframe.group_by.groupby method)": [[325, "polars.dataframe.group_by.GroupBy.max", false]], "max() (polars.expr method)": [[578, "polars.Expr.max", false]], "max() (polars.expr.arr method)": [[377, "polars.Expr.arr.max", false]], "max() (polars.expr.list method)": [[550, "polars.Expr.list.max", false]], "max() (polars.lazyframe method)": [[879, "polars.LazyFrame.max", false]], "max() (polars.lazyframe.group_by.lazygroupby method)": [[926, "polars.lazyframe.group_by.LazyGroupBy.max", false]], "max() (polars.series method)": [[1191, "polars.Series.max", false]], "max() (polars.series.arr method)": [[981, "polars.Series.arr.max", false]], "max() (polars.series.dt method)": [[1056, "polars.Series.dt.max", false]], "max() (polars.series.list method)": [[1164, "polars.Series.list.max", false]], "max_horizontal() (in module polars)": [[792, "polars.max_horizontal", false]], "max_horizontal() (polars.dataframe method)": [[250, "polars.DataFrame.max_horizontal", false]], "mean() (in module polars)": [[793, "polars.mean", false]], "mean() (polars.dataframe method)": [[251, "polars.DataFrame.mean", false]], "mean() (polars.dataframe.group_by.groupby method)": [[326, "polars.dataframe.group_by.GroupBy.mean", false]], "mean() (polars.expr method)": [[579, "polars.Expr.mean", false]], "mean() (polars.expr.list method)": [[551, "polars.Expr.list.mean", false]], "mean() (polars.lazyframe method)": [[880, "polars.LazyFrame.mean", false]], "mean() (polars.lazyframe.group_by.lazygroupby method)": [[927, "polars.lazyframe.group_by.LazyGroupBy.mean", false]], "mean() (polars.series method)": [[1192, "polars.Series.mean", false]], "mean() (polars.series.dt method)": [[1057, "polars.Series.dt.mean", false]], "mean() (polars.series.list method)": [[1165, "polars.Series.list.mean", false]], "mean_horizontal() (in module polars)": [[794, "polars.mean_horizontal", false]], "mean_horizontal() (polars.dataframe method)": [[252, "polars.DataFrame.mean_horizontal", false]], "median() (in module polars)": [[795, "polars.median", false]], "median() (polars.dataframe method)": [[253, "polars.DataFrame.median", false]], "median() (polars.dataframe.group_by.groupby method)": [[327, "polars.dataframe.group_by.GroupBy.median", false]], "median() (polars.expr method)": [[580, "polars.Expr.median", false]], "median() (polars.expr.arr method)": [[378, "polars.Expr.arr.median", false]], "median() (polars.expr.list method)": [[552, "polars.Expr.list.median", false]], "median() (polars.lazyframe method)": [[881, "polars.LazyFrame.median", false]], "median() (polars.lazyframe.group_by.lazygroupby method)": [[928, "polars.lazyframe.group_by.LazyGroupBy.median", false]], "median() (polars.series method)": [[1193, "polars.Series.median", false]], "median() (polars.series.arr method)": [[982, "polars.Series.arr.median", false]], "median() (polars.series.dt method)": [[1058, "polars.Series.dt.median", false]], "median() (polars.series.list method)": [[1166, "polars.Series.list.median", false]], "melt() (polars.dataframe method)": [[254, "polars.DataFrame.melt", false]], "melt() (polars.lazyframe method)": [[882, "polars.LazyFrame.melt", false]], "merge_sorted() (polars.dataframe method)": [[255, "polars.DataFrame.merge_sorted", false]], "merge_sorted() (polars.lazyframe method)": [[883, "polars.LazyFrame.merge_sorted", false]], "microsecond() (polars.expr.dt method)": [[449, "polars.Expr.dt.microsecond", false]], "microsecond() (polars.series.dt method)": [[1059, "polars.Series.dt.microsecond", false]], "millennium() (polars.expr.dt method)": [[450, "polars.Expr.dt.millennium", false]], "millennium() (polars.series.dt method)": [[1060, "polars.Series.dt.millennium", false]], "millisecond() (polars.expr.dt method)": [[451, "polars.Expr.dt.millisecond", false]], "millisecond() (polars.series.dt method)": [[1061, "polars.Series.dt.millisecond", false]], "min() (in module polars)": [[796, "polars.min", false]], "min() (polars.dataframe method)": [[256, "polars.DataFrame.min", false]], "min() (polars.dataframe.group_by.groupby method)": [[328, "polars.dataframe.group_by.GroupBy.min", false]], "min() (polars.expr method)": [[596, "polars.Expr.min", false]], "min() (polars.expr.arr method)": [[379, "polars.Expr.arr.min", false]], "min() (polars.expr.list method)": [[553, "polars.Expr.list.min", false]], "min() (polars.lazyframe method)": [[884, "polars.LazyFrame.min", false]], "min() (polars.lazyframe.group_by.lazygroupby method)": [[929, "polars.lazyframe.group_by.LazyGroupBy.min", false]], "min() (polars.series method)": [[1194, "polars.Series.min", false]], "min() (polars.series.arr method)": [[983, "polars.Series.arr.min", false]], "min() (polars.series.dt method)": [[1062, "polars.Series.dt.min", false]], "min() (polars.series.list method)": [[1167, "polars.Series.list.min", false]], "min_horizontal() (in module polars)": [[797, "polars.min_horizontal", false]], "min_horizontal() (polars.dataframe method)": [[257, "polars.DataFrame.min_horizontal", false]], "minute() (polars.expr.dt method)": [[452, "polars.Expr.dt.minute", false]], "minute() (polars.series.dt method)": [[1063, "polars.Series.dt.minute", false]], "mod() (polars.expr method)": [[597, "polars.Expr.mod", false]], "mode() (polars.expr method)": [[598, "polars.Expr.mode", false]], "mode() (polars.series method)": [[1195, "polars.Series.mode", false]], "module": [[948, "module-polars.selectors", false]], "moduleupgraderequirederror": [[102, "polars.exceptions.ModuleUpgradeRequiredError", false]], "month() (polars.expr.dt method)": [[453, "polars.Expr.dt.month", false]], "month() (polars.series.dt method)": [[1064, "polars.Series.dt.month", false]], "month_end() (polars.expr.dt method)": [[454, "polars.Expr.dt.month_end", false]], "month_end() (polars.series.dt method)": [[1065, "polars.Series.dt.month_end", false]], "month_start() (polars.expr.dt method)": [[455, "polars.Expr.dt.month_start", false]], "month_start() (polars.series.dt method)": [[1066, "polars.Series.dt.month_start", false]], "mul() (polars.expr method)": [[599, "polars.Expr.mul", false]], "n_chunks() (polars.dataframe method)": [[258, "polars.DataFrame.n_chunks", false]], "n_chunks() (polars.series method)": [[1196, "polars.Series.n_chunks", false]], "n_unique() (in module polars)": [[798, "polars.n_unique", false]], "n_unique() (polars.dataframe method)": [[259, "polars.DataFrame.n_unique", false]], "n_unique() (polars.dataframe.group_by.groupby method)": [[329, "polars.dataframe.group_by.GroupBy.n_unique", false]], "n_unique() (polars.expr method)": [[600, "polars.Expr.n_unique", false]], "n_unique() (polars.expr.arr method)": [[380, "polars.Expr.arr.n_unique", false]], "n_unique() (polars.expr.list method)": [[554, "polars.Expr.list.n_unique", false]], "n_unique() (polars.lazyframe.group_by.lazygroupby method)": [[930, "polars.lazyframe.group_by.LazyGroupBy.n_unique", false]], "n_unique() (polars.series method)": [[1197, "polars.Series.n_unique", false]], "n_unique() (polars.series.arr method)": [[984, "polars.Series.arr.n_unique", false]], "n_unique() (polars.series.list method)": [[1168, "polars.Series.list.n_unique", false]], "name (polars.series property)": [[1198, "polars.Series.name", false]], "namespaceinfo (class in polars.catalog.unity)": [[186, "polars.catalog.unity.NamespaceInfo", false]], "nan_max() (polars.expr method)": [[610, "polars.Expr.nan_max", false]], "nan_max() (polars.series method)": [[1199, "polars.Series.nan_max", false]], "nan_min() (polars.expr method)": [[611, "polars.Expr.nan_min", false]], "nan_min() (polars.series method)": [[1200, "polars.Series.nan_min", false]], "nanosecond() (polars.expr.dt method)": [[456, "polars.Expr.dt.nanosecond", false]], "nanosecond() (polars.series.dt method)": [[1067, "polars.Series.dt.nanosecond", false]], "ne() (polars.expr method)": [[612, "polars.Expr.ne", false]], "ne() (polars.expr.meta method)": [[587, "polars.Expr.meta.ne", false]], "ne() (polars.series method)": [[1201, "polars.Series.ne", false]], "ne_missing() (polars.expr method)": [[613, "polars.Expr.ne_missing", false]], "ne_missing() (polars.series method)": [[1202, "polars.Series.ne_missing", false]], "neg() (polars.expr method)": [[614, "polars.Expr.neg", false]], "new_from_index() (polars.series method)": [[1203, "polars.Series.new_from_index", false]], "next_batches() (polars.io.csv.batched_reader.batchedcsvreader method)": [[132, "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", false]], "nodataerror": [[103, "polars.exceptions.NoDataError", false]], "normalize() (polars.expr.str method)": [[695, "polars.Expr.str.normalize", false]], "normalize() (polars.series.str method)": [[1274, "polars.Series.str.normalize", false]], "norowsreturnederror": [[104, "polars.exceptions.NoRowsReturnedError", false]], "not_() (polars.expr method)": [[615, "polars.Expr.not_", false]], "not_() (polars.series method)": [[1204, "polars.Series.not_", false]], "nth() (in module polars)": [[799, "polars.nth", false]], "null (class in polars.datatypes)": [[79, "polars.datatypes.Null", false]], "null_count() (polars.dataframe method)": [[260, "polars.DataFrame.null_count", false]], "null_count() (polars.expr method)": [[616, "polars.Expr.null_count", false]], "null_count() (polars.lazyframe method)": [[885, "polars.LazyFrame.null_count", false]], "null_count() (polars.series method)": [[1205, "polars.Series.null_count", false]], "numeric() (in module polars.selectors)": [[948, "polars.selectors.numeric", false]], "object (class in polars.datatypes)": [[80, "polars.datatypes.Object", false]], "offset_by() (polars.expr.dt method)": [[457, "polars.Expr.dt.offset_by", false]], "offset_by() (polars.series.dt method)": [[1068, "polars.Series.dt.offset_by", false]], "ones() (in module polars)": [[800, "polars.ones", false]], "or_() (polars.expr method)": [[617, "polars.Expr.or_", false]], "ordinal_day() (polars.expr.dt method)": [[458, "polars.Expr.dt.ordinal_day", false]], "ordinal_day() (polars.series.dt method)": [[1069, "polars.Series.dt.ordinal_day", false]], "outofboundserror": [[105, "polars.exceptions.OutOfBoundsError", false]], "output_name() (polars.expr.meta method)": [[588, "polars.Expr.meta.output_name", false]], "over() (polars.expr method)": [[618, "polars.Expr.over", false]], "pad_end() (polars.expr.str method)": [[696, "polars.Expr.str.pad_end", false]], "pad_end() (polars.series.str method)": [[1275, "polars.Series.str.pad_end", false]], "pad_start() (polars.expr.str method)": [[697, "polars.Expr.str.pad_start", false]], "pad_start() (polars.series.str method)": [[1276, "polars.Series.str.pad_start", false]], "panicexception": [[106, "polars.exceptions.PanicException", false]], "parametercollisionerror": [[107, "polars.exceptions.ParameterCollisionError", false]], "partition_by() (polars.dataframe method)": [[261, "polars.DataFrame.partition_by", false]], "pct_change() (polars.expr method)": [[619, "polars.Expr.pct_change", false]], "pct_change() (polars.series method)": [[1206, "polars.Series.pct_change", false]], "peak_max() (polars.expr method)": [[620, "polars.Expr.peak_max", false]], "peak_max() (polars.series method)": [[1207, "polars.Series.peak_max", false]], "peak_min() (polars.expr method)": [[621, "polars.Expr.peak_min", false]], "peak_min() (polars.series method)": [[1208, "polars.Series.peak_min", false]], "performancewarning": [[108, "polars.exceptions.PerformanceWarning", false]], "pipe() (polars.dataframe method)": [[262, "polars.DataFrame.pipe", false]], "pipe() (polars.expr method)": [[622, "polars.Expr.pipe", false]], "pipe() (polars.lazyframe method)": [[886, "polars.LazyFrame.pipe", false]], "pivot() (polars.dataframe method)": [[263, "polars.DataFrame.pivot", false]], "plot (polars.dataframe property)": [[341, "polars.DataFrame.plot", false]], "plot (polars.series property)": [[1342, "polars.Series.plot", false]], "polars.selectors": [[948, "module-polars.selectors", false]], "polarserror": [[109, "polars.exceptions.PolarsError", false]], "polarsinefficientmapwarning": [[110, "polars.exceptions.PolarsInefficientMapWarning", false]], "polarswarning": [[111, "polars.exceptions.PolarsWarning", false]], "pop() (polars.expr.meta method)": [[589, "polars.Expr.meta.pop", false]], "pow() (polars.expr method)": [[623, "polars.Expr.pow", false]], "pow() (polars.series method)": [[1209, "polars.Series.pow", false]], "prefix() (polars.expr.name method)": [[604, "polars.Expr.name.prefix", false]], "prefix_fields() (polars.expr.name method)": [[605, "polars.Expr.name.prefix_fields", false]], "product() (polars.dataframe method)": [[264, "polars.DataFrame.product", false]], "product() (polars.expr method)": [[624, "polars.Expr.product", false]], "product() (polars.series method)": [[1210, "polars.Series.product", false]], "profile() (polars.lazyframe method)": [[887, "polars.LazyFrame.profile", false]], "qcut() (polars.expr method)": [[625, "polars.Expr.qcut", false]], "qcut() (polars.series method)": [[1211, "polars.Series.qcut", false]], "quantile() (in module polars)": [[801, "polars.quantile", false]], "quantile() (polars.dataframe method)": [[265, "polars.DataFrame.quantile", false]], "quantile() (polars.dataframe.group_by.groupby method)": [[330, "polars.dataframe.group_by.GroupBy.quantile", false]], "quantile() (polars.expr method)": [[626, "polars.Expr.quantile", false]], "quantile() (polars.lazyframe method)": [[888, "polars.LazyFrame.quantile", false]], "quantile() (polars.lazyframe.group_by.lazygroupby method)": [[931, "polars.lazyframe.group_by.LazyGroupBy.quantile", false]], "quantile() (polars.series method)": [[1212, "polars.Series.quantile", false]], "quarter() (polars.expr.dt method)": [[459, "polars.Expr.dt.quarter", false]], "quarter() (polars.series.dt method)": [[1070, "polars.Series.dt.quarter", false]], "radians() (polars.expr method)": [[627, "polars.Expr.radians", false]], "rank() (polars.expr method)": [[628, "polars.Expr.rank", false]], "rank() (polars.series method)": [[1213, "polars.Series.rank", false]], "read_avro() (in module polars)": [[136, "polars.read_avro", false]], "read_clipboard() (in module polars)": [[137, "polars.read_clipboard", false]], "read_csv() (in module polars)": [[138, "polars.read_csv", false]], "read_csv_batched() (in module polars)": [[139, "polars.read_csv_batched", false]], "read_database() (in module polars)": [[140, "polars.read_database", false]], "read_database_uri() (in module polars)": [[141, "polars.read_database_uri", false]], "read_delta() (in module polars)": [[142, "polars.read_delta", false]], "read_excel() (in module polars)": [[143, "polars.read_excel", false]], "read_ipc() (in module polars)": [[144, "polars.read_ipc", false]], "read_ipc_schema() (in module polars)": [[145, "polars.read_ipc_schema", false]], "read_ipc_stream() (in module polars)": [[146, "polars.read_ipc_stream", false]], "read_json() (in module polars)": [[147, "polars.read_json", false]], "read_ndjson() (in module polars)": [[148, "polars.read_ndjson", false]], "read_ods() (in module polars)": [[149, "polars.read_ods", false]], "read_parquet() (in module polars)": [[150, "polars.read_parquet", false]], "read_parquet_schema() (in module polars)": [[151, "polars.read_parquet_schema", false]], "rechunk() (polars.dataframe method)": [[266, "polars.DataFrame.rechunk", false]], "rechunk() (polars.expr method)": [[629, "polars.Expr.rechunk", false]], "rechunk() (polars.series method)": [[1214, "polars.Series.rechunk", false]], "reduce() (in module polars)": [[802, "polars.reduce", false]], "register() (polars.sqlcontext method)": [[1348, "polars.SQLContext.register", false]], "register_dataframe_namespace() (in module polars.api)": [[52, "polars.api.register_dataframe_namespace", false]], "register_expr_namespace() (in module polars.api)": [[53, "polars.api.register_expr_namespace", false]], "register_globals() (polars.sqlcontext method)": [[1349, "polars.SQLContext.register_globals", false]], "register_io_source() (in module polars.io.plugins)": [[133, "polars.io.plugins.register_io_source", false]], "register_lazyframe_namespace() (in module polars.api)": [[54, "polars.api.register_lazyframe_namespace", false]], "register_many() (polars.sqlcontext method)": [[1350, "polars.SQLContext.register_many", false]], "register_plugin_function() (in module polars.plugins)": [[135, "polars.plugins.register_plugin_function", false]], "register_series_namespace() (in module polars.api)": [[55, "polars.api.register_series_namespace", false]], "reinterpret() (polars.expr method)": [[630, "polars.Expr.reinterpret", false]], "reinterpret() (polars.expr.bin method)": [[395, "polars.Expr.bin.reinterpret", false]], "reinterpret() (polars.series method)": [[1215, "polars.Series.reinterpret", false]], "reinterpret() (polars.series.bin method)": [[998, "polars.Series.bin.reinterpret", false]], "rename() (polars.dataframe method)": [[267, "polars.DataFrame.rename", false]], "rename() (polars.lazyframe method)": [[889, "polars.LazyFrame.rename", false]], "rename() (polars.series method)": [[1216, "polars.Series.rename", false]], "rename_fields() (polars.expr.struct method)": [[725, "polars.Expr.struct.rename_fields", false]], "rename_fields() (polars.series.struct method)": [[1305, "polars.Series.struct.rename_fields", false]], "repeat() (in module polars)": [[803, "polars.repeat", false]], "repeat_by() (polars.expr method)": [[631, "polars.Expr.repeat_by", false]], "replace() (polars.expr method)": [[632, "polars.Expr.replace", false]], "replace() (polars.expr.dt method)": [[460, "polars.Expr.dt.replace", false]], "replace() (polars.expr.str method)": [[698, "polars.Expr.str.replace", false]], "replace() (polars.series method)": [[1217, "polars.Series.replace", false]], "replace() (polars.series.dt method)": [[1071, "polars.Series.dt.replace", false]], "replace() (polars.series.str method)": [[1277, "polars.Series.str.replace", false]], "replace_all() (polars.expr.str method)": [[699, "polars.Expr.str.replace_all", false]], "replace_all() (polars.series.str method)": [[1278, "polars.Series.str.replace_all", false]], "replace_column() (polars.dataframe method)": [[268, "polars.DataFrame.replace_column", false]], "replace_many() (polars.expr.str method)": [[700, "polars.Expr.str.replace_many", false]], "replace_many() (polars.series.str method)": [[1279, "polars.Series.str.replace_many", false]], "replace_strict() (polars.expr method)": [[633, "polars.Expr.replace_strict", false]], "replace_strict() (polars.series method)": [[1218, "polars.Series.replace_strict", false]], "replace_time_zone() (polars.expr.dt method)": [[461, "polars.Expr.dt.replace_time_zone", false]], "replace_time_zone() (polars.series.dt method)": [[1072, "polars.Series.dt.replace_time_zone", false]], "reshape() (polars.expr method)": [[634, "polars.Expr.reshape", false]], "reshape() (polars.series method)": [[1219, "polars.Series.reshape", false]], "restore_defaults() (polars.config class method)": [[4, "polars.Config.restore_defaults", false]], "reverse() (polars.dataframe method)": [[269, "polars.DataFrame.reverse", false]], "reverse() (polars.expr method)": [[635, "polars.Expr.reverse", false]], "reverse() (polars.expr.arr method)": [[381, "polars.Expr.arr.reverse", false]], "reverse() (polars.expr.list method)": [[555, "polars.Expr.list.reverse", false]], "reverse() (polars.expr.str method)": [[701, "polars.Expr.str.reverse", false]], "reverse() (polars.lazyframe method)": [[890, "polars.LazyFrame.reverse", false]], "reverse() (polars.series method)": [[1220, "polars.Series.reverse", false]], "reverse() (polars.series.arr method)": [[985, "polars.Series.arr.reverse", false]], "reverse() (polars.series.list method)": [[1169, "polars.Series.list.reverse", false]], "reverse() (polars.series.str method)": [[1280, "polars.Series.str.reverse", false]], "rle() (polars.expr method)": [[636, "polars.Expr.rle", false]], "rle() (polars.series method)": [[1221, "polars.Series.rle", false]], "rle_id() (polars.expr method)": [[637, "polars.Expr.rle_id", false]], "rle_id() (polars.series method)": [[1222, "polars.Series.rle_id", false]], "rolling() (polars.dataframe method)": [[270, "polars.DataFrame.rolling", false]], "rolling() (polars.expr method)": [[638, "polars.Expr.rolling", false]], "rolling() (polars.lazyframe method)": [[891, "polars.LazyFrame.rolling", false]], "rolling_corr() (in module polars)": [[804, "polars.rolling_corr", false]], "rolling_cov() (in module polars)": [[805, "polars.rolling_cov", false]], "rolling_map() (polars.expr method)": [[639, "polars.Expr.rolling_map", false]], "rolling_map() (polars.series method)": [[1223, "polars.Series.rolling_map", false]], "rolling_max() (polars.expr method)": [[640, "polars.Expr.rolling_max", false]], "rolling_max() (polars.series method)": [[1224, "polars.Series.rolling_max", false]], "rolling_max_by() (polars.expr method)": [[641, "polars.Expr.rolling_max_by", false]], "rolling_mean() (polars.expr method)": [[642, "polars.Expr.rolling_mean", false]], "rolling_mean() (polars.series method)": [[1225, "polars.Series.rolling_mean", false]], "rolling_mean_by() (polars.expr method)": [[643, "polars.Expr.rolling_mean_by", false]], "rolling_median() (polars.expr method)": [[644, "polars.Expr.rolling_median", false]], "rolling_median() (polars.series method)": [[1226, "polars.Series.rolling_median", false]], "rolling_median_by() (polars.expr method)": [[645, "polars.Expr.rolling_median_by", false]], "rolling_min() (polars.expr method)": [[646, "polars.Expr.rolling_min", false]], "rolling_min() (polars.series method)": [[1227, "polars.Series.rolling_min", false]], "rolling_min_by() (polars.expr method)": [[647, "polars.Expr.rolling_min_by", false]], "rolling_quantile() (polars.expr method)": [[648, "polars.Expr.rolling_quantile", false]], "rolling_quantile() (polars.series method)": [[1228, "polars.Series.rolling_quantile", false]], "rolling_quantile_by() (polars.expr method)": [[649, "polars.Expr.rolling_quantile_by", false]], "rolling_skew() (polars.expr method)": [[650, "polars.Expr.rolling_skew", false]], "rolling_skew() (polars.series method)": [[1229, "polars.Series.rolling_skew", false]], "rolling_std() (polars.expr method)": [[651, "polars.Expr.rolling_std", false]], "rolling_std() (polars.series method)": [[1230, "polars.Series.rolling_std", false]], "rolling_std_by() (polars.expr method)": [[652, "polars.Expr.rolling_std_by", false]], "rolling_sum() (polars.expr method)": [[653, "polars.Expr.rolling_sum", false]], "rolling_sum() (polars.series method)": [[1231, "polars.Series.rolling_sum", false]], "rolling_sum_by() (polars.expr method)": [[654, "polars.Expr.rolling_sum_by", false]], "rolling_var() (polars.expr method)": [[655, "polars.Expr.rolling_var", false]], "rolling_var() (polars.series method)": [[1232, "polars.Series.rolling_var", false]], "rolling_var_by() (polars.expr method)": [[656, "polars.Expr.rolling_var_by", false]], "root_names() (polars.expr.meta method)": [[590, "polars.Expr.meta.root_names", false]], "round() (polars.expr method)": [[657, "polars.Expr.round", false]], "round() (polars.expr.dt method)": [[462, "polars.Expr.dt.round", false]], "round() (polars.series method)": [[1233, "polars.Series.round", false]], "round() (polars.series.dt method)": [[1073, "polars.Series.dt.round", false]], "round_sig_figs() (polars.expr method)": [[658, "polars.Expr.round_sig_figs", false]], "round_sig_figs() (polars.series method)": [[1234, "polars.Series.round_sig_figs", false]], "row() (polars.dataframe method)": [[271, "polars.DataFrame.row", false]], "rows() (polars.dataframe method)": [[272, "polars.DataFrame.rows", false]], "rows_by_key() (polars.dataframe method)": [[273, "polars.DataFrame.rows_by_key", false]], "rowserror": [[112, "polars.exceptions.RowsError", false]], "sample() (polars.dataframe method)": [[274, "polars.DataFrame.sample", false]], "sample() (polars.expr method)": [[659, "polars.Expr.sample", false]], "sample() (polars.expr.list method)": [[556, "polars.Expr.list.sample", false]], "sample() (polars.series method)": [[1235, "polars.Series.sample", false]], "sample() (polars.series.list method)": [[1170, "polars.Series.list.sample", false]], "save() (polars.config class method)": [[5, "polars.Config.save", false]], "save_to_file() (polars.config class method)": [[6, "polars.Config.save_to_file", false]], "scan_csv() (in module polars)": [[152, "polars.scan_csv", false]], "scan_delta() (in module polars)": [[153, "polars.scan_delta", false]], "scan_iceberg() (in module polars)": [[154, "polars.scan_iceberg", false]], "scan_ipc() (in module polars)": [[155, "polars.scan_ipc", false]], "scan_ndjson() (in module polars)": [[156, "polars.scan_ndjson", false]], "scan_parquet() (in module polars)": [[157, "polars.scan_parquet", false]], "scan_pyarrow_dataset() (in module polars)": [[158, "polars.scan_pyarrow_dataset", false]], "scan_table() (polars.catalog method)": [[182, "polars.Catalog.scan_table", false]], "scatter() (polars.series method)": [[1236, "polars.Series.scatter", false]], "schema (polars.dataframe property)": [[275, "polars.DataFrame.schema", false]], "schema (polars.lazyframe property)": [[892, "polars.LazyFrame.schema", false]], "schema (polars.series.struct attribute)": [[1306, "polars.Series.struct.schema", false]], "schemaerror": [[115, "polars.exceptions.SchemaError", false]], "schemafieldnotfounderror": [[116, "polars.exceptions.SchemaFieldNotFoundError", false]], "search_sorted() (polars.expr method)": [[660, "polars.Expr.search_sorted", false]], "search_sorted() (polars.series method)": [[1237, "polars.Series.search_sorted", false]], "second() (polars.expr.dt method)": [[463, "polars.Expr.dt.second", false]], "second() (polars.series.dt method)": [[1074, "polars.Series.dt.second", false]], "select() (in module polars)": [[806, "polars.select", false]], "select() (polars.dataframe method)": [[276, "polars.DataFrame.select", false]], "select() (polars.lazyframe method)": [[893, "polars.LazyFrame.select", false]], "select_seq() (polars.dataframe method)": [[277, "polars.DataFrame.select_seq", false]], "select_seq() (polars.lazyframe method)": [[894, "polars.LazyFrame.select_seq", false]], "serialize() (polars.dataframe method)": [[278, "polars.DataFrame.serialize", false]], "serialize() (polars.expr.meta method)": [[591, "polars.Expr.meta.serialize", false]], "serialize() (polars.lazyframe method)": [[895, "polars.LazyFrame.serialize", false]], "series() (in module polars.testing.parametric)": [[172, "polars.testing.parametric.series", false]], "set() (polars.series method)": [[1238, "polars.Series.set", false]], "set_ascii_tables() (polars.config class method)": [[7, "polars.Config.set_ascii_tables", false]], "set_auto_structify() (polars.config class method)": [[8, "polars.Config.set_auto_structify", false]], "set_decimal_separator() (polars.config class method)": [[9, "polars.Config.set_decimal_separator", false]], "set_difference() (polars.expr.list method)": [[557, "polars.Expr.list.set_difference", false]], "set_difference() (polars.series.list method)": [[1171, "polars.Series.list.set_difference", false]], "set_float_precision() (polars.config class method)": [[10, "polars.Config.set_float_precision", false]], "set_fmt_float() (polars.config class method)": [[11, "polars.Config.set_fmt_float", false]], "set_fmt_str_lengths() (polars.config class method)": [[12, "polars.Config.set_fmt_str_lengths", false]], "set_fmt_table_cell_list_len() (polars.config class method)": [[13, "polars.Config.set_fmt_table_cell_list_len", false]], "set_intersection() (polars.expr.list method)": [[558, "polars.Expr.list.set_intersection", false]], "set_intersection() (polars.series.list method)": [[1172, "polars.Series.list.set_intersection", false]], "set_profile() (in module polars.testing.parametric)": [[173, "polars.testing.parametric.set_profile", false]], "set_random_seed() (in module polars)": [[159, "polars.set_random_seed", false]], "set_sorted() (polars.dataframe method)": [[279, "polars.DataFrame.set_sorted", false]], "set_sorted() (polars.expr method)": [[661, "polars.Expr.set_sorted", false]], "set_sorted() (polars.lazyframe method)": [[896, "polars.LazyFrame.set_sorted", false]], "set_sorted() (polars.series method)": [[1239, "polars.Series.set_sorted", false]], "set_streaming_chunk_size() (polars.config class method)": [[14, "polars.Config.set_streaming_chunk_size", false]], "set_symmetric_difference() (polars.expr.list method)": [[559, "polars.Expr.list.set_symmetric_difference", false]], "set_symmetric_difference() (polars.series.list method)": [[1173, "polars.Series.list.set_symmetric_difference", false]], "set_tbl_cell_alignment() (polars.config class method)": [[15, "polars.Config.set_tbl_cell_alignment", false]], "set_tbl_cell_numeric_alignment() (polars.config class method)": [[16, "polars.Config.set_tbl_cell_numeric_alignment", false]], "set_tbl_cols() (polars.config class method)": [[17, "polars.Config.set_tbl_cols", false]], "set_tbl_column_data_type_inline() (polars.config class method)": [[18, "polars.Config.set_tbl_column_data_type_inline", false]], "set_tbl_dataframe_shape_below() (polars.config class method)": [[19, "polars.Config.set_tbl_dataframe_shape_below", false]], "set_tbl_formatting() (polars.config class method)": [[20, "polars.Config.set_tbl_formatting", false]], "set_tbl_hide_column_data_types() (polars.config class method)": [[21, "polars.Config.set_tbl_hide_column_data_types", false]], "set_tbl_hide_column_names() (polars.config class method)": [[22, "polars.Config.set_tbl_hide_column_names", false]], "set_tbl_hide_dataframe_shape() (polars.config class method)": [[23, "polars.Config.set_tbl_hide_dataframe_shape", false]], "set_tbl_hide_dtype_separator() (polars.config class method)": [[24, "polars.Config.set_tbl_hide_dtype_separator", false]], "set_tbl_rows() (polars.config class method)": [[25, "polars.Config.set_tbl_rows", false]], "set_tbl_width_chars() (polars.config class method)": [[26, "polars.Config.set_tbl_width_chars", false]], "set_thousands_separator() (polars.config class method)": [[27, "polars.Config.set_thousands_separator", false]], "set_trim_decimal_zeros() (polars.config class method)": [[28, "polars.Config.set_trim_decimal_zeros", false]], "set_union() (polars.expr.list method)": [[560, "polars.Expr.list.set_union", false]], "set_union() (polars.series.list method)": [[1174, "polars.Series.list.set_union", false]], "set_verbose() (polars.config class method)": [[29, "polars.Config.set_verbose", false]], "shape (polars.dataframe property)": [[280, "polars.DataFrame.shape", false]], "shape (polars.series property)": [[1240, "polars.Series.shape", false]], "shapeerror": [[117, "polars.exceptions.ShapeError", false]], "shift() (polars.dataframe method)": [[281, "polars.DataFrame.shift", false]], "shift() (polars.expr method)": [[662, "polars.Expr.shift", false]], "shift() (polars.expr.arr method)": [[382, "polars.Expr.arr.shift", false]], "shift() (polars.expr.list method)": [[561, "polars.Expr.list.shift", false]], "shift() (polars.lazyframe method)": [[897, "polars.LazyFrame.shift", false]], "shift() (polars.series method)": [[1241, "polars.Series.shift", false]], "shift() (polars.series.arr method)": [[986, "polars.Series.arr.shift", false]], "shift() (polars.series.list method)": [[1175, "polars.Series.list.shift", false]], "show_graph() (polars.expr.meta method)": [[592, "polars.Expr.meta.show_graph", false]], "show_graph() (polars.lazyframe method)": [[898, "polars.LazyFrame.show_graph", false]], "show_versions() (in module polars)": [[160, "polars.show_versions", false]], "shrink_dtype() (polars.expr method)": [[663, "polars.Expr.shrink_dtype", false]], "shrink_dtype() (polars.series method)": [[1242, "polars.Series.shrink_dtype", false]], "shrink_to_fit() (polars.dataframe method)": [[282, "polars.DataFrame.shrink_to_fit", false]], "shrink_to_fit() (polars.series method)": [[1243, "polars.Series.shrink_to_fit", false]], "shuffle() (polars.expr method)": [[664, "polars.Expr.shuffle", false]], "shuffle() (polars.series method)": [[1244, "polars.Series.shuffle", false]], "sign() (polars.expr method)": [[665, "polars.Expr.sign", false]], "sign() (polars.series method)": [[1245, "polars.Series.sign", false]], "signed_integer() (in module polars.selectors)": [[948, "polars.selectors.signed_integer", false]], "sin() (polars.expr method)": [[666, "polars.Expr.sin", false]], "sin() (polars.series method)": [[1246, "polars.Series.sin", false]], "sinh() (polars.expr method)": [[667, "polars.Expr.sinh", false]], "sinh() (polars.series method)": [[1247, "polars.Series.sinh", false]], "sink_csv() (polars.lazyframe method)": [[46, "polars.LazyFrame.sink_csv", false]], "sink_ipc() (polars.lazyframe method)": [[47, "polars.LazyFrame.sink_ipc", false]], "sink_ndjson() (polars.lazyframe method)": [[48, "polars.LazyFrame.sink_ndjson", false]], "sink_parquet() (polars.lazyframe method)": [[49, "polars.LazyFrame.sink_parquet", false]], "size() (polars.expr.bin method)": [[396, "polars.Expr.bin.size", false]], "size() (polars.series.bin method)": [[999, "polars.Series.bin.size", false]], "skew() (polars.expr method)": [[668, "polars.Expr.skew", false]], "skew() (polars.series method)": [[1248, "polars.Series.skew", false]], "slice() (polars.dataframe method)": [[283, "polars.DataFrame.slice", false]], "slice() (polars.expr method)": [[669, "polars.Expr.slice", false]], "slice() (polars.expr.list method)": [[562, "polars.Expr.list.slice", false]], "slice() (polars.expr.str method)": [[702, "polars.Expr.str.slice", false]], "slice() (polars.lazyframe method)": [[899, "polars.LazyFrame.slice", false]], "slice() (polars.series method)": [[1249, "polars.Series.slice", false]], "slice() (polars.series.list method)": [[1176, "polars.Series.list.slice", false]], "slice() (polars.series.str method)": [[1281, "polars.Series.str.slice", false]], "sort() (polars.dataframe method)": [[284, "polars.DataFrame.sort", false]], "sort() (polars.expr method)": [[670, "polars.Expr.sort", false]], "sort() (polars.expr.arr method)": [[383, "polars.Expr.arr.sort", false]], "sort() (polars.expr.list method)": [[563, "polars.Expr.list.sort", false]], "sort() (polars.lazyframe method)": [[900, "polars.LazyFrame.sort", false]], "sort() (polars.series method)": [[1250, "polars.Series.sort", false]], "sort() (polars.series.arr method)": [[987, "polars.Series.arr.sort", false]], "sort() (polars.series.list method)": [[1177, "polars.Series.list.sort", false]], "sort_by() (polars.expr method)": [[671, "polars.Expr.sort_by", false]], "split() (polars.expr.str method)": [[703, "polars.Expr.str.split", false]], "split() (polars.series.str method)": [[1282, "polars.Series.str.split", false]], "split_exact() (polars.expr.str method)": [[704, "polars.Expr.str.split_exact", false]], "split_exact() (polars.series.str method)": [[1283, "polars.Series.str.split_exact", false]], "splitn() (polars.expr.str method)": [[705, "polars.Expr.str.splitn", false]], "splitn() (polars.series.str method)": [[1284, "polars.Series.str.splitn", false]], "sql() (in module polars)": [[807, "polars.sql", false]], "sql() (polars.dataframe method)": [[285, "polars.DataFrame.sql", false]], "sql() (polars.lazyframe method)": [[901, "polars.LazyFrame.sql", false]], "sql_expr() (in module polars)": [[808, "polars.sql_expr", false]], "sqlcontext (class in polars)": [[1365, "polars.SQLContext", false]], "sqlinterfaceerror": [[113, "polars.exceptions.SQLInterfaceError", false]], "sqlsyntaxerror": [[114, "polars.exceptions.SQLSyntaxError", false]], "sqrt() (polars.expr method)": [[672, "polars.Expr.sqrt", false]], "sqrt() (polars.series method)": [[1251, "polars.Series.sqrt", false]], "starts_with() (in module polars.selectors)": [[948, "polars.selectors.starts_with", false]], "starts_with() (polars.expr.bin method)": [[397, "polars.Expr.bin.starts_with", false]], "starts_with() (polars.expr.cat method)": [[414, "polars.Expr.cat.starts_with", false]], "starts_with() (polars.expr.str method)": [[706, "polars.Expr.str.starts_with", false]], "starts_with() (polars.series.bin method)": [[1000, "polars.Series.bin.starts_with", false]], "starts_with() (polars.series.cat method)": [[1017, "polars.Series.cat.starts_with", false]], "starts_with() (polars.series.str method)": [[1285, "polars.Series.str.starts_with", false]], "state() (polars.config class method)": [[30, "polars.Config.state", false]], "std() (in module polars)": [[809, "polars.std", false]], "std() (polars.dataframe method)": [[286, "polars.DataFrame.std", false]], "std() (polars.expr method)": [[673, "polars.Expr.std", false]], "std() (polars.expr.arr method)": [[384, "polars.Expr.arr.std", false]], "std() (polars.expr.list method)": [[564, "polars.Expr.list.std", false]], "std() (polars.lazyframe method)": [[902, "polars.LazyFrame.std", false]], "std() (polars.series method)": [[1252, "polars.Series.std", false]], "std() (polars.series.arr method)": [[988, "polars.Series.arr.std", false]], "std() (polars.series.list method)": [[1178, "polars.Series.list.std", false]], "strftime() (polars.expr.dt method)": [[464, "polars.Expr.dt.strftime", false]], "strftime() (polars.series.dt method)": [[1075, "polars.Series.dt.strftime", false]], "string (class in polars.datatypes)": [[81, "polars.datatypes.String", false]], "string() (in module polars.selectors)": [[948, "polars.selectors.string", false]], "stringcache (class in polars)": [[50, "polars.StringCache", false]], "stringcachemismatcherror": [[118, "polars.exceptions.StringCacheMismatchError", false]], "strip_chars() (polars.expr.str method)": [[707, "polars.Expr.str.strip_chars", false]], "strip_chars() (polars.series.str method)": [[1286, "polars.Series.str.strip_chars", false]], "strip_chars_end() (polars.expr.str method)": [[708, "polars.Expr.str.strip_chars_end", false]], "strip_chars_end() (polars.series.str method)": [[1287, "polars.Series.str.strip_chars_end", false]], "strip_chars_start() (polars.expr.str method)": [[709, "polars.Expr.str.strip_chars_start", false]], "strip_chars_start() (polars.series.str method)": [[1288, "polars.Series.str.strip_chars_start", false]], "strip_prefix() (polars.expr.str method)": [[710, "polars.Expr.str.strip_prefix", false]], "strip_prefix() (polars.series.str method)": [[1289, "polars.Series.str.strip_prefix", false]], "strip_suffix() (polars.expr.str method)": [[711, "polars.Expr.str.strip_suffix", false]], "strip_suffix() (polars.series.str method)": [[1290, "polars.Series.str.strip_suffix", false]], "strptime() (polars.expr.str method)": [[712, "polars.Expr.str.strptime", false]], "strptime() (polars.series.str method)": [[1291, "polars.Series.str.strptime", false]], "struct (class in polars.datatypes)": [[82, "polars.datatypes.Struct", false]], "struct() (in module polars)": [[810, "polars.struct", false]], "structfieldnotfounderror": [[119, "polars.exceptions.StructFieldNotFoundError", false]], "style (polars.dataframe property)": [[342, "polars.DataFrame.style", false]], "sub() (polars.expr method)": [[728, "polars.Expr.sub", false]], "suffix() (polars.expr.name method)": [[606, "polars.Expr.name.suffix", false]], "suffix_fields() (polars.expr.name method)": [[607, "polars.Expr.name.suffix_fields", false]], "sum() (in module polars)": [[811, "polars.sum", false]], "sum() (polars.dataframe method)": [[287, "polars.DataFrame.sum", false]], "sum() (polars.dataframe.group_by.groupby method)": [[331, "polars.dataframe.group_by.GroupBy.sum", false]], "sum() (polars.expr method)": [[729, "polars.Expr.sum", false]], "sum() (polars.expr.arr method)": [[385, "polars.Expr.arr.sum", false]], "sum() (polars.expr.list method)": [[565, "polars.Expr.list.sum", false]], "sum() (polars.lazyframe method)": [[903, "polars.LazyFrame.sum", false]], "sum() (polars.lazyframe.group_by.lazygroupby method)": [[932, "polars.lazyframe.group_by.LazyGroupBy.sum", false]], "sum() (polars.series method)": [[1308, "polars.Series.sum", false]], "sum() (polars.series.arr method)": [[989, "polars.Series.arr.sum", false]], "sum() (polars.series.list method)": [[1179, "polars.Series.list.sum", false]], "sum_horizontal() (in module polars)": [[812, "polars.sum_horizontal", false]], "sum_horizontal() (polars.dataframe method)": [[288, "polars.DataFrame.sum_horizontal", false]], "tableinfo (class in polars.catalog.unity)": [[187, "polars.catalog.unity.TableInfo", false]], "tables() (polars.sqlcontext method)": [[1351, "polars.SQLContext.tables", false]], "tabletype (in module polars.catalog.unity)": [[189, "polars.catalog.unity.TableType", false]], "tail() (in module polars)": [[813, "polars.tail", false]], "tail() (polars.dataframe method)": [[289, "polars.DataFrame.tail", false]], "tail() (polars.dataframe.group_by.groupby method)": [[332, "polars.dataframe.group_by.GroupBy.tail", false]], "tail() (polars.expr method)": [[730, "polars.Expr.tail", false]], "tail() (polars.expr.list method)": [[566, "polars.Expr.list.tail", false]], "tail() (polars.expr.str method)": [[713, "polars.Expr.str.tail", false]], "tail() (polars.lazyframe method)": [[904, "polars.LazyFrame.tail", false]], "tail() (polars.lazyframe.group_by.lazygroupby method)": [[933, "polars.lazyframe.group_by.LazyGroupBy.tail", false]], "tail() (polars.series method)": [[1309, "polars.Series.tail", false]], "tail() (polars.series.list method)": [[1180, "polars.Series.list.tail", false]], "tail() (polars.series.str method)": [[1292, "polars.Series.str.tail", false]], "tan() (polars.expr method)": [[731, "polars.Expr.tan", false]], "tan() (polars.series method)": [[1310, "polars.Series.tan", false]], "tanh() (polars.expr method)": [[732, "polars.Expr.tanh", false]], "tanh() (polars.series method)": [[1311, "polars.Series.tanh", false]], "temporal() (in module polars.selectors)": [[948, "polars.selectors.temporal", false]], "thread_pool_size() (in module polars)": [[174, "polars.thread_pool_size", false]], "threadpool_size() (in module polars)": [[175, "polars.threadpool_size", false]], "time (class in polars.datatypes)": [[83, "polars.datatypes.Time", false]], "time() (in module polars)": [[814, "polars.time", false]], "time() (in module polars.selectors)": [[948, "polars.selectors.time", false]], "time() (polars.expr.dt method)": [[465, "polars.Expr.dt.time", false]], "time() (polars.series.dt method)": [[1076, "polars.Series.dt.time", false]], "time_range() (in module polars)": [[815, "polars.time_range", false]], "time_ranges() (in module polars)": [[816, "polars.time_ranges", false]], "timestamp() (polars.expr.dt method)": [[466, "polars.Expr.dt.timestamp", false]], "timestamp() (polars.series.dt method)": [[1077, "polars.Series.dt.timestamp", false]], "to_array() (polars.expr.list method)": [[567, "polars.Expr.list.to_array", false]], "to_array() (polars.series.list method)": [[1181, "polars.Series.list.to_array", false]], "to_arrow() (polars.dataframe method)": [[290, "polars.DataFrame.to_arrow", false]], "to_arrow() (polars.series method)": [[1312, "polars.Series.to_arrow", false]], "to_date() (polars.expr.str method)": [[714, "polars.Expr.str.to_date", false]], "to_date() (polars.series.str method)": [[1293, "polars.Series.str.to_date", false]], "to_datetime() (polars.expr.str method)": [[715, "polars.Expr.str.to_datetime", false]], "to_datetime() (polars.series.str method)": [[1294, "polars.Series.str.to_datetime", false]], "to_decimal() (polars.expr.str method)": [[716, "polars.Expr.str.to_decimal", false]], "to_decimal() (polars.series.str method)": [[1295, "polars.Series.str.to_decimal", false]], "to_dict() (polars.dataframe method)": [[291, "polars.DataFrame.to_dict", false]], "to_dicts() (polars.dataframe method)": [[292, "polars.DataFrame.to_dicts", false]], "to_dummies() (polars.dataframe method)": [[293, "polars.DataFrame.to_dummies", false]], "to_dummies() (polars.series method)": [[1313, "polars.Series.to_dummies", false]], "to_frame() (polars.series method)": [[1314, "polars.Series.to_frame", false]], "to_init_repr() (polars.dataframe method)": [[294, "polars.DataFrame.to_init_repr", false]], "to_init_repr() (polars.series method)": [[1315, "polars.Series.to_init_repr", false]], "to_integer() (polars.expr.str method)": [[717, "polars.Expr.str.to_integer", false]], "to_integer() (polars.series.str method)": [[1296, "polars.Series.str.to_integer", false]], "to_jax() (polars.dataframe method)": [[295, "polars.DataFrame.to_jax", false]], "to_jax() (polars.series method)": [[1316, "polars.Series.to_jax", false]], "to_list() (polars.expr.arr method)": [[386, "polars.Expr.arr.to_list", false]], "to_list() (polars.series method)": [[1317, "polars.Series.to_list", false]], "to_list() (polars.series.arr method)": [[990, "polars.Series.arr.to_list", false]], "to_local() (polars.series.cat method)": [[1018, "polars.Series.cat.to_local", false]], "to_lowercase() (polars.expr.name method)": [[608, "polars.Expr.name.to_lowercase", false]], "to_lowercase() (polars.expr.str method)": [[718, "polars.Expr.str.to_lowercase", false]], "to_lowercase() (polars.series.str method)": [[1297, "polars.Series.str.to_lowercase", false]], "to_numpy() (polars.dataframe method)": [[296, "polars.DataFrame.to_numpy", false]], "to_numpy() (polars.series method)": [[1318, "polars.Series.to_numpy", false]], "to_pandas() (polars.dataframe method)": [[297, "polars.DataFrame.to_pandas", false]], "to_pandas() (polars.series method)": [[1319, "polars.Series.to_pandas", false]], "to_physical() (polars.expr method)": [[733, "polars.Expr.to_physical", false]], "to_physical() (polars.series method)": [[1320, "polars.Series.to_physical", false]], "to_series() (polars.dataframe method)": [[298, "polars.DataFrame.to_series", false]], "to_string() (polars.expr.dt method)": [[467, "polars.Expr.dt.to_string", false]], "to_string() (polars.series.dt method)": [[1078, "polars.Series.dt.to_string", false]], "to_struct() (polars.dataframe method)": [[299, "polars.DataFrame.to_struct", false]], "to_struct() (polars.expr.arr method)": [[387, "polars.Expr.arr.to_struct", false]], "to_struct() (polars.expr.list method)": [[568, "polars.Expr.list.to_struct", false]], "to_struct() (polars.series.arr method)": [[991, "polars.Series.arr.to_struct", false]], "to_struct() (polars.series.list method)": [[1182, "polars.Series.list.to_struct", false]], "to_time() (polars.expr.str method)": [[719, "polars.Expr.str.to_time", false]], "to_time() (polars.series.str method)": [[1298, "polars.Series.str.to_time", false]], "to_titlecase() (polars.expr.str method)": [[720, "polars.Expr.str.to_titlecase", false]], "to_titlecase() (polars.series.str method)": [[1299, "polars.Series.str.to_titlecase", false]], "to_torch() (polars.dataframe method)": [[300, "polars.DataFrame.to_torch", false]], "to_torch() (polars.series method)": [[1321, "polars.Series.to_torch", false]], "to_uppercase() (polars.expr.name method)": [[609, "polars.Expr.name.to_uppercase", false]], "to_uppercase() (polars.expr.str method)": [[721, "polars.Expr.str.to_uppercase", false]], "to_uppercase() (polars.series.str method)": [[1300, "polars.Series.str.to_uppercase", false]], "toomanyrowsreturnederror": [[120, "polars.exceptions.TooManyRowsReturnedError", false]], "top_k() (polars.dataframe method)": [[301, "polars.DataFrame.top_k", false]], "top_k() (polars.expr method)": [[734, "polars.Expr.top_k", false]], "top_k() (polars.lazyframe method)": [[905, "polars.LazyFrame.top_k", false]], "top_k() (polars.series method)": [[1322, "polars.Series.top_k", false]], "top_k_by() (polars.expr method)": [[735, "polars.Expr.top_k_by", false]], "total_days() (polars.expr.dt method)": [[468, "polars.Expr.dt.total_days", false]], "total_days() (polars.series.dt method)": [[1079, "polars.Series.dt.total_days", false]], "total_hours() (polars.expr.dt method)": [[469, "polars.Expr.dt.total_hours", false]], "total_hours() (polars.series.dt method)": [[1080, "polars.Series.dt.total_hours", false]], "total_microseconds() (polars.expr.dt method)": [[470, "polars.Expr.dt.total_microseconds", false]], "total_microseconds() (polars.series.dt method)": [[1081, "polars.Series.dt.total_microseconds", false]], "total_milliseconds() (polars.expr.dt method)": [[471, "polars.Expr.dt.total_milliseconds", false]], "total_milliseconds() (polars.series.dt method)": [[1082, "polars.Series.dt.total_milliseconds", false]], "total_minutes() (polars.expr.dt method)": [[472, "polars.Expr.dt.total_minutes", false]], "total_minutes() (polars.series.dt method)": [[1083, "polars.Series.dt.total_minutes", false]], "total_nanoseconds() (polars.expr.dt method)": [[473, "polars.Expr.dt.total_nanoseconds", false]], "total_nanoseconds() (polars.series.dt method)": [[1084, "polars.Series.dt.total_nanoseconds", false]], "total_seconds() (polars.expr.dt method)": [[474, "polars.Expr.dt.total_seconds", false]], "total_seconds() (polars.series.dt method)": [[1085, "polars.Series.dt.total_seconds", false]], "transpose() (polars.dataframe method)": [[302, "polars.DataFrame.transpose", false]], "tree_format() (polars.expr.meta method)": [[593, "polars.Expr.meta.tree_format", false]], "truediv() (polars.expr method)": [[736, "polars.Expr.truediv", false]], "truncate() (polars.expr.dt method)": [[475, "polars.Expr.dt.truncate", false]], "truncate() (polars.series.dt method)": [[1086, "polars.Series.dt.truncate", false]], "uint16 (class in polars.datatypes)": [[84, "polars.datatypes.UInt16", false]], "uint32 (class in polars.datatypes)": [[85, "polars.datatypes.UInt32", false]], "uint64 (class in polars.datatypes)": [[86, "polars.datatypes.UInt64", false]], "uint8 (class in polars.datatypes)": [[87, "polars.datatypes.UInt8", false]], "undo_aliases() (polars.expr.meta method)": [[594, "polars.Expr.meta.undo_aliases", false]], "unique() (polars.dataframe method)": [[303, "polars.DataFrame.unique", false]], "unique() (polars.expr method)": [[737, "polars.Expr.unique", false]], "unique() (polars.expr.arr method)": [[388, "polars.Expr.arr.unique", false]], "unique() (polars.expr.list method)": [[569, "polars.Expr.list.unique", false]], "unique() (polars.lazyframe method)": [[906, "polars.LazyFrame.unique", false]], "unique() (polars.series method)": [[1323, "polars.Series.unique", false]], "unique() (polars.series.arr method)": [[992, "polars.Series.arr.unique", false]], "unique() (polars.series.list method)": [[1183, "polars.Series.list.unique", false]], "unique_counts() (polars.expr method)": [[738, "polars.Expr.unique_counts", false]], "unique_counts() (polars.series method)": [[1324, "polars.Series.unique_counts", false]], "unknown (class in polars.datatypes)": [[88, "polars.datatypes.Unknown", false]], "unnest() (polars.dataframe method)": [[304, "polars.DataFrame.unnest", false]], "unnest() (polars.expr.struct method)": [[726, "polars.Expr.struct.unnest", false]], "unnest() (polars.lazyframe method)": [[907, "polars.LazyFrame.unnest", false]], "unnest() (polars.series.struct method)": [[1307, "polars.Series.struct.unnest", false]], "unpivot() (polars.dataframe method)": [[305, "polars.DataFrame.unpivot", false]], "unpivot() (polars.lazyframe method)": [[908, "polars.LazyFrame.unpivot", false]], "unregister() (polars.sqlcontext method)": [[1352, "polars.SQLContext.unregister", false]], "unsigned_integer() (in module polars.selectors)": [[948, "polars.selectors.unsigned_integer", false]], "unstablewarning": [[121, "polars.exceptions.UnstableWarning", false]], "unstack() (polars.dataframe method)": [[306, "polars.DataFrame.unstack", false]], "unsuitablesqlerror": [[122, "polars.exceptions.UnsuitableSQLError", false]], "update() (polars.dataframe method)": [[307, "polars.DataFrame.update", false]], "update() (polars.lazyframe method)": [[909, "polars.LazyFrame.update", false]], "upper_bound() (polars.expr method)": [[739, "polars.Expr.upper_bound", false]], "upper_bound() (polars.series method)": [[1325, "polars.Series.upper_bound", false]], "upsample() (polars.dataframe method)": [[308, "polars.DataFrame.upsample", false]], "uses_lexical_ordering() (polars.series.cat method)": [[1019, "polars.Series.cat.uses_lexical_ordering", false]], "using_string_cache() (in module polars)": [[176, "polars.using_string_cache", false]], "utf8 (in module polars.datatypes)": [[89, "polars.datatypes.Utf8", false]], "value_counts() (polars.expr method)": [[740, "polars.Expr.value_counts", false]], "value_counts() (polars.series method)": [[1326, "polars.Series.value_counts", false]], "var() (in module polars)": [[817, "polars.var", false]], "var() (polars.dataframe method)": [[309, "polars.DataFrame.var", false]], "var() (polars.expr method)": [[741, "polars.Expr.var", false]], "var() (polars.expr.arr method)": [[389, "polars.Expr.arr.var", false]], "var() (polars.expr.list method)": [[570, "polars.Expr.list.var", false]], "var() (polars.lazyframe method)": [[910, "polars.LazyFrame.var", false]], "var() (polars.series method)": [[1327, "polars.Series.var", false]], "var() (polars.series.arr method)": [[993, "polars.Series.arr.var", false]], "var() (polars.series.list method)": [[1184, "polars.Series.list.var", false]], "vstack() (polars.dataframe method)": [[310, "polars.DataFrame.vstack", false]], "week() (polars.expr.dt method)": [[476, "polars.Expr.dt.week", false]], "week() (polars.series.dt method)": [[1087, "polars.Series.dt.week", false]], "weekday() (polars.expr.dt method)": [[477, "polars.Expr.dt.weekday", false]], "weekday() (polars.series.dt method)": [[1088, "polars.Series.dt.weekday", false]], "when() (in module polars)": [[818, "polars.when", false]], "where() (polars.expr method)": [[742, "polars.Expr.where", false]], "width (polars.dataframe property)": [[311, "polars.DataFrame.width", false]], "width (polars.lazyframe property)": [[911, "polars.LazyFrame.width", false]], "with_columns() (polars.dataframe method)": [[312, "polars.DataFrame.with_columns", false]], "with_columns() (polars.lazyframe method)": [[912, "polars.LazyFrame.with_columns", false]], "with_columns_seq() (polars.dataframe method)": [[313, "polars.DataFrame.with_columns_seq", false]], "with_columns_seq() (polars.lazyframe method)": [[913, "polars.LazyFrame.with_columns_seq", false]], "with_context() (polars.lazyframe method)": [[914, "polars.LazyFrame.with_context", false]], "with_fields() (polars.expr.struct method)": [[727, "polars.Expr.struct.with_fields", false]], "with_row_count() (polars.dataframe method)": [[314, "polars.DataFrame.with_row_count", false]], "with_row_count() (polars.lazyframe method)": [[915, "polars.LazyFrame.with_row_count", false]], "with_row_index() (polars.dataframe method)": [[315, "polars.DataFrame.with_row_index", false]], "with_row_index() (polars.lazyframe method)": [[916, "polars.LazyFrame.with_row_index", false]], "with_time_unit() (polars.expr.dt method)": [[478, "polars.Expr.dt.with_time_unit", false]], "with_time_unit() (polars.series.dt method)": [[1089, "polars.Series.dt.with_time_unit", false]], "write_avro() (polars.dataframe method)": [[35, "polars.DataFrame.write_avro", false]], "write_clipboard() (polars.dataframe method)": [[36, "polars.DataFrame.write_clipboard", false]], "write_csv() (polars.dataframe method)": [[37, "polars.DataFrame.write_csv", false]], "write_database() (polars.dataframe method)": [[38, "polars.DataFrame.write_database", false]], "write_delta() (polars.dataframe method)": [[39, "polars.DataFrame.write_delta", false]], "write_excel() (polars.dataframe method)": [[40, "polars.DataFrame.write_excel", false]], "write_ipc() (polars.dataframe method)": [[41, "polars.DataFrame.write_ipc", false]], "write_ipc_stream() (polars.dataframe method)": [[42, "polars.DataFrame.write_ipc_stream", false]], "write_json() (polars.dataframe method)": [[43, "polars.DataFrame.write_json", false]], "write_json() (polars.expr.meta method)": [[595, "polars.Expr.meta.write_json", false]], "write_ndjson() (polars.dataframe method)": [[44, "polars.DataFrame.write_ndjson", false]], "write_parquet() (polars.dataframe method)": [[45, "polars.DataFrame.write_parquet", false]], "xor() (polars.expr method)": [[743, "polars.Expr.xor", false]], "year() (polars.expr.dt method)": [[479, "polars.Expr.dt.year", false]], "year() (polars.series.dt method)": [[1090, "polars.Series.dt.year", false]], "zeros() (in module polars)": [[819, "polars.zeros", false]], "zfill() (polars.expr.str method)": [[722, "polars.Expr.str.zfill", false]], "zfill() (polars.series.str method)": [[1301, "polars.Series.str.zfill", false]], "zip_with() (polars.series method)": [[1328, "polars.Series.zip_with", false]]}, "objects": {"polars": [[177, 0, 1, "", "Catalog"], [31, 0, 1, "", "CredentialProvider"], [32, 0, 1, "", "CredentialProviderAWS"], [33, 0, 1, "", "CredentialProviderAzure"], [34, 0, 1, "", "CredentialProviderGCP"], [1365, 0, 1, "", "SQLContext"], [50, 0, 1, "", "StringCache"], [51, 4, 1, "", "align_frames"], [744, 4, 1, "", "all"], [745, 4, 1, "", "all_horizontal"], [746, 4, 1, "", "any"], [747, 4, 1, "", "any_horizontal"], [748, 4, 1, "", "approx_n_unique"], [749, 4, 1, "", "arange"], [750, 4, 1, "", "arctan2"], [751, 4, 1, "", "arctan2d"], [752, 4, 1, "", "arg_sort_by"], [753, 4, 1, "", "arg_where"], [56, 4, 1, "", "build_info"], [754, 4, 1, "", "business_day_count"], [755, 4, 1, "", "coalesce"], [57, 4, 1, "", "collect_all"], [58, 4, 1, "", "collect_all_async"], [59, 4, 1, "", "concat"], [756, 4, 1, "", "concat_arr"], [757, 4, 1, "", "concat_list"], [758, 4, 1, "", "concat_str"], [759, 4, 1, "", "corr"], [760, 4, 1, "", "count"], [761, 4, 1, "", "cov"], [762, 4, 1, "", "cum_count"], [763, 4, 1, "", "cum_fold"], [764, 4, 1, "", "cum_reduce"], [765, 4, 1, "", "cum_sum"], [766, 4, 1, "", "cum_sum_horizontal"], [767, 4, 1, "", "date"], [768, 4, 1, "", "date_range"], [769, 4, 1, "", "date_ranges"], [770, 4, 1, "", "datetime"], [771, 4, 1, "", "datetime_range"], [772, 4, 1, "", "datetime_ranges"], [90, 4, 1, "", "disable_string_cache"], [773, 4, 1, "", "duration"], [774, 4, 1, "", "element"], [91, 4, 1, "", "enable_string_cache"], [92, 4, 1, "", "escape_regex"], [775, 4, 1, "", "exclude"], [776, 4, 1, "", "first"], [777, 4, 1, "", "fold"], [778, 4, 1, "", "format"], [123, 4, 1, "", "from_arrow"], [124, 4, 1, "", "from_dataframe"], [125, 4, 1, "", "from_dict"], [126, 4, 1, "", "from_dicts"], [779, 4, 1, "", "from_epoch"], [127, 4, 1, "", "from_numpy"], [128, 4, 1, "", "from_pandas"], [129, 4, 1, "", "from_records"], [130, 4, 1, "", "from_repr"], [131, 4, 1, "", "get_index_type"], [780, 4, 1, "", "groups"], [781, 4, 1, "", "head"], [782, 4, 1, "", "implode"], [783, 4, 1, "", "int_range"], [784, 4, 1, "", "int_ranges"], [134, 4, 1, "", "json_normalize"], [785, 4, 1, "", "last"], [786, 4, 1, "", "len"], [787, 4, 1, "", "linear_space"], [788, 4, 1, "", "lit"], [789, 4, 1, "", "map_batches"], [790, 4, 1, "", "map_groups"], [791, 4, 1, "", "max"], [792, 4, 1, "", "max_horizontal"], [793, 4, 1, "", "mean"], [794, 4, 1, "", "mean_horizontal"], [795, 4, 1, "", "median"], [796, 4, 1, "", "min"], [797, 4, 1, "", "min_horizontal"], [798, 4, 1, "", "n_unique"], [799, 4, 1, "", "nth"], [800, 4, 1, "", "ones"], [801, 4, 1, "", "quantile"], [136, 4, 1, "", "read_avro"], [137, 4, 1, "", "read_clipboard"], [138, 4, 1, "", "read_csv"], [139, 4, 1, "", "read_csv_batched"], [140, 4, 1, "", "read_database"], [141, 4, 1, "", "read_database_uri"], [142, 4, 1, "", "read_delta"], [143, 4, 1, "", "read_excel"], [144, 4, 1, "", "read_ipc"], [145, 4, 1, "", "read_ipc_schema"], [146, 4, 1, "", "read_ipc_stream"], [147, 4, 1, "", "read_json"], [148, 4, 1, "", "read_ndjson"], [149, 4, 1, "", "read_ods"], [150, 4, 1, "", "read_parquet"], [151, 4, 1, "", "read_parquet_schema"], [802, 4, 1, "", "reduce"], [803, 4, 1, "", "repeat"], [804, 4, 1, "", "rolling_corr"], [805, 4, 1, "", "rolling_cov"], [152, 4, 1, "", "scan_csv"], [153, 4, 1, "", "scan_delta"], [154, 4, 1, "", "scan_iceberg"], [155, 4, 1, "", "scan_ipc"], [156, 4, 1, "", "scan_ndjson"], [157, 4, 1, "", "scan_parquet"], [158, 4, 1, "", "scan_pyarrow_dataset"], [806, 4, 1, "", "select"], [948, 7, 0, "-", "selectors"], [159, 4, 1, "", "set_random_seed"], [160, 4, 1, "", "show_versions"], [807, 4, 1, "", "sql"], [808, 4, 1, "", "sql_expr"], [809, 4, 1, "", "std"], [810, 4, 1, "", "struct"], [811, 4, 1, "", "sum"], [812, 4, 1, "", "sum_horizontal"], [813, 4, 1, "", "tail"], [174, 4, 1, "", "thread_pool_size"], [175, 4, 1, "", "threadpool_size"], [814, 4, 1, "", "time"], [815, 4, 1, "", "time_range"], [816, 4, 1, "", "time_ranges"], [176, 4, 1, "", "using_string_cache"], [817, 4, 1, "", "var"], [818, 4, 1, "", "when"], [819, 4, 1, "", "zeros"]], "polars.Catalog": [[177, 1, 1, "", "__init__"], [178, 1, 1, "", "get_table_info"], [179, 1, 1, "", "list_catalogs"], [180, 1, 1, "", "list_namespaces"], [181, 1, 1, "", "list_tables"], [182, 1, 1, "", "scan_table"]], "polars.Config": [[2, 1, 1, "", "load"], [3, 1, 1, "", "load_from_file"], [4, 1, 1, "", "restore_defaults"], [5, 1, 1, "", "save"], [6, 1, 1, "", "save_to_file"], [7, 1, 1, "", "set_ascii_tables"], [8, 1, 1, "", "set_auto_structify"], [9, 1, 1, "", "set_decimal_separator"], [10, 1, 1, "", "set_float_precision"], [11, 1, 1, "", "set_fmt_float"], [12, 1, 1, "", "set_fmt_str_lengths"], [13, 1, 1, "", "set_fmt_table_cell_list_len"], [14, 1, 1, "", "set_streaming_chunk_size"], [15, 1, 1, "", "set_tbl_cell_alignment"], [16, 1, 1, "", "set_tbl_cell_numeric_alignment"], [17, 1, 1, "", "set_tbl_cols"], [18, 1, 1, "", "set_tbl_column_data_type_inline"], [19, 1, 1, "", "set_tbl_dataframe_shape_below"], [20, 1, 1, "", "set_tbl_formatting"], [21, 1, 1, "", "set_tbl_hide_column_data_types"], [22, 1, 1, "", "set_tbl_hide_column_names"], [23, 1, 1, "", "set_tbl_hide_dataframe_shape"], [24, 1, 1, "", "set_tbl_hide_dtype_separator"], [25, 1, 1, "", "set_tbl_rows"], [26, 1, 1, "", "set_tbl_width_chars"], [27, 1, 1, "", "set_thousands_separator"], [28, 1, 1, "", "set_trim_decimal_zeros"], [29, 1, 1, "", "set_verbose"], [30, 1, 1, "", "state"]], "polars.CredentialProvider": [[31, 1, 1, "", "__init__"]], "polars.CredentialProviderAWS": [[32, 1, 1, "", "__init__"]], "polars.CredentialProviderAzure": [[33, 1, 1, "", "__init__"]], "polars.CredentialProviderGCP": [[34, 1, 1, "", "__init__"]], "polars.DataFrame": [[194, 1, 1, "", "__array__"], [195, 1, 1, "", "__arrow_c_stream__"], [196, 1, 1, "", "__dataframe__"], [197, 1, 1, "", "__getitem__"], [198, 1, 1, "", "approx_n_unique"], [199, 1, 1, "", "bottom_k"], [200, 1, 1, "", "cast"], [201, 1, 1, "", "clear"], [202, 1, 1, "", "clone"], [203, 1, 1, "", "collect_schema"], [204, 2, 1, "", "columns"], [205, 1, 1, "", "corr"], [206, 1, 1, "", "count"], [207, 1, 1, "", "describe"], [208, 1, 1, "", "deserialize"], [209, 1, 1, "", "drop"], [210, 1, 1, "", "drop_in_place"], [211, 1, 1, "", "drop_nans"], [212, 1, 1, "", "drop_nulls"], [213, 2, 1, "", "dtypes"], [214, 1, 1, "", "equals"], [215, 1, 1, "", "estimated_size"], [216, 1, 1, "", "explode"], [217, 1, 1, "", "extend"], [218, 1, 1, "", "fill_nan"], [219, 1, 1, "", "fill_null"], [220, 1, 1, "", "filter"], [221, 2, 1, "", "flags"], [222, 1, 1, "", "fold"], [223, 1, 1, "", "gather_every"], [224, 1, 1, "", "get_column"], [225, 1, 1, "", "get_column_index"], [226, 1, 1, "", "get_columns"], [227, 1, 1, "", "glimpse"], [228, 1, 1, "", "group_by"], [229, 1, 1, "", "group_by_dynamic"], [230, 1, 1, "", "hash_rows"], [231, 1, 1, "", "head"], [232, 2, 1, "", "height"], [233, 1, 1, "", "hstack"], [234, 1, 1, "", "insert_column"], [235, 1, 1, "", "interpolate"], [236, 1, 1, "", "is_duplicated"], [237, 1, 1, "", "is_empty"], [238, 1, 1, "", "is_unique"], [239, 1, 1, "", "item"], [240, 1, 1, "", "iter_columns"], [241, 1, 1, "", "iter_rows"], [242, 1, 1, "", "iter_slices"], [243, 1, 1, "", "join"], [244, 1, 1, "", "join_asof"], [245, 1, 1, "", "join_where"], [246, 1, 1, "", "lazy"], [247, 1, 1, "", "limit"], [248, 1, 1, "", "map_rows"], [249, 1, 1, "", "max"], [250, 1, 1, "", "max_horizontal"], [251, 1, 1, "", "mean"], [252, 1, 1, "", "mean_horizontal"], [253, 1, 1, "", "median"], [254, 1, 1, "", "melt"], [255, 1, 1, "", "merge_sorted"], [256, 1, 1, "", "min"], [257, 1, 1, "", "min_horizontal"], [258, 1, 1, "", "n_chunks"], [259, 1, 1, "", "n_unique"], [260, 1, 1, "", "null_count"], [261, 1, 1, "", "partition_by"], [262, 1, 1, "", "pipe"], [263, 1, 1, "", "pivot"], [341, 2, 1, "", "plot"], [264, 1, 1, "", "product"], [265, 1, 1, "", "quantile"], [266, 1, 1, "", "rechunk"], [267, 1, 1, "", "rename"], [268, 1, 1, "", "replace_column"], [269, 1, 1, "", "reverse"], [270, 1, 1, "", "rolling"], [271, 1, 1, "", "row"], [272, 1, 1, "", "rows"], [273, 1, 1, "", "rows_by_key"], [274, 1, 1, "", "sample"], [275, 2, 1, "", "schema"], [276, 1, 1, "", "select"], [277, 1, 1, "", "select_seq"], [278, 1, 1, "", "serialize"], [279, 1, 1, "", "set_sorted"], [280, 2, 1, "", "shape"], [281, 1, 1, "", "shift"], [282, 1, 1, "", "shrink_to_fit"], [283, 1, 1, "", "slice"], [284, 1, 1, "", "sort"], [285, 1, 1, "", "sql"], [286, 1, 1, "", "std"], [342, 2, 1, "", "style"], [287, 1, 1, "", "sum"], [288, 1, 1, "", "sum_horizontal"], [289, 1, 1, "", "tail"], [290, 1, 1, "", "to_arrow"], [291, 1, 1, "", "to_dict"], [292, 1, 1, "", "to_dicts"], [293, 1, 1, "", "to_dummies"], [294, 1, 1, "", "to_init_repr"], [295, 1, 1, "", "to_jax"], [296, 1, 1, "", "to_numpy"], [297, 1, 1, "", "to_pandas"], [298, 1, 1, "", "to_series"], [299, 1, 1, "", "to_struct"], [300, 1, 1, "", "to_torch"], [301, 1, 1, "", "top_k"], [302, 1, 1, "", "transpose"], [303, 1, 1, "", "unique"], [304, 1, 1, "", "unnest"], [305, 1, 1, "", "unpivot"], [306, 1, 1, "", "unstack"], [307, 1, 1, "", "update"], [308, 1, 1, "", "upsample"], [309, 1, 1, "", "var"], [310, 1, 1, "", "vstack"], [311, 2, 1, "", "width"], [312, 1, 1, "", "with_columns"], [313, 1, 1, "", "with_columns_seq"], [314, 1, 1, "", "with_row_count"], [315, 1, 1, "", "with_row_index"], [35, 1, 1, "", "write_avro"], [36, 1, 1, "", "write_clipboard"], [37, 1, 1, "", "write_csv"], [38, 1, 1, "", "write_database"], [39, 1, 1, "", "write_delta"], [40, 1, 1, "", "write_excel"], [41, 1, 1, "", "write_ipc"], [42, 1, 1, "", "write_ipc_stream"], [43, 1, 1, "", "write_json"], [44, 1, 1, "", "write_ndjson"], [45, 1, 1, "", "write_parquet"]], "polars.Expr": [[346, 1, 1, "", "abs"], [347, 1, 1, "", "add"], [348, 1, 1, "", "agg_groups"], [349, 1, 1, "", "alias"], [350, 1, 1, "", "all"], [351, 1, 1, "", "and_"], [352, 1, 1, "", "any"], [353, 1, 1, "", "append"], [354, 1, 1, "", "approx_n_unique"], [355, 1, 1, "", "arccos"], [356, 1, 1, "", "arccosh"], [357, 1, 1, "", "arcsin"], [358, 1, 1, "", "arcsinh"], [359, 1, 1, "", "arctan"], [360, 1, 1, "", "arctanh"], [361, 1, 1, "", "arg_max"], [362, 1, 1, "", "arg_min"], [363, 1, 1, "", "arg_sort"], [364, 1, 1, "", "arg_true"], [365, 1, 1, "", "arg_unique"], [390, 1, 1, "", "backward_fill"], [398, 1, 1, "", "bitwise_and"], [399, 1, 1, "", "bitwise_count_ones"], [400, 1, 1, "", "bitwise_count_zeros"], [401, 1, 1, "", "bitwise_leading_ones"], [402, 1, 1, "", "bitwise_leading_zeros"], [403, 1, 1, "", "bitwise_or"], [404, 1, 1, "", "bitwise_trailing_ones"], [405, 1, 1, "", "bitwise_trailing_zeros"], [406, 1, 1, "", "bitwise_xor"], [407, 1, 1, "", "bottom_k"], [408, 1, 1, "", "bottom_k_by"], [409, 1, 1, "", "cast"], [415, 1, 1, "", "cbrt"], [416, 1, 1, "", "ceil"], [417, 1, 1, "", "clip"], [418, 1, 1, "", "cos"], [419, 1, 1, "", "cosh"], [420, 1, 1, "", "cot"], [421, 1, 1, "", "count"], [422, 1, 1, "", "cum_count"], [423, 1, 1, "", "cum_max"], [424, 1, 1, "", "cum_min"], [425, 1, 1, "", "cum_prod"], [426, 1, 1, "", "cum_sum"], [427, 1, 1, "", "cumulative_eval"], [428, 1, 1, "", "cut"], [429, 1, 1, "", "degrees"], [430, 1, 1, "", "deserialize"], [431, 1, 1, "", "diff"], [432, 1, 1, "", "dot"], [433, 1, 1, "", "drop_nans"], [434, 1, 1, "", "drop_nulls"], [480, 1, 1, "", "entropy"], [481, 1, 1, "", "eq"], [482, 1, 1, "", "eq_missing"], [483, 1, 1, "", "ewm_mean"], [484, 1, 1, "", "ewm_mean_by"], [485, 1, 1, "", "ewm_std"], [486, 1, 1, "", "ewm_var"], [487, 1, 1, "", "exclude"], [488, 1, 1, "", "exp"], [489, 1, 1, "", "explode"], [490, 1, 1, "", "extend_constant"], [491, 1, 1, "", "fill_nan"], [492, 1, 1, "", "fill_null"], [493, 1, 1, "", "filter"], [494, 1, 1, "", "first"], [495, 1, 1, "", "flatten"], [496, 1, 1, "", "floor"], [497, 1, 1, "", "floordiv"], [498, 1, 1, "", "forward_fill"], [499, 1, 1, "", "from_json"], [500, 1, 1, "", "gather"], [501, 1, 1, "", "gather_every"], [502, 1, 1, "", "ge"], [503, 1, 1, "", "get"], [504, 1, 1, "", "gt"], [505, 1, 1, "", "has_nulls"], [506, 1, 1, "", "hash"], [507, 1, 1, "", "head"], [508, 1, 1, "", "hist"], [509, 1, 1, "", "implode"], [510, 1, 1, "", "index_of"], [511, 1, 1, "", "inspect"], [512, 1, 1, "", "interpolate"], [513, 1, 1, "", "interpolate_by"], [514, 1, 1, "", "is_between"], [515, 1, 1, "", "is_duplicated"], [516, 1, 1, "", "is_finite"], [517, 1, 1, "", "is_first_distinct"], [518, 1, 1, "", "is_in"], [519, 1, 1, "", "is_infinite"], [520, 1, 1, "", "is_last_distinct"], [521, 1, 1, "", "is_nan"], [522, 1, 1, "", "is_not_nan"], [523, 1, 1, "", "is_not_null"], [524, 1, 1, "", "is_null"], [525, 1, 1, "", "is_unique"], [526, 1, 1, "", "kurtosis"], [527, 1, 1, "", "last"], [528, 1, 1, "", "le"], [529, 1, 1, "", "len"], [530, 1, 1, "", "limit"], [571, 1, 1, "", "log"], [572, 1, 1, "", "log10"], [573, 1, 1, "", "log1p"], [574, 1, 1, "", "lower_bound"], [575, 1, 1, "", "lt"], [576, 1, 1, "", "map_batches"], [577, 1, 1, "", "map_elements"], [578, 1, 1, "", "max"], [579, 1, 1, "", "mean"], [580, 1, 1, "", "median"], [596, 1, 1, "", "min"], [597, 1, 1, "", "mod"], [598, 1, 1, "", "mode"], [599, 1, 1, "", "mul"], [600, 1, 1, "", "n_unique"], [610, 1, 1, "", "nan_max"], [611, 1, 1, "", "nan_min"], [612, 1, 1, "", "ne"], [613, 1, 1, "", "ne_missing"], [614, 1, 1, "", "neg"], [615, 1, 1, "", "not_"], [616, 1, 1, "", "null_count"], [617, 1, 1, "", "or_"], [618, 1, 1, "", "over"], [619, 1, 1, "", "pct_change"], [620, 1, 1, "", "peak_max"], [621, 1, 1, "", "peak_min"], [622, 1, 1, "", "pipe"], [623, 1, 1, "", "pow"], [624, 1, 1, "", "product"], [625, 1, 1, "", "qcut"], [626, 1, 1, "", "quantile"], [627, 1, 1, "", "radians"], [628, 1, 1, "", "rank"], [629, 1, 1, "", "rechunk"], [630, 1, 1, "", "reinterpret"], [631, 1, 1, "", "repeat_by"], [632, 1, 1, "", "replace"], [633, 1, 1, "", "replace_strict"], [634, 1, 1, "", "reshape"], [635, 1, 1, "", "reverse"], [636, 1, 1, "", "rle"], [637, 1, 1, "", "rle_id"], [638, 1, 1, "", "rolling"], [639, 1, 1, "", "rolling_map"], [640, 1, 1, "", "rolling_max"], [641, 1, 1, "", "rolling_max_by"], [642, 1, 1, "", "rolling_mean"], [643, 1, 1, "", "rolling_mean_by"], [644, 1, 1, "", "rolling_median"], [645, 1, 1, "", "rolling_median_by"], [646, 1, 1, "", "rolling_min"], [647, 1, 1, "", "rolling_min_by"], [648, 1, 1, "", "rolling_quantile"], [649, 1, 1, "", "rolling_quantile_by"], [650, 1, 1, "", "rolling_skew"], [651, 1, 1, "", "rolling_std"], [652, 1, 1, "", "rolling_std_by"], [653, 1, 1, "", "rolling_sum"], [654, 1, 1, "", "rolling_sum_by"], [655, 1, 1, "", "rolling_var"], [656, 1, 1, "", "rolling_var_by"], [657, 1, 1, "", "round"], [658, 1, 1, "", "round_sig_figs"], [659, 1, 1, "", "sample"], [660, 1, 1, "", "search_sorted"], [661, 1, 1, "", "set_sorted"], [662, 1, 1, "", "shift"], [663, 1, 1, "", "shrink_dtype"], [664, 1, 1, "", "shuffle"], [665, 1, 1, "", "sign"], [666, 1, 1, "", "sin"], [667, 1, 1, "", "sinh"], [668, 1, 1, "", "skew"], [669, 1, 1, "", "slice"], [670, 1, 1, "", "sort"], [671, 1, 1, "", "sort_by"], [672, 1, 1, "", "sqrt"], [673, 1, 1, "", "std"], [728, 1, 1, "", "sub"], [729, 1, 1, "", "sum"], [730, 1, 1, "", "tail"], [731, 1, 1, "", "tan"], [732, 1, 1, "", "tanh"], [733, 1, 1, "", "to_physical"], [734, 1, 1, "", "top_k"], [735, 1, 1, "", "top_k_by"], [736, 1, 1, "", "truediv"], [737, 1, 1, "", "unique"], [738, 1, 1, "", "unique_counts"], [739, 1, 1, "", "upper_bound"], [740, 1, 1, "", "value_counts"], [741, 1, 1, "", "var"], [742, 1, 1, "", "where"], [743, 1, 1, "", "xor"]], "polars.Expr.arr": [[366, 1, 1, "", "all"], [367, 1, 1, "", "any"], [368, 1, 1, "", "arg_max"], [369, 1, 1, "", "arg_min"], [370, 1, 1, "", "contains"], [371, 1, 1, "", "count_matches"], [372, 1, 1, "", "explode"], [373, 1, 1, "", "first"], [374, 1, 1, "", "get"], [375, 1, 1, "", "join"], [376, 1, 1, "", "last"], [377, 1, 1, "", "max"], [378, 1, 1, "", "median"], [379, 1, 1, "", "min"], [380, 1, 1, "", "n_unique"], [381, 1, 1, "", "reverse"], [382, 1, 1, "", "shift"], [383, 1, 1, "", "sort"], [384, 1, 1, "", "std"], [385, 1, 1, "", "sum"], [386, 1, 1, "", "to_list"], [387, 1, 1, "", "to_struct"], [388, 1, 1, "", "unique"], [389, 1, 1, "", "var"]], "polars.Expr.bin": [[391, 1, 1, "", "contains"], [392, 1, 1, "", "decode"], [393, 1, 1, "", "encode"], [394, 1, 1, "", "ends_with"], [395, 1, 1, "", "reinterpret"], [396, 1, 1, "", "size"], [397, 1, 1, "", "starts_with"]], "polars.Expr.cat": [[410, 1, 1, "", "ends_with"], [411, 1, 1, "", "get_categories"], [412, 1, 1, "", "len_bytes"], [413, 1, 1, "", "len_chars"], [414, 1, 1, "", "starts_with"]], "polars.Expr.dt": [[435, 1, 1, "", "add_business_days"], [436, 1, 1, "", "base_utc_offset"], [437, 1, 1, "", "cast_time_unit"], [438, 1, 1, "", "century"], [439, 1, 1, "", "combine"], [440, 1, 1, "", "convert_time_zone"], [441, 1, 1, "", "date"], [442, 1, 1, "", "datetime"], [443, 1, 1, "", "day"], [444, 1, 1, "", "dst_offset"], [445, 1, 1, "", "epoch"], [446, 1, 1, "", "hour"], [447, 1, 1, "", "is_leap_year"], [448, 1, 1, "", "iso_year"], [449, 1, 1, "", "microsecond"], [450, 1, 1, "", "millennium"], [451, 1, 1, "", "millisecond"], [452, 1, 1, "", "minute"], [453, 1, 1, "", "month"], [454, 1, 1, "", "month_end"], [455, 1, 1, "", "month_start"], [456, 1, 1, "", "nanosecond"], [457, 1, 1, "", "offset_by"], [458, 1, 1, "", "ordinal_day"], [459, 1, 1, "", "quarter"], [460, 1, 1, "", "replace"], [461, 1, 1, "", "replace_time_zone"], [462, 1, 1, "", "round"], [463, 1, 1, "", "second"], [464, 1, 1, "", "strftime"], [465, 1, 1, "", "time"], [466, 1, 1, "", "timestamp"], [467, 1, 1, "", "to_string"], [468, 1, 1, "", "total_days"], [469, 1, 1, "", "total_hours"], [470, 1, 1, "", "total_microseconds"], [471, 1, 1, "", "total_milliseconds"], [472, 1, 1, "", "total_minutes"], [473, 1, 1, "", "total_nanoseconds"], [474, 1, 1, "", "total_seconds"], [475, 1, 1, "", "truncate"], [476, 1, 1, "", "week"], [477, 1, 1, "", "weekday"], [478, 1, 1, "", "with_time_unit"], [479, 1, 1, "", "year"]], "polars.Expr.list": [[531, 1, 1, "", "all"], [532, 1, 1, "", "any"], [533, 1, 1, "", "arg_max"], [534, 1, 1, "", "arg_min"], [535, 1, 1, "", "concat"], [536, 1, 1, "", "contains"], [537, 1, 1, "", "count_matches"], [538, 1, 1, "", "diff"], [539, 1, 1, "", "drop_nulls"], [540, 1, 1, "", "eval"], [541, 1, 1, "", "explode"], [542, 1, 1, "", "first"], [543, 1, 1, "", "gather"], [544, 1, 1, "", "gather_every"], [545, 1, 1, "", "get"], [546, 1, 1, "", "head"], [547, 1, 1, "", "join"], [548, 1, 1, "", "last"], [549, 1, 1, "", "len"], [550, 1, 1, "", "max"], [551, 1, 1, "", "mean"], [552, 1, 1, "", "median"], [553, 1, 1, "", "min"], [554, 1, 1, "", "n_unique"], [555, 1, 1, "", "reverse"], [556, 1, 1, "", "sample"], [557, 1, 1, "", "set_difference"], [558, 1, 1, "", "set_intersection"], [559, 1, 1, "", "set_symmetric_difference"], [560, 1, 1, "", "set_union"], [561, 1, 1, "", "shift"], [562, 1, 1, "", "slice"], [563, 1, 1, "", "sort"], [564, 1, 1, "", "std"], [565, 1, 1, "", "sum"], [566, 1, 1, "", "tail"], [567, 1, 1, "", "to_array"], [568, 1, 1, "", "to_struct"], [569, 1, 1, "", "unique"], [570, 1, 1, "", "var"]], "polars.Expr.meta": [[581, 1, 1, "", "eq"], [582, 1, 1, "", "has_multiple_outputs"], [583, 1, 1, "", "is_column"], [584, 1, 1, "", "is_column_selection"], [585, 1, 1, "", "is_literal"], [586, 1, 1, "", "is_regex_projection"], [587, 1, 1, "", "ne"], [588, 1, 1, "", "output_name"], [589, 1, 1, "", "pop"], [590, 1, 1, "", "root_names"], [591, 1, 1, "", "serialize"], [592, 1, 1, "", "show_graph"], [593, 1, 1, "", "tree_format"], [594, 1, 1, "", "undo_aliases"], [595, 1, 1, "", "write_json"]], "polars.Expr.name": [[601, 1, 1, "", "keep"], [602, 1, 1, "", "map"], [603, 1, 1, "", "map_fields"], [604, 1, 1, "", "prefix"], [605, 1, 1, "", "prefix_fields"], [606, 1, 1, "", "suffix"], [607, 1, 1, "", "suffix_fields"], [608, 1, 1, "", "to_lowercase"], [609, 1, 1, "", "to_uppercase"]], "polars.Expr.str": [[674, 1, 1, "", "concat"], [675, 1, 1, "", "contains"], [676, 1, 1, "", "contains_any"], [677, 1, 1, "", "count_matches"], [678, 1, 1, "", "decode"], [679, 1, 1, "", "encode"], [680, 1, 1, "", "ends_with"], [681, 1, 1, "", "escape_regex"], [682, 1, 1, "", "explode"], [683, 1, 1, "", "extract"], [684, 1, 1, "", "extract_all"], [685, 1, 1, "", "extract_groups"], [686, 1, 1, "", "extract_many"], [687, 1, 1, "", "find"], [688, 1, 1, "", "find_many"], [689, 1, 1, "", "head"], [690, 1, 1, "", "join"], [691, 1, 1, "", "json_decode"], [692, 1, 1, "", "json_path_match"], [693, 1, 1, "", "len_bytes"], [694, 1, 1, "", "len_chars"], [695, 1, 1, "", "normalize"], [696, 1, 1, "", "pad_end"], [697, 1, 1, "", "pad_start"], [698, 1, 1, "", "replace"], [699, 1, 1, "", "replace_all"], [700, 1, 1, "", "replace_many"], [701, 1, 1, "", "reverse"], [702, 1, 1, "", "slice"], [703, 1, 1, "", "split"], [704, 1, 1, "", "split_exact"], [705, 1, 1, "", "splitn"], [706, 1, 1, "", "starts_with"], [707, 1, 1, "", "strip_chars"], [708, 1, 1, "", "strip_chars_end"], [709, 1, 1, "", "strip_chars_start"], [710, 1, 1, "", "strip_prefix"], [711, 1, 1, "", "strip_suffix"], [712, 1, 1, "", "strptime"], [713, 1, 1, "", "tail"], [714, 1, 1, "", "to_date"], [715, 1, 1, "", "to_datetime"], [716, 1, 1, "", "to_decimal"], [717, 1, 1, "", "to_integer"], [718, 1, 1, "", "to_lowercase"], [719, 1, 1, "", "to_time"], [720, 1, 1, "", "to_titlecase"], [721, 1, 1, "", "to_uppercase"], [722, 1, 1, "", "zfill"]], "polars.Expr.struct": [[723, 1, 1, "", "field"], [724, 1, 1, "", "json_encode"], [725, 1, 1, "", "rename_fields"], [726, 1, 1, "", "unnest"], [727, 1, 1, "", "with_fields"]], "polars.LazyFrame": [[843, 1, 1, "", "approx_n_unique"], [844, 1, 1, "", "bottom_k"], [845, 1, 1, "", "cache"], [846, 1, 1, "", "cast"], [847, 1, 1, "", "clear"], [848, 1, 1, "", "clone"], [849, 1, 1, "", "collect"], [850, 1, 1, "", "collect_async"], [851, 1, 1, "", "collect_schema"], [852, 2, 1, "", "columns"], [853, 1, 1, "", "count"], [854, 1, 1, "", "describe"], [855, 1, 1, "", "deserialize"], [856, 1, 1, "", "drop"], [857, 1, 1, "", "drop_nans"], [858, 1, 1, "", "drop_nulls"], [859, 2, 1, "", "dtypes"], [860, 1, 1, "", "explain"], [861, 1, 1, "", "explode"], [862, 1, 1, "", "fill_nan"], [863, 1, 1, "", "fill_null"], [864, 1, 1, "", "filter"], [865, 1, 1, "", "first"], [866, 1, 1, "", "gather_every"], [867, 1, 1, "", "group_by"], [868, 1, 1, "", "group_by_dynamic"], [869, 1, 1, "", "head"], [870, 1, 1, "", "inspect"], [871, 1, 1, "", "interpolate"], [872, 1, 1, "", "join"], [873, 1, 1, "", "join_asof"], [874, 1, 1, "", "join_where"], [875, 1, 1, "", "last"], [876, 1, 1, "", "lazy"], [877, 1, 1, "", "limit"], [878, 1, 1, "", "map_batches"], [879, 1, 1, "", "max"], [880, 1, 1, "", "mean"], [881, 1, 1, "", "median"], [882, 1, 1, "", "melt"], [883, 1, 1, "", "merge_sorted"], [884, 1, 1, "", "min"], [885, 1, 1, "", "null_count"], [886, 1, 1, "", "pipe"], [887, 1, 1, "", "profile"], [888, 1, 1, "", "quantile"], [889, 1, 1, "", "rename"], [890, 1, 1, "", "reverse"], [891, 1, 1, "", "rolling"], [892, 2, 1, "", "schema"], [893, 1, 1, "", "select"], [894, 1, 1, "", "select_seq"], [895, 1, 1, "", "serialize"], [896, 1, 1, "", "set_sorted"], [897, 1, 1, "", "shift"], [898, 1, 1, "", "show_graph"], [46, 1, 1, "", "sink_csv"], [47, 1, 1, "", "sink_ipc"], [48, 1, 1, "", "sink_ndjson"], [49, 1, 1, "", "sink_parquet"], [899, 1, 1, "", "slice"], [900, 1, 1, "", "sort"], [901, 1, 1, "", "sql"], [902, 1, 1, "", "std"], [903, 1, 1, "", "sum"], [904, 1, 1, "", "tail"], [905, 1, 1, "", "top_k"], [906, 1, 1, "", "unique"], [907, 1, 1, "", "unnest"], [908, 1, 1, "", "unpivot"], [909, 1, 1, "", "update"], [910, 1, 1, "", "var"], [911, 2, 1, "", "width"], [912, 1, 1, "", "with_columns"], [913, 1, 1, "", "with_columns_seq"], [914, 1, 1, "", "with_context"], [915, 1, 1, "", "with_row_count"], [916, 1, 1, "", "with_row_index"]], "polars.SQLContext": [[1365, 1, 1, "", "__enter__"], [1365, 1, 1, "", "__exit__"], [1365, 1, 1, "", "__init__"], [1346, 1, 1, "", "execute"], [1347, 1, 1, "", "execute_global"], [1348, 1, 1, "", "register"], [1349, 1, 1, "", "register_globals"], [1350, 1, 1, "", "register_many"], [1351, 1, 1, "", "tables"], [1352, 1, 1, "", "unregister"]], "polars.Series": [[950, 1, 1, "", "__array__"], [951, 1, 1, "", "__arrow_c_stream__"], [952, 1, 1, "", "__getitem__"], [953, 1, 1, "", "abs"], [954, 1, 1, "", "alias"], [955, 1, 1, "", "all"], [956, 1, 1, "", "any"], [957, 1, 1, "", "append"], [958, 1, 1, "", "approx_n_unique"], [959, 1, 1, "", "arccos"], [960, 1, 1, "", "arccosh"], [961, 1, 1, "", "arcsin"], [962, 1, 1, "", "arcsinh"], [963, 1, 1, "", "arctan"], [964, 1, 1, "", "arctanh"], [965, 1, 1, "", "arg_max"], [966, 1, 1, "", "arg_min"], [967, 1, 1, "", "arg_sort"], [968, 1, 1, "", "arg_true"], [969, 1, 1, "", "arg_unique"], [1001, 1, 1, "", "bitwise_and"], [1002, 1, 1, "", "bitwise_count_ones"], [1003, 1, 1, "", "bitwise_count_zeros"], [1004, 1, 1, "", "bitwise_leading_ones"], [1005, 1, 1, "", "bitwise_leading_zeros"], [1006, 1, 1, "", "bitwise_or"], [1007, 1, 1, "", "bitwise_trailing_ones"], [1008, 1, 1, "", "bitwise_trailing_zeros"], [1009, 1, 1, "", "bitwise_xor"], [1010, 1, 1, "", "bottom_k"], [1011, 1, 1, "", "cast"], [1020, 1, 1, "", "cbrt"], [1021, 1, 1, "", "ceil"], [1022, 1, 1, "", "chunk_lengths"], [1023, 1, 1, "", "clear"], [1024, 1, 1, "", "clip"], [1025, 1, 1, "", "clone"], [1026, 1, 1, "", "cos"], [1027, 1, 1, "", "cosh"], [1028, 1, 1, "", "cot"], [1029, 1, 1, "", "count"], [1030, 1, 1, "", "cum_count"], [1031, 1, 1, "", "cum_max"], [1032, 1, 1, "", "cum_min"], [1033, 1, 1, "", "cum_prod"], [1034, 1, 1, "", "cum_sum"], [1035, 1, 1, "", "cumulative_eval"], [1036, 1, 1, "", "cut"], [1037, 1, 1, "", "describe"], [1038, 1, 1, "", "diff"], [1039, 1, 1, "", "dot"], [1040, 1, 1, "", "drop_nans"], [1041, 1, 1, "", "drop_nulls"], [1091, 2, 1, "", "dtype"], [1092, 1, 1, "", "entropy"], [1093, 1, 1, "", "eq"], [1094, 1, 1, "", "eq_missing"], [1095, 1, 1, "", "equals"], [1096, 1, 1, "", "estimated_size"], [1097, 1, 1, "", "ewm_mean"], [1098, 1, 1, "", "ewm_mean_by"], [1099, 1, 1, "", "ewm_std"], [1100, 1, 1, "", "ewm_var"], [1101, 1, 1, "", "exp"], [1102, 1, 1, "", "explode"], [1103, 1, 1, "", "extend"], [1104, 1, 1, "", "extend_constant"], [1105, 1, 1, "", "fill_nan"], [1106, 1, 1, "", "fill_null"], [1107, 1, 1, "", "filter"], [1108, 1, 1, "", "first"], [1109, 2, 1, "", "flags"], [1110, 1, 1, "", "floor"], [1111, 1, 1, "", "gather"], [1112, 1, 1, "", "gather_every"], [1113, 1, 1, "", "ge"], [1114, 1, 1, "", "get_chunks"], [1115, 1, 1, "", "gt"], [1116, 1, 1, "", "has_nulls"], [1117, 1, 1, "", "has_validity"], [1118, 1, 1, "", "hash"], [1119, 1, 1, "", "head"], [1120, 1, 1, "", "hist"], [1121, 1, 1, "", "implode"], [1122, 1, 1, "", "index_of"], [1123, 1, 1, "", "interpolate"], [1124, 1, 1, "", "interpolate_by"], [1125, 1, 1, "", "is_between"], [1126, 1, 1, "", "is_duplicated"], [1127, 1, 1, "", "is_empty"], [1128, 1, 1, "", "is_finite"], [1129, 1, 1, "", "is_first_distinct"], [1130, 1, 1, "", "is_in"], [1131, 1, 1, "", "is_infinite"], [1132, 1, 1, "", "is_last_distinct"], [1133, 1, 1, "", "is_nan"], [1134, 1, 1, "", "is_not_nan"], [1135, 1, 1, "", "is_not_null"], [1136, 1, 1, "", "is_null"], [1137, 1, 1, "", "is_sorted"], [1138, 1, 1, "", "is_unique"], [1139, 1, 1, "", "item"], [1140, 1, 1, "", "kurtosis"], [1141, 1, 1, "", "last"], [1142, 1, 1, "", "le"], [1143, 1, 1, "", "len"], [1144, 1, 1, "", "limit"], [1185, 1, 1, "", "log"], [1186, 1, 1, "", "log10"], [1187, 1, 1, "", "log1p"], [1188, 1, 1, "", "lower_bound"], [1189, 1, 1, "", "lt"], [1190, 1, 1, "", "map_elements"], [1191, 1, 1, "", "max"], [1192, 1, 1, "", "mean"], [1193, 1, 1, "", "median"], [1194, 1, 1, "", "min"], [1195, 1, 1, "", "mode"], [1196, 1, 1, "", "n_chunks"], [1197, 1, 1, "", "n_unique"], [1198, 2, 1, "", "name"], [1199, 1, 1, "", "nan_max"], [1200, 1, 1, "", "nan_min"], [1201, 1, 1, "", "ne"], [1202, 1, 1, "", "ne_missing"], [1203, 1, 1, "", "new_from_index"], [1204, 1, 1, "", "not_"], [1205, 1, 1, "", "null_count"], [1206, 1, 1, "", "pct_change"], [1207, 1, 1, "", "peak_max"], [1208, 1, 1, "", "peak_min"], [1342, 2, 1, "", "plot"], [1209, 1, 1, "", "pow"], [1210, 1, 1, "", "product"], [1211, 1, 1, "", "qcut"], [1212, 1, 1, "", "quantile"], [1213, 1, 1, "", "rank"], [1214, 1, 1, "", "rechunk"], [1215, 1, 1, "", "reinterpret"], [1216, 1, 1, "", "rename"], [1217, 1, 1, "", "replace"], [1218, 1, 1, "", "replace_strict"], [1219, 1, 1, "", "reshape"], [1220, 1, 1, "", "reverse"], [1221, 1, 1, "", "rle"], [1222, 1, 1, "", "rle_id"], [1223, 1, 1, "", "rolling_map"], [1224, 1, 1, "", "rolling_max"], [1225, 1, 1, "", "rolling_mean"], [1226, 1, 1, "", "rolling_median"], [1227, 1, 1, "", "rolling_min"], [1228, 1, 1, "", "rolling_quantile"], [1229, 1, 1, "", "rolling_skew"], [1230, 1, 1, "", "rolling_std"], [1231, 1, 1, "", "rolling_sum"], [1232, 1, 1, "", "rolling_var"], [1233, 1, 1, "", "round"], [1234, 1, 1, "", "round_sig_figs"], [1235, 1, 1, "", "sample"], [1236, 1, 1, "", "scatter"], [1237, 1, 1, "", "search_sorted"], [1238, 1, 1, "", "set"], [1239, 1, 1, "", "set_sorted"], [1240, 2, 1, "", "shape"], [1241, 1, 1, "", "shift"], [1242, 1, 1, "", "shrink_dtype"], [1243, 1, 1, "", "shrink_to_fit"], [1244, 1, 1, "", "shuffle"], [1245, 1, 1, "", "sign"], [1246, 1, 1, "", "sin"], [1247, 1, 1, "", "sinh"], [1248, 1, 1, "", "skew"], [1249, 1, 1, "", "slice"], [1250, 1, 1, "", "sort"], [1251, 1, 1, "", "sqrt"], [1252, 1, 1, "", "std"], [1308, 1, 1, "", "sum"], [1309, 1, 1, "", "tail"], [1310, 1, 1, "", "tan"], [1311, 1, 1, "", "tanh"], [1312, 1, 1, "", "to_arrow"], [1313, 1, 1, "", "to_dummies"], [1314, 1, 1, "", "to_frame"], [1315, 1, 1, "", "to_init_repr"], [1316, 1, 1, "", "to_jax"], [1317, 1, 1, "", "to_list"], [1318, 1, 1, "", "to_numpy"], [1319, 1, 1, "", "to_pandas"], [1320, 1, 1, "", "to_physical"], [1321, 1, 1, "", "to_torch"], [1322, 1, 1, "", "top_k"], [1323, 1, 1, "", "unique"], [1324, 1, 1, "", "unique_counts"], [1325, 1, 1, "", "upper_bound"], [1326, 1, 1, "", "value_counts"], [1327, 1, 1, "", "var"], [1328, 1, 1, "", "zip_with"]], "polars.Series.arr": [[970, 1, 1, "", "all"], [971, 1, 1, "", "any"], [972, 1, 1, "", "arg_max"], [973, 1, 1, "", "arg_min"], [974, 1, 1, "", "contains"], [975, 1, 1, "", "count_matches"], [976, 1, 1, "", "explode"], [977, 1, 1, "", "first"], [978, 1, 1, "", "get"], [979, 1, 1, "", "join"], [980, 1, 1, "", "last"], [981, 1, 1, "", "max"], [982, 1, 1, "", "median"], [983, 1, 1, "", "min"], [984, 1, 1, "", "n_unique"], [985, 1, 1, "", "reverse"], [986, 1, 1, "", "shift"], [987, 1, 1, "", "sort"], [988, 1, 1, "", "std"], [989, 1, 1, "", "sum"], [990, 1, 1, "", "to_list"], [991, 1, 1, "", "to_struct"], [992, 1, 1, "", "unique"], [993, 1, 1, "", "var"]], "polars.Series.bin": [[994, 1, 1, "", "contains"], [995, 1, 1, "", "decode"], [996, 1, 1, "", "encode"], [997, 1, 1, "", "ends_with"], [998, 1, 1, "", "reinterpret"], [999, 1, 1, "", "size"], [1000, 1, 1, "", "starts_with"]], "polars.Series.cat": [[1012, 1, 1, "", "ends_with"], [1013, 1, 1, "", "get_categories"], [1014, 1, 1, "", "is_local"], [1015, 1, 1, "", "len_bytes"], [1016, 1, 1, "", "len_chars"], [1017, 1, 1, "", "starts_with"], [1018, 1, 1, "", "to_local"], [1019, 1, 1, "", "uses_lexical_ordering"]], "polars.Series.dt": [[1042, 1, 1, "", "add_business_days"], [1043, 1, 1, "", "base_utc_offset"], [1044, 1, 1, "", "cast_time_unit"], [1045, 1, 1, "", "century"], [1046, 1, 1, "", "combine"], [1047, 1, 1, "", "convert_time_zone"], [1048, 1, 1, "", "date"], [1049, 1, 1, "", "datetime"], [1050, 1, 1, "", "day"], [1051, 1, 1, "", "dst_offset"], [1052, 1, 1, "", "epoch"], [1053, 1, 1, "", "hour"], [1054, 1, 1, "", "is_leap_year"], [1055, 1, 1, "", "iso_year"], [1056, 1, 1, "", "max"], [1057, 1, 1, "", "mean"], [1058, 1, 1, "", "median"], [1059, 1, 1, "", "microsecond"], [1060, 1, 1, "", "millennium"], [1061, 1, 1, "", "millisecond"], [1062, 1, 1, "", "min"], [1063, 1, 1, "", "minute"], [1064, 1, 1, "", "month"], [1065, 1, 1, "", "month_end"], [1066, 1, 1, "", "month_start"], [1067, 1, 1, "", "nanosecond"], [1068, 1, 1, "", "offset_by"], [1069, 1, 1, "", "ordinal_day"], [1070, 1, 1, "", "quarter"], [1071, 1, 1, "", "replace"], [1072, 1, 1, "", "replace_time_zone"], [1073, 1, 1, "", "round"], [1074, 1, 1, "", "second"], [1075, 1, 1, "", "strftime"], [1076, 1, 1, "", "time"], [1077, 1, 1, "", "timestamp"], [1078, 1, 1, "", "to_string"], [1079, 1, 1, "", "total_days"], [1080, 1, 1, "", "total_hours"], [1081, 1, 1, "", "total_microseconds"], [1082, 1, 1, "", "total_milliseconds"], [1083, 1, 1, "", "total_minutes"], [1084, 1, 1, "", "total_nanoseconds"], [1085, 1, 1, "", "total_seconds"], [1086, 1, 1, "", "truncate"], [1087, 1, 1, "", "week"], [1088, 1, 1, "", "weekday"], [1089, 1, 1, "", "with_time_unit"], [1090, 1, 1, "", "year"]], "polars.Series.list": [[1145, 1, 1, "", "all"], [1146, 1, 1, "", "any"], [1147, 1, 1, "", "arg_max"], [1148, 1, 1, "", "arg_min"], [1149, 1, 1, "", "concat"], [1150, 1, 1, "", "contains"], [1151, 1, 1, "", "count_matches"], [1152, 1, 1, "", "diff"], [1153, 1, 1, "", "drop_nulls"], [1154, 1, 1, "", "eval"], [1155, 1, 1, "", "explode"], [1156, 1, 1, "", "first"], [1157, 1, 1, "", "gather"], [1158, 1, 1, "", "gather_every"], [1159, 1, 1, "", "get"], [1160, 1, 1, "", "head"], [1161, 1, 1, "", "join"], [1162, 1, 1, "", "last"], [1163, 1, 1, "", "len"], [1164, 1, 1, "", "max"], [1165, 1, 1, "", "mean"], [1166, 1, 1, "", "median"], [1167, 1, 1, "", "min"], [1168, 1, 1, "", "n_unique"], [1169, 1, 1, "", "reverse"], [1170, 1, 1, "", "sample"], [1171, 1, 1, "", "set_difference"], [1172, 1, 1, "", "set_intersection"], [1173, 1, 1, "", "set_symmetric_difference"], [1174, 1, 1, "", "set_union"], [1175, 1, 1, "", "shift"], [1176, 1, 1, "", "slice"], [1177, 1, 1, "", "sort"], [1178, 1, 1, "", "std"], [1179, 1, 1, "", "sum"], [1180, 1, 1, "", "tail"], [1181, 1, 1, "", "to_array"], [1182, 1, 1, "", "to_struct"], [1183, 1, 1, "", "unique"], [1184, 1, 1, "", "var"]], "polars.Series.str": [[1253, 1, 1, "", "concat"], [1254, 1, 1, "", "contains"], [1255, 1, 1, "", "contains_any"], [1256, 1, 1, "", "count_matches"], [1257, 1, 1, "", "decode"], [1258, 1, 1, "", "encode"], [1259, 1, 1, "", "ends_with"], [1260, 1, 1, "", "escape_regex"], [1261, 1, 1, "", "explode"], [1262, 1, 1, "", "extract"], [1263, 1, 1, "", "extract_all"], [1264, 1, 1, "", "extract_groups"], [1265, 1, 1, "", "extract_many"], [1266, 1, 1, "", "find"], [1267, 1, 1, "", "find_many"], [1268, 1, 1, "", "head"], [1269, 1, 1, "", "join"], [1270, 1, 1, "", "json_decode"], [1271, 1, 1, "", "json_path_match"], [1272, 1, 1, "", "len_bytes"], [1273, 1, 1, "", "len_chars"], [1274, 1, 1, "", "normalize"], [1275, 1, 1, "", "pad_end"], [1276, 1, 1, "", "pad_start"], [1277, 1, 1, "", "replace"], [1278, 1, 1, "", "replace_all"], [1279, 1, 1, "", "replace_many"], [1280, 1, 1, "", "reverse"], [1281, 1, 1, "", "slice"], [1282, 1, 1, "", "split"], [1283, 1, 1, "", "split_exact"], [1284, 1, 1, "", "splitn"], [1285, 1, 1, "", "starts_with"], [1286, 1, 1, "", "strip_chars"], [1287, 1, 1, "", "strip_chars_end"], [1288, 1, 1, "", "strip_chars_start"], [1289, 1, 1, "", "strip_prefix"], [1290, 1, 1, "", "strip_suffix"], [1291, 1, 1, "", "strptime"], [1292, 1, 1, "", "tail"], [1293, 1, 1, "", "to_date"], [1294, 1, 1, "", "to_datetime"], [1295, 1, 1, "", "to_decimal"], [1296, 1, 1, "", "to_integer"], [1297, 1, 1, "", "to_lowercase"], [1298, 1, 1, "", "to_time"], [1299, 1, 1, "", "to_titlecase"], [1300, 1, 1, "", "to_uppercase"], [1301, 1, 1, "", "zfill"]], "polars.Series.struct": [[1302, 1, 1, "", "field"], [1303, 3, 1, "", "fields"], [1304, 1, 1, "", "json_encode"], [1305, 1, 1, "", "rename_fields"], [1306, 3, 1, "", "schema"], [1307, 1, 1, "", "unnest"]], "polars.StringCache": [[50, 1, 1, "", "__init__"]], "polars.api": [[52, 4, 1, "", "register_dataframe_namespace"], [53, 4, 1, "", "register_expr_namespace"], [54, 4, 1, "", "register_lazyframe_namespace"], [55, 4, 1, "", "register_series_namespace"]], "polars.catalog.unity": [[183, 0, 1, "", "CatalogInfo"], [184, 0, 1, "", "ColumnInfo"], [185, 5, 1, "", "DataSourceFormat"], [186, 0, 1, "", "NamespaceInfo"], [187, 0, 1, "", "TableInfo"], [189, 5, 1, "", "TableType"]], "polars.catalog.unity.CatalogInfo": [[183, 1, 1, "", "__init__"]], "polars.catalog.unity.ColumnInfo": [[184, 1, 1, "", "__init__"]], "polars.catalog.unity.NamespaceInfo": [[186, 1, 1, "", "__init__"]], "polars.catalog.unity.TableInfo": [[187, 1, 1, "", "__init__"], [188, 1, 1, "", "get_polars_schema"]], "polars.dataframe.group_by.GroupBy": [[316, 1, 1, "", "__iter__"], [317, 1, 1, "", "agg"], [318, 1, 1, "", "all"], [319, 1, 1, "", "count"], [320, 1, 1, "", "first"], [321, 1, 1, "", "head"], [322, 1, 1, "", "last"], [323, 1, 1, "", "len"], [324, 1, 1, "", "map_groups"], [325, 1, 1, "", "max"], [326, 1, 1, "", "mean"], [327, 1, 1, "", "median"], [328, 1, 1, "", "min"], [329, 1, 1, "", "n_unique"], [330, 1, 1, "", "quantile"], [331, 1, 1, "", "sum"], [332, 1, 1, "", "tail"]], "polars.datatypes": [[60, 0, 1, "", "Array"], [61, 0, 1, "", "Binary"], [62, 0, 1, "", "Boolean"], [63, 0, 1, "", "Categorical"], [64, 0, 1, "", "DataType"], [65, 0, 1, "", "Date"], [66, 0, 1, "", "Datetime"], [67, 0, 1, "", "Decimal"], [68, 0, 1, "", "Duration"], [69, 0, 1, "", "Enum"], [70, 0, 1, "", "Field"], [71, 0, 1, "", "Float32"], [72, 0, 1, "", "Float64"], [73, 0, 1, "", "Int128"], [74, 0, 1, "", "Int16"], [75, 0, 1, "", "Int32"], [76, 0, 1, "", "Int64"], [77, 0, 1, "", "Int8"], [78, 0, 1, "", "List"], [79, 0, 1, "", "Null"], [80, 0, 1, "", "Object"], [81, 0, 1, "", "String"], [82, 0, 1, "", "Struct"], [83, 0, 1, "", "Time"], [84, 0, 1, "", "UInt16"], [85, 0, 1, "", "UInt32"], [86, 0, 1, "", "UInt64"], [87, 0, 1, "", "UInt8"], [88, 0, 1, "", "Unknown"], [89, 3, 1, "", "Utf8"]], "polars.datatypes.Array": [[60, 1, 1, "", "__init__"]], "polars.datatypes.Binary": [[61, 1, 1, "", "__init__"]], "polars.datatypes.Boolean": [[62, 1, 1, "", "__init__"]], "polars.datatypes.Categorical": [[63, 1, 1, "", "__init__"]], "polars.datatypes.DataType": [[64, 1, 1, "", "__init__"]], "polars.datatypes.Date": [[65, 1, 1, "", "__init__"]], "polars.datatypes.Datetime": [[66, 1, 1, "", "__init__"]], "polars.datatypes.Decimal": [[67, 1, 1, "", "__init__"]], "polars.datatypes.Duration": [[68, 1, 1, "", "__init__"]], "polars.datatypes.Enum": [[69, 1, 1, "", "__init__"]], "polars.datatypes.Field": [[70, 1, 1, "", "__init__"]], "polars.datatypes.Float32": [[71, 1, 1, "", "__init__"]], "polars.datatypes.Float64": [[72, 1, 1, "", "__init__"]], "polars.datatypes.Int128": [[73, 1, 1, "", "__init__"]], "polars.datatypes.Int16": [[74, 1, 1, "", "__init__"]], "polars.datatypes.Int32": [[75, 1, 1, "", "__init__"]], "polars.datatypes.Int64": [[76, 1, 1, "", "__init__"]], "polars.datatypes.Int8": [[77, 1, 1, "", "__init__"]], "polars.datatypes.List": [[78, 1, 1, "", "__init__"]], "polars.datatypes.Null": [[79, 1, 1, "", "__init__"]], "polars.datatypes.Object": [[80, 1, 1, "", "__init__"]], "polars.datatypes.String": [[81, 1, 1, "", "__init__"]], "polars.datatypes.Struct": [[82, 1, 1, "", "__init__"]], "polars.datatypes.Time": [[83, 1, 1, "", "__init__"]], "polars.datatypes.UInt16": [[84, 1, 1, "", "__init__"]], "polars.datatypes.UInt32": [[85, 1, 1, "", "__init__"]], "polars.datatypes.UInt64": [[86, 1, 1, "", "__init__"]], "polars.datatypes.UInt8": [[87, 1, 1, "", "__init__"]], "polars.datatypes.Unknown": [[88, 1, 1, "", "__init__"]], "polars.exceptions": [[93, 6, 1, "", "CategoricalRemappingWarning"], [94, 6, 1, "", "ChronoFormatWarning"], [95, 6, 1, "", "ColumnNotFoundError"], [96, 6, 1, "", "ComputeError"], [97, 6, 1, "", "CustomUFuncWarning"], [98, 6, 1, "", "DataOrientationWarning"], [99, 6, 1, "", "DuplicateError"], [100, 6, 1, "", "InvalidOperationError"], [101, 6, 1, "", "MapWithoutReturnDtypeWarning"], [102, 6, 1, "", "ModuleUpgradeRequiredError"], [103, 6, 1, "", "NoDataError"], [104, 6, 1, "", "NoRowsReturnedError"], [105, 6, 1, "", "OutOfBoundsError"], [106, 6, 1, "", "PanicException"], [107, 6, 1, "", "ParameterCollisionError"], [108, 6, 1, "", "PerformanceWarning"], [109, 6, 1, "", "PolarsError"], [110, 6, 1, "", "PolarsInefficientMapWarning"], [111, 6, 1, "", "PolarsWarning"], [112, 6, 1, "", "RowsError"], [113, 6, 1, "", "SQLInterfaceError"], [114, 6, 1, "", "SQLSyntaxError"], [115, 6, 1, "", "SchemaError"], [116, 6, 1, "", "SchemaFieldNotFoundError"], [117, 6, 1, "", "ShapeError"], [118, 6, 1, "", "StringCacheMismatchError"], [119, 6, 1, "", "StructFieldNotFoundError"], [120, 6, 1, "", "TooManyRowsReturnedError"], [121, 6, 1, "", "UnstableWarning"], [122, 6, 1, "", "UnsuitableSQLError"]], "polars.io.csv.batched_reader.BatchedCsvReader": [[132, 1, 1, "", "next_batches"]], "polars.io.plugins": [[133, 4, 1, "", "register_io_source"]], "polars.lazyframe.engine_config": [[917, 0, 1, "", "GPUEngine"]], "polars.lazyframe.engine_config.GPUEngine": [[917, 1, 1, "", "__init__"]], "polars.lazyframe.group_by.LazyGroupBy": [[918, 1, 1, "", "agg"], [919, 1, 1, "", "all"], [920, 1, 1, "", "count"], [921, 1, 1, "", "first"], [922, 1, 1, "", "head"], [923, 1, 1, "", "last"], [924, 1, 1, "", "len"], [925, 1, 1, "", "map_groups"], [926, 1, 1, "", "max"], [927, 1, 1, "", "mean"], [928, 1, 1, "", "median"], [929, 1, 1, "", "min"], [930, 1, 1, "", "n_unique"], [931, 1, 1, "", "quantile"], [932, 1, 1, "", "sum"], [933, 1, 1, "", "tail"]], "polars.lazyframe.in_process.InProcessQuery": [[934, 1, 1, "", "cancel"], [935, 1, 1, "", "fetch"], [936, 1, 1, "", "fetch_blocking"]], "polars.plugins": [[135, 4, 1, "", "register_plugin_function"]], "polars.selectors": [[948, 4, 1, "", "all"], [948, 4, 1, "", "alpha"], [948, 4, 1, "", "alphanumeric"], [948, 4, 1, "", "binary"], [948, 4, 1, "", "boolean"], [948, 4, 1, "", "by_dtype"], [948, 4, 1, "", "by_index"], [948, 4, 1, "", "by_name"], [948, 4, 1, "", "categorical"], [948, 4, 1, "", "contains"], [948, 4, 1, "", "date"], [948, 4, 1, "", "datetime"], [948, 4, 1, "", "decimal"], [948, 4, 1, "", "digit"], [948, 4, 1, "", "duration"], [948, 4, 1, "", "ends_with"], [948, 4, 1, "", "exclude"], [948, 4, 1, "", "expand_selector"], [948, 4, 1, "", "first"], [948, 4, 1, "", "float"], [948, 4, 1, "", "integer"], [948, 4, 1, "", "is_selector"], [948, 4, 1, "", "last"], [948, 4, 1, "", "matches"], [948, 4, 1, "", "numeric"], [948, 4, 1, "", "signed_integer"], [948, 4, 1, "", "starts_with"], [948, 4, 1, "", "string"], [948, 4, 1, "", "temporal"], [948, 4, 1, "", "time"], [948, 4, 1, "", "unsigned_integer"]], "polars.testing": [[161, 4, 1, "", "assert_frame_equal"], [162, 4, 1, "", "assert_frame_not_equal"], [163, 4, 1, "", "assert_series_equal"], [164, 4, 1, "", "assert_series_not_equal"]], "polars.testing.parametric": [[165, 0, 1, "", "column"], [166, 4, 1, "", "columns"], [167, 4, 1, "", "create_list_strategy"], [168, 4, 1, "", "dataframes"], [169, 4, 1, "", "dtypes"], [170, 4, 1, "", "lists"], [171, 4, 1, "", "load_profile"], [172, 4, 1, "", "series"], [173, 4, 1, "", "set_profile"]], "polars.testing.parametric.column": [[165, 1, 1, "", "__init__"]]}, "objnames": {"0": ["py", "class", "Python class"], "1": ["py", "method", "Python method"], "2": ["py", "property", "Python property"], "3": ["py", "attribute", "Python attribute"], "4": ["py", "function", "Python function"], "5": ["py", "data", "Python data"], "6": ["py", "exception", "Python exception"], "7": ["py", "module", "Python module"]}, "objtypes": {"0": "py:class", "1": "py:method", "2": "py:property", "3": "py:attribute", "4": "py:function", "5": "py:data", "6": "py:exception", "7": "py:module"}, "terms": {"": [1, 11, 37, 38, 39, 40, 45, 46, 55, 60, 70, 82, 92, 94, 100, 123, 130, 133, 138, 139, 140, 141, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 172, 199, 200, 211, 212, 215, 220, 223, 228, 229, 234, 240, 243, 244, 254, 261, 263, 268, 270, 273, 276, 277, 284, 293, 296, 301, 303, 304, 305, 306, 307, 312, 313, 338, 375, 408, 440, 445, 464, 467, 487, 493, 497, 510, 526, 547, 576, 577, 589, 598, 603, 610, 611, 618, 619, 630, 637, 671, 675, 683, 684, 685, 687, 689, 698, 699, 702, 703, 705, 712, 713, 714, 715, 719, 723, 725, 727, 735, 744, 745, 746, 747, 752, 759, 762, 765, 766, 775, 776, 778, 779, 785, 789, 790, 791, 792, 794, 796, 797, 799, 806, 808, 810, 811, 812, 818, 824, 828, 844, 846, 857, 858, 867, 868, 872, 873, 882, 893, 894, 900, 905, 906, 907, 908, 909, 912, 913, 925, 942, 947, 948, 952, 953, 954, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1045, 1046, 1047, 1050, 1051, 1052, 1054, 1056, 1057, 1058, 1060, 1061, 1062, 1065, 1066, 1069, 1071, 1073, 1074, 1075, 1078, 1086, 1088, 1089, 1090, 1091, 1096, 1097, 1099, 1100, 1101, 1102, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1254, 1255, 1256, 1257, 1258, 1259, 1261, 1262, 1263, 1264, 1265, 1266, 1268, 1269, 1270, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1337, 1342, 1346, 1350, 1353, 1360, 1361], "0": [1, 7, 9, 11, 13, 15, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 38, 39, 40, 45, 49, 51, 52, 53, 55, 59, 60, 67, 78, 124, 134, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 160, 165, 166, 167, 168, 169, 170, 172, 175, 196, 197, 198, 200, 201, 202, 203, 205, 206, 207, 208, 209, 211, 213, 214, 218, 219, 220, 222, 223, 226, 227, 228, 229, 230, 234, 235, 239, 241, 242, 243, 246, 248, 250, 251, 252, 253, 254, 257, 258, 259, 260, 263, 264, 265, 268, 270, 272, 273, 274, 275, 276, 283, 284, 285, 286, 288, 293, 294, 295, 296, 297, 298, 300, 302, 306, 308, 309, 312, 314, 315, 317, 319, 320, 322, 324, 325, 326, 327, 328, 329, 330, 331, 338, 341, 342, 346, 348, 349, 351, 355, 356, 357, 358, 359, 360, 363, 364, 365, 368, 369, 371, 374, 384, 387, 389, 396, 398, 403, 406, 409, 415, 416, 417, 418, 419, 420, 427, 428, 429, 433, 434, 435, 441, 442, 446, 449, 451, 452, 456, 460, 463, 465, 467, 470, 471, 473, 474, 478, 481, 482, 483, 484, 485, 486, 488, 490, 491, 492, 493, 496, 497, 499, 501, 502, 504, 506, 508, 512, 513, 516, 519, 521, 522, 523, 524, 526, 528, 533, 534, 537, 540, 543, 544, 545, 551, 552, 564, 568, 570, 571, 572, 573, 575, 576, 578, 579, 580, 584, 589, 592, 595, 596, 597, 599, 601, 610, 611, 612, 613, 614, 616, 617, 619, 622, 623, 625, 626, 627, 628, 632, 633, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 663, 665, 666, 667, 668, 672, 673, 674, 677, 682, 683, 684, 687, 688, 727, 728, 729, 731, 732, 733, 736, 741, 742, 744, 749, 750, 751, 752, 753, 754, 755, 756, 757, 759, 761, 763, 770, 774, 777, 783, 784, 786, 787, 790, 793, 794, 795, 799, 801, 802, 806, 807, 814, 815, 816, 817, 818, 819, 824, 828, 843, 846, 847, 848, 851, 853, 854, 856, 857, 859, 860, 862, 863, 864, 866, 867, 868, 871, 872, 876, 878, 881, 882, 885, 887, 888, 892, 893, 898, 900, 901, 902, 910, 912, 914, 915, 916, 918, 920, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 942, 947, 948, 952, 959, 960, 961, 962, 963, 964, 965, 967, 969, 972, 978, 988, 991, 993, 999, 1011, 1018, 1020, 1021, 1023, 1026, 1027, 1028, 1035, 1036, 1037, 1039, 1040, 1041, 1042, 1049, 1053, 1057, 1058, 1059, 1061, 1063, 1067, 1071, 1074, 1078, 1081, 1082, 1084, 1085, 1089, 1092, 1097, 1098, 1099, 1100, 1105, 1110, 1112, 1117, 1118, 1120, 1123, 1124, 1128, 1131, 1133, 1134, 1135, 1136, 1139, 1140, 1147, 1148, 1151, 1154, 1157, 1158, 1159, 1165, 1166, 1178, 1182, 1184, 1185, 1186, 1187, 1188, 1192, 1193, 1199, 1200, 1206, 1209, 1211, 1212, 1213, 1217, 1218, 1222, 1223, 1225, 1226, 1228, 1229, 1230, 1232, 1233, 1234, 1235, 1237, 1245, 1246, 1247, 1248, 1251, 1252, 1253, 1256, 1261, 1262, 1263, 1266, 1267, 1271, 1277, 1310, 1311, 1313, 1316, 1318, 1319, 1320, 1321, 1325, 1327, 1337, 1342, 1346, 1352, 1354, 1355, 1356, 1359, 1362, 1363, 1365, 1367, 1368], "00": [27, 40, 66, 200, 207, 229, 308, 338, 436, 437, 440, 444, 454, 455, 457, 461, 462, 464, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 641, 643, 645, 647, 649, 652, 654, 656, 712, 715, 719, 770, 771, 772, 773, 787, 814, 815, 816, 828, 846, 854, 868, 942, 948, 1043, 1044, 1047, 1048, 1049, 1051, 1052, 1053, 1058, 1059, 1063, 1065, 1066, 1067, 1068, 1072, 1073, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1277, 1291, 1294, 1298, 1360], "000": [9, 10, 27, 40, 338, 1277, 1368], "0000": [300, 338, 1321, 1337, 1368], "000000": [392, 393, 467, 678, 995, 996, 1257], "00000001": [11, 743, 828], "00000010": [743, 828], "00000011": [743, 828], "00000100": [743, 828], "00001000": [743, 828], "00001010": [743, 828], "00001011": [743, 828], "0000e": 11, "0000ff": [392, 393, 678, 995, 996, 1257], "0001": 467, "000100": 467, "000101": 467, "0005": 948, "00050": 948, "000800": 1078, "001": [53, 722, 773, 1081, 1082, 1084, 1301], "002": [773, 1081, 1082, 1084], "005": [1092, 1337], "00prefix": 948, "00z": [712, 715, 1291, 1294], "01": [28, 51, 65, 66, 168, 200, 207, 227, 229, 244, 270, 308, 338, 435, 436, 437, 438, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 478, 479, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 712, 714, 715, 719, 754, 767, 768, 769, 770, 771, 772, 773, 787, 828, 846, 854, 868, 873, 891, 942, 948, 1042, 1044, 1046, 1047, 1048, 1049, 1052, 1053, 1058, 1059, 1063, 1065, 1066, 1067, 1068, 1071, 1072, 1073, 1075, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1291, 1293, 1294, 1298, 1360, 1363], "010": [9, 717, 1296], "01000": 28, "01000010": [743, 828], "01000110": [743, 828], "012": [658, 695, 828, 1234, 1274, 1337], "0123": [722, 1301], "01234": [658, 828, 1234, 1337], "012345": 1078, "015625": [1209, 1337], "01\u00b2": [695, 1274], "02": [51, 200, 207, 227, 229, 270, 308, 338, 435, 437, 439, 445, 454, 455, 457, 461, 466, 467, 469, 472, 474, 478, 638, 641, 643, 645, 647, 649, 652, 654, 656, 657, 712, 714, 715, 719, 754, 767, 768, 769, 770, 771, 772, 773, 787, 828, 846, 854, 868, 891, 942, 948, 991, 1044, 1046, 1048, 1049, 1052, 1053, 1058, 1059, 1063, 1065, 1066, 1067, 1071, 1072, 1073, 1076, 1077, 1080, 1083, 1085, 1086, 1182, 1291, 1293, 1294, 1298, 1360, 1361], "03": [51, 130, 138, 200, 229, 244, 270, 308, 338, 437, 439, 440, 445, 454, 455, 457, 460, 461, 462, 464, 466, 467, 468, 469, 472, 474, 475, 478, 484, 497, 638, 641, 643, 645, 647, 649, 652, 654, 656, 714, 719, 767, 768, 769, 770, 771, 772, 773, 828, 846, 868, 873, 891, 942, 948, 1044, 1046, 1047, 1052, 1053, 1058, 1059, 1065, 1066, 1067, 1072, 1073, 1075, 1077, 1079, 1080, 1083, 1085, 1293, 1298], "037037": [1209, 1337], "04": [158, 200, 207, 229, 308, 338, 439, 440, 454, 455, 460, 461, 462, 464, 468, 469, 472, 474, 478, 641, 643, 645, 647, 649, 652, 654, 656, 712, 754, 767, 770, 771, 773, 828, 846, 854, 868, 942, 948, 1047, 1059, 1063, 1065, 1066, 1067, 1072, 1075, 1079, 1080, 1083, 1085, 1089, 1291, 1360], "047198": 1362, "05": [16, 158, 161, 162, 163, 164, 168, 200, 207, 308, 338, 435, 438, 439, 440, 441, 442, 446, 449, 450, 451, 452, 454, 455, 456, 461, 463, 464, 465, 467, 468, 754, 767, 768, 770, 771, 846, 854, 942, 948, 1046, 1047, 1048, 1049, 1072, 1073, 1075, 1076, 1078, 1079, 1086, 1360, 1361, 1363], "050545": 130, "0522623626787952": [1140, 1337], "0545": [1048, 1049, 1076], "05t10": 1078, "06": [168, 200, 308, 338, 435, 439, 453, 459, 461, 462, 463, 475, 476, 767, 770, 787, 846, 942, 948, 1042, 1072, 1073, 1078, 1086], "060": [441, 442, 446, 449, 451, 452, 456, 463, 465], "0601749420166": [215, 338], "06293300616044681": [1092, 1337], "07": [16, 138, 168, 207, 338, 435, 438, 439, 450, 461, 462, 467, 475, 712, 767, 768, 770, 771, 779, 854, 942, 948, 1042, 1046, 1072, 1078, 1291, 1360, 1363], "071068": [207, 338, 854, 942], "08": [138, 161, 162, 163, 164, 207, 244, 270, 285, 338, 435, 439, 454, 455, 462, 467, 638, 712, 771, 773, 787, 828, 854, 873, 891, 942, 948, 1042, 1073, 1086, 1291, 1360, 1361], "085537": [1101, 1337], "09": [51, 138, 207, 270, 338, 435, 439, 454, 455, 467, 618, 638, 716, 767, 768, 770, 816, 828, 854, 891, 942, 948, 1042, 1295], "090909": [619, 828], "094395": 1362, "098612": [573, 828, 1185, 1187, 1337, 1359], "0999": [438, 450], "0_": [40, 338], "0m": [444, 1051], "0x11bc0ad80": 947, "0\u00b5": 467, "1": [1, 7, 8, 9, 11, 12, 13, 15, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 49, 51, 52, 53, 54, 55, 59, 60, 78, 82, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 139, 142, 143, 144, 147, 148, 149, 152, 153, 154, 155, 156, 157, 158, 160, 161, 162, 163, 164, 165, 168, 172, 196, 197, 198, 199, 200, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 368, 369, 371, 372, 373, 374, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 396, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 529, 530, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 585, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 680, 682, 683, 684, 685, 686, 687, 688, 690, 691, 692, 693, 694, 698, 699, 700, 704, 705, 706, 707, 708, 709, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 749, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 824, 828, 843, 844, 846, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 877, 879, 880, 881, 882, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 948, 952, 953, 954, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 999, 1010, 1011, 1015, 1016, 1018, 1020, 1021, 1022, 1024, 1025, 1026, 1027, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1095, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1147, 1148, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1262, 1264, 1265, 1266, 1267, 1269, 1270, 1271, 1272, 1273, 1277, 1278, 1279, 1283, 1284, 1301, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337, 1342, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1367, 1368], "10": [13, 16, 17, 27, 35, 37, 39, 40, 41, 42, 45, 49, 51, 59, 130, 138, 139, 141, 152, 160, 202, 207, 211, 217, 226, 227, 229, 231, 233, 234, 235, 240, 244, 247, 258, 262, 264, 268, 270, 276, 285, 289, 312, 317, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 349, 353, 361, 362, 363, 365, 417, 423, 426, 431, 435, 436, 438, 439, 441, 442, 444, 446, 449, 450, 451, 452, 454, 455, 456, 460, 461, 462, 463, 465, 467, 475, 478, 484, 505, 506, 507, 512, 518, 530, 538, 544, 546, 552, 562, 564, 566, 570, 572, 588, 590, 601, 616, 618, 619, 622, 632, 633, 638, 669, 717, 727, 730, 743, 754, 755, 763, 768, 770, 771, 774, 777, 779, 781, 788, 789, 813, 816, 828, 849, 850, 854, 857, 868, 869, 871, 873, 877, 886, 887, 891, 893, 903, 904, 912, 918, 921, 923, 926, 927, 928, 929, 930, 931, 932, 942, 948, 1024, 1038, 1042, 1043, 1045, 1046, 1051, 1060, 1072, 1078, 1086, 1089, 1092, 1098, 1119, 1130, 1144, 1152, 1160, 1166, 1176, 1178, 1180, 1184, 1186, 1190, 1206, 1218, 1236, 1238, 1296, 1309, 1316, 1318, 1321, 1337, 1346, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1363, 1368], "100": [10, 17, 27, 40, 126, 129, 134, 138, 139, 140, 143, 147, 148, 149, 152, 156, 245, 263, 281, 338, 467, 632, 633, 662, 676, 686, 688, 691, 700, 716, 772, 828, 874, 897, 942, 948, 1094, 1186, 1202, 1217, 1218, 1224, 1225, 1227, 1241, 1255, 1267, 1270, 1279, 1295, 1337, 1357, 1368], "1000": [140, 215, 294, 315, 338, 354, 828, 916, 942, 1081, 1186, 1315, 1337, 1368], "10000": [138, 242, 338], "100000": [10, 27], "1000000": [11, 1084], "1001": [315, 338, 916, 942], "1002": [315, 338, 916, 942], "10047419486152048166": [230, 338], "1005": [354, 828], "100_000": [806, 878, 942], "100\u00b5": 467, "101": [9, 27, 245, 338, 439, 467, 717, 874, 942, 948, 1296, 1368], "101000": 439, "10101": [27, 1363], "1010101": 9, "101514": [207, 338, 854, 942], "102": [245, 338, 874, 942], "1024": [37, 45, 46, 49, 138, 139, 140, 148, 156, 338, 396, 942, 999], "1040361802642726": [1140, 1337], "107149": 1362, "10734580197236529959": [1118, 1337], "1073741824": [663, 828], "10783150408545073287": [230, 338], "107_930_000": 1346, "10_000": [40, 338], "10i": [229, 338, 868, 942], "10m": [462, 475, 1073, 1086], "10t00": 467, "11": [10, 16, 45, 49, 160, 168, 198, 207, 244, 270, 338, 349, 454, 455, 457, 462, 475, 499, 512, 544, 595, 619, 628, 638, 639, 653, 669, 743, 787, 811, 816, 824, 828, 843, 849, 850, 854, 869, 873, 877, 887, 891, 904, 942, 948, 1068, 1073, 1086, 1190, 1223, 1337, 1355], "110": [211, 338, 700, 717, 857, 942, 1296], "1101441246220388612": [506, 828], "111": [10, 1357], "11111": 1074, "111110": 1074, "11111001": [743, 828], "11111010": [743, 828], "11111111": 10, "112": [663, 828, 1368], "11330": 167, "1152921504606846976": [1215, 1337], "116": 167, "11638928888656214026": [506, 828], "118034": [902, 942], "11aa": 1360, "11aabb": 1360, "11h": [436, 1043], "12": [26, 40, 51, 130, 138, 160, 168, 207, 229, 240, 244, 245, 270, 285, 308, 338, 349, 425, 436, 438, 439, 443, 450, 453, 454, 455, 457, 458, 459, 460, 462, 467, 475, 476, 477, 484, 512, 544, 576, 592, 619, 627, 638, 653, 663, 677, 698, 716, 764, 767, 770, 771, 772, 787, 789, 814, 815, 816, 828, 854, 868, 869, 873, 874, 877, 891, 898, 904, 942, 948, 1043, 1045, 1046, 1057, 1058, 1060, 1064, 1071, 1073, 1078, 1086, 1098, 1190, 1233, 1256, 1278, 1295, 1337, 1359, 1360, 1361, 1363, 1365, 1368], "120": [245, 338, 773, 874, 942, 1362], "1200": [658, 828], "120134": [716, 1295], "121": 1368, "123": [9, 585, 677, 684, 699, 722, 818, 948, 1256, 1263, 1301, 1314, 1337], "123000": 948, "1232e": [1026, 1028, 1337], "1234": [27, 658, 828], "12345": [779, 1021, 1078, 1110, 1233, 1337], "1234500": 948, "123456": [9, 948], "1234567": 27, "123456780": 130, "12346": 779, "123465": 948, "123a123": 699, "123abc": [698, 1277, 1278], "125": [1, 40, 55, 338, 347, 623, 807, 828, 901, 942, 1206, 1209, 1337], "127": [1325, 1337, 1356], "128": [53, 67, 73, 1206, 1337], "129": [663, 828], "13": [201, 202, 207, 218, 219, 226, 234, 245, 246, 258, 270, 312, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 349, 435, 441, 442, 446, 449, 451, 452, 456, 463, 465, 588, 590, 638, 716, 757, 763, 766, 770, 777, 812, 814, 817, 828, 847, 848, 854, 862, 863, 874, 876, 891, 912, 921, 923, 926, 927, 928, 929, 930, 931, 932, 942, 1042, 1073, 1086, 1087, 1190, 1295, 1337, 1356], "130": [245, 338, 874, 942], "13382926553367784577": [506, 828], "134821952": 1346, "134_821_952": 1346, "135": [751, 1362], "13614470193936745724": [506, 828], "13756996518000038261": [1118, 1337], "13d": 467, "13h": [436, 1043], "14": [39, 160, 207, 245, 248, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 436, 441, 442, 446, 449, 451, 452, 456, 463, 465, 467, 512, 585, 628, 770, 814, 815, 828, 854, 874, 921, 923, 926, 927, 928, 929, 930, 931, 932, 942, 948, 1043, 1073, 1078], "140": [245, 338, 874, 942], "141592653589793": 10, "141593": [627, 828, 959, 1337, 1359, 1362], "142857": [1206, 1337], "143": [716, 1295, 1368], "1433": [38, 338], "1436e16": 168, "1438741209321515184": [230, 338], "1440": [472, 1083], "1443e235": 1368, "149": 1368, "14d": 948, "14h": 467, "15": [10, 40, 160, 207, 229, 234, 245, 248, 270, 338, 427, 431, 455, 460, 462, 467, 475, 484, 622, 638, 653, 695, 764, 770, 814, 815, 828, 854, 868, 874, 891, 942, 948, 1035, 1038, 1073, 1078, 1086, 1098, 1274, 1337, 1356, 1360], "150": [245, 338, 874, 942, 1225, 1337], "1500": [160, 171], "15000": [242, 338], "153061": [526, 828], "155": 134, "15836": 168, "15_000": [242, 338], "16": [1, 40, 53, 74, 84, 160, 174, 207, 229, 245, 270, 312, 338, 423, 426, 460, 467, 512, 592, 599, 618, 623, 638, 717, 727, 763, 773, 774, 777, 787, 828, 854, 868, 874, 891, 898, 912, 942, 948, 1073, 1086, 1206, 1246, 1296, 1310, 1337, 1356, 1359, 1360, 1365], "160": [245, 338, 874, 942], "165": [1073, 1086], "1656e15": [1028, 1337], "166667": [1206, 1337], "1666683077": 779, "1666683099": 779, "167": 51, "16996": 1368, "16h": 948, "17": [160, 168, 215, 244, 317, 338, 484, 510, 618, 639, 657, 759, 779, 815, 828, 873, 918, 942, 1026, 1028, 1073, 1098, 1122, 1223, 1337, 1368], "170": [134, 245, 338, 874, 942], "17293822569102704640": [1215, 1337], "174": 1368, "175201": [667, 828, 1247, 1337], "1755e": [165, 168], "1764": 55, "17888890": [215, 338], "179": 1368, "17_500": [242, 338], "18": [38, 130, 143, 207, 255, 270, 338, 426, 462, 475, 478, 512, 601, 618, 638, 727, 828, 854, 883, 887, 891, 942, 948, 1078, 1089, 1354, 1365], "180": [134, 429, 627, 828, 1362], "1800": [460, 1071], "1844": 168, "18446744073709551614": [1215, 1337], "185_000_000": 1346, "186": 1368, "1875": [655, 828, 910, 942], "1897": [438, 450, 1045, 1060], "18d": 948, "19": [168, 244, 270, 338, 438, 462, 638, 643, 645, 647, 649, 716, 828, 873, 891, 942, 1045, 1073, 1086, 1295], "1920": 1360, "196": 1361, "1964": [887, 942], "1969": [1360, 1361], "1970": [65, 66, 158, 1346], "1972": 1346, "1976": [448, 479], "1977": [448, 479], "1978": [441, 442, 446, 448, 449, 451, 452, 456, 463, 465, 479, 1361], "1979": [448, 479], "1980": 467, "1985": [768, 771], "1990": [138, 1346], "1993": 1346, "1994": 1346, "1995": 138, "1998": [457, 1068], "1999": [285, 338, 457, 467, 948, 1068, 1078, 1363], "199992": [878, 942], "199994": [878, 942], "199996": [878, 942], "199998": [878, 942], "1_000_000": [215, 338, 1096, 1337], "1_234_500": 948, "1d": [229, 244, 270, 308, 338, 437, 457, 462, 467, 469, 472, 475, 478, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 773, 788, 815, 816, 828, 868, 873, 891, 942, 948, 1044, 1052, 1058, 1068, 1073, 1077, 1080, 1083, 1086, 1098, 1337], "1e": [11, 161, 162, 163, 164], "1e6": 11, "1h": [229, 244, 270, 308, 338, 444, 457, 462, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1051, 1053, 1068, 1073, 1086, 1098, 1337], "1i": [229, 270, 308, 338, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 828, 868, 891, 942, 1098, 1337], "1m": [229, 244, 270, 308, 338, 457, 462, 474, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1081, 1082, 1084, 1085, 1086, 1098, 1337], "1mo": [229, 244, 270, 308, 338, 440, 454, 455, 457, 461, 462, 468, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1047, 1064, 1065, 1066, 1068, 1069, 1070, 1072, 1073, 1079, 1086, 1087, 1098, 1337], "1n": [229, 244, 270, 308, 338, 457, 462, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086, 1098, 1337], "1q": [229, 244, 270, 308, 338, 457, 462, 475, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086], "1st_col": 948, "1u": [229, 244, 270, 308, 338, 457, 462, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086, 1098, 1337], "1w": [229, 244, 270, 308, 338, 457, 462, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086, 1098, 1337], "1w2d": [768, 769], "1y": [229, 244, 270, 308, 338, 457, 462, 475, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086], "1y2mo": [457, 1068], "1zy3": [677, 1256], "2": [1, 7, 8, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 59, 60, 78, 82, 95, 98, 100, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 141, 147, 148, 150, 152, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 168, 170, 182, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 231, 232, 233, 234, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 351, 353, 354, 361, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 396, 398, 403, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 420, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 435, 436, 438, 439, 440, 441, 442, 443, 444, 447, 450, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 497, 498, 500, 501, 502, 503, 504, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 592, 593, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 669, 670, 671, 672, 674, 676, 677, 678, 679, 680, 681, 683, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 715, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 730, 731, 733, 734, 735, 736, 737, 738, 739, 740, 742, 743, 744, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 793, 794, 795, 796, 798, 799, 802, 806, 807, 808, 809, 810, 811, 813, 816, 817, 818, 824, 828, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 952, 953, 954, 957, 960, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 998, 999, 1010, 1016, 1018, 1020, 1021, 1022, 1023, 1025, 1026, 1028, 1029, 1030, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1043, 1046, 1048, 1049, 1051, 1053, 1056, 1057, 1058, 1060, 1062, 1063, 1064, 1065, 1066, 1070, 1071, 1072, 1073, 1076, 1086, 1088, 1089, 1090, 1091, 1092, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1143, 1144, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1203, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1246, 1248, 1249, 1250, 1251, 1252, 1253, 1256, 1262, 1264, 1266, 1267, 1268, 1270, 1271, 1273, 1274, 1277, 1278, 1283, 1284, 1286, 1287, 1288, 1291, 1292, 1294, 1295, 1296, 1297, 1300, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1312, 1313, 1314, 1315, 1317, 1318, 1319, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337, 1342, 1346, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1367, 1368], "20": [38, 39, 40, 60, 138, 143, 160, 165, 166, 167, 168, 172, 175, 198, 207, 211, 217, 233, 234, 255, 262, 264, 268, 285, 295, 296, 300, 314, 319, 338, 361, 362, 363, 417, 431, 438, 441, 442, 446, 449, 450, 451, 452, 456, 462, 463, 465, 467, 475, 478, 499, 506, 512, 576, 584, 595, 622, 641, 643, 645, 647, 649, 652, 654, 656, 682, 727, 742, 770, 779, 788, 807, 815, 828, 843, 854, 857, 860, 883, 886, 901, 915, 920, 942, 948, 1038, 1045, 1049, 1060, 1073, 1078, 1086, 1089, 1101, 1117, 1217, 1261, 1316, 1318, 1321, 1337, 1353, 1354, 1357, 1363], "200": [470, 471, 473, 632, 633, 828, 948, 1094, 1202, 1217, 1218, 1224, 1225, 1227, 1337, 1357], "2000": [438, 447, 450, 454, 455, 457, 948, 1045, 1054, 1060, 1065, 1066, 1068, 1074, 1346, 1360], "200000": [470, 878, 942], "200000000": 473, "2001": [16, 437, 438, 443, 445, 447, 450, 453, 457, 458, 459, 462, 466, 475, 476, 477, 478, 641, 643, 645, 647, 649, 652, 654, 656, 712, 828, 948, 1044, 1045, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1067, 1068, 1069, 1070, 1073, 1077, 1086, 1087, 1088, 1089, 1090, 1291], "2002": [138, 447, 457, 1054, 1068, 1090], "2003": [457, 779, 1068], "2004": [457, 1068], "2005": [457, 1068], "2006": [457, 1068], "2008": 1346, "200m": [470, 471, 473], "2010": [285, 338, 467, 948], "2011": [436, 1043], "2012": [436, 1043, 1363], "2013": 1071, "2016": [244, 338, 873, 942], "2017": [244, 338, 873, 942], "2018": [244, 338, 461, 873, 942, 1072], "2019": [244, 338, 873, 942], "202": 1361, "2020": [142, 153, 200, 207, 227, 244, 270, 338, 341, 435, 440, 444, 461, 464, 467, 468, 469, 470, 471, 472, 473, 474, 484, 638, 712, 714, 715, 754, 828, 846, 854, 873, 891, 942, 948, 1042, 1047, 1051, 1072, 1075, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1098, 1291, 1293, 1294, 1337, 1361], "2021": [200, 207, 227, 229, 308, 338, 712, 788, 846, 854, 868, 942, 948, 1048, 1049, 1055, 1076, 1291, 1360], "2022": [51, 200, 207, 227, 338, 439, 462, 475, 712, 768, 769, 771, 772, 773, 779, 846, 854, 942, 948, 1046, 1055, 1073, 1086, 1291], "2023": [16, 40, 130, 160, 242, 338, 439, 773, 788, 948, 1046], "2024": [160, 435, 441, 442, 446, 449, 451, 452, 456, 460, 463, 465, 618, 754, 767, 768, 770, 771, 773, 828, 948, 1042, 1071, 1360, 1363], "2025": [435, 460, 754, 787, 948, 1042], "2026": 1361, "2030": 1360, "2031": 948, "2040": 467, "2047317070637311557": [230, 338], "2055938745": 130, "2065": [441, 442, 446, 449, 451, 452, 456, 463, 465], "2068": 168, "207": 1361, "2077": [285, 338, 467, 948, 1078, 1360, 1361], "2095": 168, "20_000": [40, 338], "20t08": 467, "20t18": 1078, "20word": 141, "21": [160, 207, 255, 287, 338, 438, 641, 643, 645, 647, 649, 652, 654, 656, 770, 779, 787, 828, 854, 883, 942, 948, 1045, 1354], "213": 1368, "2147483647": 1368, "2147483648": [1188, 1337], "21d": 948, "22": [45, 49, 160, 168, 338, 443, 458, 462, 475, 477, 478, 639, 641, 643, 645, 647, 649, 652, 654, 656, 712, 770, 824, 828, 942, 948, 1073, 1086, 1089, 1223, 1291, 1337, 1360, 1361, 1368], "221": 1368, "2246e": [1246, 1310, 1337], "225": [462, 475, 1362], "22500": 806, "22_000_000": 1346, "22_500": 806, "23": [10, 168, 207, 229, 270, 300, 338, 439, 443, 446, 458, 460, 462, 467, 477, 638, 641, 643, 645, 647, 649, 652, 654, 656, 770, 773, 814, 815, 816, 828, 854, 868, 891, 901, 942, 948, 1046, 1053, 1071, 1321, 1337, 1367, 1368], "230498": 11, "230498095872587": 11, "2304980958725870923": 11, "232338648": 1346, "2337": [40, 338], "234": 27, "2345": 948, "23456789": 10, "235": 1368, "23h": 948, "24": [53, 160, 229, 244, 248, 270, 285, 308, 338, 425, 427, 443, 457, 458, 462, 469, 475, 477, 599, 638, 641, 643, 645, 647, 649, 652, 654, 656, 695, 768, 769, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 1035, 1068, 1073, 1080, 1086, 1139, 1337, 1360, 1367], "24030": 167, "249": [743, 828], "25": [1, 27, 40, 55, 130, 207, 211, 229, 244, 270, 295, 300, 308, 312, 338, 396, 431, 443, 444, 458, 462, 467, 475, 477, 484, 623, 625, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 736, 770, 771, 772, 773, 779, 787, 790, 815, 816, 828, 854, 857, 868, 873, 880, 891, 910, 912, 942, 948, 999, 1037, 1038, 1051, 1073, 1078, 1086, 1092, 1098, 1120, 1206, 1211, 1277, 1337, 1354, 1359, 1365, 1366], "250": [743, 828, 1225, 1337, 1357, 1368], "2500": [242, 300, 338], "254508": [484, 828, 1098, 1337], "255": 1368, "256": [248, 338, 396, 999, 1206, 1337, 1359], "2560": 999, "259921": [415, 828, 1020, 1337, 1359], "25_000_000": 1346, "26": [38, 40, 160, 165, 166, 167, 168, 172, 207, 338, 444, 476, 854, 942, 1051], "266667": [207, 338, 854, 942], "27": [1, 55, 295, 331, 338, 426, 453, 459, 476, 727, 828, 932, 948, 1209, 1316, 1337, 1367, 1368], "270": 1362, "28": [291, 296, 338, 347, 461, 478, 828, 1072, 1089, 1318, 1337, 1360, 1362, 1367, 1368], "283185": [627, 828], "2846": 338, "285714": [513, 828, 1124, 1337], "289962": 1362, "28_341_469": 1346, "29": [16, 160, 436, 454, 1043, 1065], "29096": 1368, "290994": [902, 942], "292432": [960, 1337], "292893": [484, 828, 1098, 1337], "2_color_scal": [40, 338], "2d": [270, 295, 296, 338, 457, 638, 788, 828, 891, 942, 1043, 1050], "2h": [641, 643, 645, 647, 649, 652, 654, 656, 828], "2i": [229, 338, 868, 942], "2m": [948, 1063], "2x": 167, "3": [1, 7, 8, 9, 10, 11, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 51, 52, 53, 54, 55, 59, 60, 78, 95, 98, 100, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 141, 143, 147, 148, 149, 152, 158, 160, 161, 162, 163, 164, 167, 168, 169, 170, 172, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 216, 217, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 347, 348, 349, 350, 352, 363, 364, 365, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 396, 397, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 421, 422, 423, 424, 425, 426, 427, 428, 431, 432, 433, 434, 435, 437, 439, 440, 441, 442, 445, 446, 447, 448, 449, 450, 451, 452, 453, 456, 457, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 475, 476, 478, 479, 480, 481, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 525, 526, 527, 528, 529, 530, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 565, 566, 567, 568, 571, 572, 573, 574, 575, 576, 577, 597, 598, 599, 600, 601, 602, 604, 606, 608, 609, 612, 615, 616, 618, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 668, 670, 671, 672, 675, 676, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 693, 694, 695, 698, 699, 700, 701, 702, 703, 704, 705, 706, 713, 714, 719, 720, 723, 724, 725, 726, 727, 728, 730, 734, 735, 738, 739, 740, 742, 743, 748, 749, 750, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 875, 876, 877, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 953, 954, 957, 959, 961, 962, 963, 965, 966, 967, 968, 969, 972, 973, 974, 975, 976, 977, 978, 980, 981, 982, 983, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 1000, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1022, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1044, 1046, 1047, 1050, 1052, 1053, 1054, 1056, 1057, 1058, 1060, 1062, 1063, 1064, 1069, 1072, 1073, 1074, 1075, 1077, 1078, 1079, 1081, 1082, 1084, 1086, 1088, 1089, 1091, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1143, 1144, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1163, 1164, 1165, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1181, 1182, 1183, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1255, 1257, 1258, 1259, 1262, 1263, 1264, 1267, 1268, 1269, 1270, 1272, 1273, 1277, 1278, 1279, 1280, 1281, 1285, 1292, 1293, 1298, 1299, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1317, 1318, 1319, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337, 1342, 1346, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1367, 1368], "30": [40, 207, 217, 229, 233, 262, 268, 291, 312, 338, 341, 361, 362, 363, 431, 439, 441, 442, 446, 449, 451, 452, 453, 454, 456, 459, 461, 462, 463, 465, 467, 468, 475, 476, 506, 584, 663, 770, 787, 788, 814, 815, 828, 854, 860, 868, 886, 912, 942, 948, 1038, 1046, 1065, 1072, 1073, 1078, 1079, 1086, 1117, 1337, 1342, 1353, 1354, 1357, 1359, 1360, 1362, 1363, 1366, 1368], "300": [291, 338, 505, 616, 633, 828, 948, 1218, 1224, 1225, 1227, 1337, 1357], "3000": 948, "3002": [438, 450, 1045, 1060], "30103": [572, 828, 1359], "3022416320763508302": [1118, 1337], "30_000": [40, 338], "30m": [229, 338, 462, 475, 868, 942, 1073, 1086], "30t16": 467, "31": [55, 60, 207, 285, 338, 438, 439, 443, 450, 454, 457, 460, 468, 682, 712, 767, 770, 779, 788, 807, 854, 942, 948, 1043, 1045, 1046, 1050, 1060, 1065, 1071, 1078, 1079, 1217, 1261, 1291, 1337, 1361, 1363, 1368], "31t06": 1078, "32": [53, 65, 71, 75, 85, 239, 244, 270, 338, 599, 638, 663, 828, 873, 891, 942, 1039, 1069, 1206, 1228, 1337, 1354, 1360], "321": [27, 1368], "3212": [716, 1295], "321cba": 1360, "3265500": 948, "32971": [478, 1089], "32974": [478, 1089], "32976": [478, 1089], "32bit": [295, 338], "33": [207, 255, 338, 657, 828, 854, 883, 942, 1228, 1337, 1361], "333": [16, 658, 828, 1094, 1202, 1234, 1337], "33333": 1363, "333333": [235, 338, 601, 787, 871, 942, 1206, 1232, 1337, 1354], "34": [207, 338, 698, 712, 854, 942, 1278, 1291], "3420": [716, 1295], "343622": [668, 828], "345": [412, 413, 693, 694, 1015, 1016, 1272, 1273], "3450": [1234, 1337], "3456": 948, "34776706224699483": [1248, 1337], "35": [40, 338, 431, 467, 770, 828, 1038, 1337], "350": [338, 341, 505, 616, 828, 1225, 1337, 1342], "3500": [1234, 1337], "356": [443, 458, 477], "356194": [750, 751, 1362], "357": [443, 458, 477], "358": [443, 458, 477], "359": [443, 458, 477], "36": [207, 338, 854, 942, 1365], "360": [429, 627, 828, 1362], "361": 1368, "363961": [564, 1178], "366": [458, 1069], "37": [12, 948], "370h": [484, 828, 1098, 1337], "37338": 1368, "38": [40, 130, 165, 168, 338], "38180177416060584": [650, 828, 1229, 1337], "381802": [650, 828, 1229, 1337], "386294": [573, 828, 1187, 1337, 1359], "389056": [488, 828, 1101, 1337, 1359], "39": [654, 779, 828], "39m": 948, "3_color_scal": [40, 338], "3d12h4m25": [229, 244, 270, 308, 338, 462, 475, 484, 638, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1073, 1086, 1098, 1337], "3f": [141, 712, 715, 1291, 1294], "3i": [229, 270, 338, 868, 942], "3rd": [1268, 1292], "3xy": [677, 1256], "4": [1, 8, 13, 17, 25, 35, 37, 39, 40, 41, 42, 45, 51, 52, 53, 54, 55, 59, 60, 78, 98, 123, 124, 125, 126, 127, 128, 129, 130, 134, 152, 160, 172, 196, 197, 198, 199, 200, 201, 202, 206, 208, 212, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 255, 257, 258, 259, 261, 262, 263, 264, 270, 272, 273, 280, 281, 284, 288, 289, 290, 291, 292, 293, 296, 299, 301, 302, 304, 305, 306, 307, 308, 310, 311, 312, 314, 315, 317, 318, 320, 321, 322, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 351, 353, 365, 372, 373, 374, 376, 377, 378, 379, 380, 382, 384, 385, 386, 387, 389, 390, 396, 407, 408, 409, 412, 413, 415, 416, 417, 421, 422, 425, 426, 427, 429, 432, 439, 442, 443, 450, 458, 459, 460, 461, 462, 463, 464, 467, 469, 472, 474, 475, 477, 481, 482, 484, 488, 489, 491, 492, 493, 495, 496, 497, 498, 500, 501, 502, 503, 504, 507, 509, 511, 512, 513, 514, 523, 524, 528, 529, 530, 537, 538, 539, 540, 541, 543, 544, 546, 554, 556, 557, 558, 559, 560, 561, 562, 566, 567, 572, 575, 576, 577, 597, 599, 601, 602, 604, 606, 608, 609, 612, 613, 614, 617, 618, 620, 621, 622, 623, 626, 628, 632, 633, 634, 635, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 660, 662, 665, 669, 670, 671, 672, 675, 677, 681, 684, 687, 689, 693, 694, 695, 696, 697, 698, 699, 702, 703, 704, 705, 710, 711, 712, 713, 717, 722, 723, 725, 726, 727, 728, 730, 733, 734, 735, 736, 742, 743, 745, 747, 748, 750, 751, 752, 753, 755, 756, 757, 758, 759, 761, 763, 764, 765, 766, 767, 770, 771, 772, 774, 776, 777, 781, 783, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 807, 808, 809, 810, 811, 812, 813, 815, 816, 817, 818, 824, 828, 843, 844, 846, 847, 848, 849, 850, 853, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 886, 887, 888, 891, 897, 898, 899, 900, 901, 902, 903, 904, 905, 907, 908, 909, 910, 911, 912, 915, 916, 918, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 952, 957, 960, 967, 974, 976, 977, 978, 980, 981, 982, 983, 984, 986, 988, 989, 990, 991, 992, 993, 999, 1010, 1015, 1016, 1021, 1022, 1024, 1030, 1035, 1037, 1039, 1049, 1053, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1070, 1072, 1073, 1075, 1080, 1083, 1085, 1086, 1087, 1088, 1095, 1098, 1102, 1103, 1105, 1106, 1111, 1112, 1114, 1119, 1120, 1123, 1124, 1125, 1126, 1130, 1133, 1134, 1135, 1136, 1138, 1144, 1151, 1152, 1153, 1154, 1155, 1160, 1164, 1167, 1168, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1180, 1181, 1196, 1199, 1200, 1203, 1206, 1207, 1208, 1209, 1213, 1214, 1217, 1218, 1219, 1222, 1226, 1228, 1229, 1230, 1231, 1232, 1235, 1237, 1241, 1242, 1245, 1248, 1249, 1250, 1254, 1256, 1260, 1263, 1266, 1268, 1272, 1273, 1275, 1276, 1281, 1283, 1284, 1289, 1290, 1291, 1292, 1296, 1301, 1302, 1305, 1307, 1309, 1315, 1318, 1320, 1322, 1328, 1337, 1342, 1346, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1365, 1366, 1367, 1368], "40": [40, 207, 217, 244, 262, 338, 462, 467, 475, 506, 570, 716, 727, 828, 854, 873, 886, 942, 948, 1055, 1086, 1184, 1295, 1353, 1354, 1357, 1360], "400": [307, 338, 470, 471, 473, 909, 942, 1224, 1225, 1227, 1337, 1357], "4000000": [1096, 1337], "404": [245, 338, 683, 685, 874, 942, 1262, 1264], "4096": 1359, "41": [207, 338, 654, 828, 854, 942, 1354, 1368], "412277": 168, "414214": [672, 828, 1251, 1337, 1359], "4160": 55, "416147": 1362, "4164": [244, 338, 873, 942], "42": [55, 207, 230, 255, 270, 338, 467, 638, 828, 854, 883, 891, 942, 1118, 1337, 1353, 1367], "424778": [627, 828], "428571": [483, 828, 1097, 1337], "429101": 1354, "4294967296": [45, 338], "43": [207, 270, 338, 426, 638, 654, 828, 854, 891, 942], "4321": 948, "433013": [651, 828, 902, 942], "44": [10, 255, 338, 432, 828, 883, 942], "4411": [244, 338, 873, 942], "44225": [1020, 1337], "444": 10, "44444444444": 10, "45": [40, 207, 270, 338, 439, 462, 475, 638, 654, 677, 684, 724, 751, 770, 788, 814, 815, 828, 854, 891, 942, 948, 1046, 1073, 1078, 1086, 1256, 1263, 1304, 1359, 1360, 1362, 1366, 1368], "450": [1225, 1337], "45000": 806, "4500000": 948, "456": [9, 10, 439, 948, 1046, 1314, 1337], "456000": [439, 1046], "456001\u00b5": 948, "4566": [244, 338, 873, 942], "456789": [467, 948, 1074], "456789\u00b5": 948, "456m": 948, "457658": 1362, "459148": [480, 828], "46": 948, "4696": [244, 338, 873, 942], "47": [51, 207, 338, 654, 828, 854, 942, 948, 1354], "470": [887, 942], "47033": [650, 828, 1229, 1337], "47033046033698594": [650, 828, 1229, 1337], "475": [887, 942], "48": [12, 168, 270, 338, 638, 727, 828, 891, 942, 948], "4827": [244, 338, 873, 942], "485": 1368, "49": [207, 338, 854, 942, 948], "492474": [484, 828, 1098, 1337], "498": [245, 338, 874, 942], "4_500_000": 948, "4ab4a": 1360, "4d": [484, 828, 1098, 1337], "4f6228": [40, 338], "4f71": [40, 338], "4x": [241, 338], "5": [1, 7, 8, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 35, 37, 39, 41, 42, 45, 51, 52, 54, 55, 59, 98, 123, 126, 127, 128, 129, 130, 132, 139, 160, 161, 163, 166, 168, 172, 197, 200, 201, 202, 207, 208, 211, 216, 217, 218, 219, 220, 222, 223, 224, 226, 227, 228, 229, 231, 232, 234, 235, 237, 239, 240, 241, 243, 244, 245, 246, 247, 248, 250, 251, 252, 257, 258, 259, 261, 263, 264, 265, 270, 273, 280, 281, 284, 285, 288, 289, 290, 291, 292, 293, 295, 296, 299, 300, 302, 305, 306, 307, 308, 311, 312, 314, 315, 317, 319, 320, 321, 322, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 347, 348, 351, 366, 367, 372, 373, 374, 376, 378, 382, 387, 389, 395, 396, 407, 408, 409, 412, 413, 416, 417, 427, 428, 429, 431, 432, 435, 438, 439, 440, 441, 442, 446, 449, 450, 451, 452, 456, 461, 463, 464, 465, 467, 468, 474, 478, 482, 484, 486, 487, 490, 492, 496, 497, 501, 502, 504, 507, 509, 512, 514, 517, 520, 521, 522, 523, 524, 528, 530, 537, 540, 541, 543, 544, 546, 549, 551, 552, 556, 557, 558, 559, 560, 561, 565, 566, 570, 576, 597, 599, 601, 613, 617, 618, 619, 620, 621, 622, 623, 625, 626, 628, 632, 633, 634, 635, 637, 638, 639, 640, 642, 643, 644, 645, 646, 648, 651, 653, 654, 655, 656, 657, 660, 671, 677, 687, 688, 689, 692, 693, 694, 713, 717, 728, 730, 734, 735, 736, 748, 750, 751, 753, 754, 755, 756, 757, 759, 761, 763, 764, 765, 766, 767, 768, 770, 773, 774, 775, 776, 777, 781, 783, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 806, 807, 809, 811, 812, 813, 817, 824, 828, 846, 847, 848, 849, 850, 854, 857, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 876, 877, 880, 881, 887, 891, 897, 898, 899, 900, 901, 902, 903, 904, 908, 909, 911, 912, 915, 916, 918, 920, 921, 922, 923, 926, 927, 928, 929, 930, 931, 932, 933, 942, 948, 957, 960, 964, 967, 970, 971, 974, 976, 977, 978, 980, 982, 986, 991, 992, 993, 998, 999, 1010, 1015, 1022, 1024, 1031, 1035, 1036, 1037, 1038, 1039, 1042, 1045, 1046, 1047, 1048, 1049, 1050, 1060, 1072, 1074, 1075, 1076, 1078, 1079, 1085, 1087, 1088, 1089, 1095, 1098, 1100, 1102, 1103, 1104, 1114, 1119, 1120, 1123, 1125, 1129, 1132, 1144, 1151, 1154, 1155, 1160, 1163, 1166, 1170, 1171, 1172, 1173, 1174, 1175, 1179, 1180, 1184, 1188, 1196, 1203, 1206, 1207, 1208, 1211, 1212, 1213, 1214, 1218, 1219, 1222, 1223, 1224, 1225, 1227, 1228, 1231, 1235, 1237, 1242, 1248, 1251, 1256, 1266, 1267, 1268, 1271, 1272, 1292, 1296, 1309, 1316, 1318, 1321, 1322, 1325, 1328, 1337, 1342, 1347, 1350, 1352, 1354, 1355, 1356, 1359, 1360, 1361, 1362, 1365, 1367, 1368], "50": [12, 27, 40, 207, 217, 227, 338, 417, 462, 467, 475, 768, 769, 828, 854, 942, 948, 1024, 1037, 1086, 1277, 1337, 1353, 1354], "500": [40, 307, 338, 341, 441, 442, 446, 449, 451, 452, 456, 463, 465, 909, 942, 1059, 1061, 1067, 1224, 1225, 1227, 1337, 1342], "5000": [300, 338, 1321, 1337], "50000": 139, "500000": [449, 1059], "500000000": [456, 1067], "5000555": 948, "500_000": [441, 442, 446, 449, 451, 452, 456, 463, 465], "500m": [1059, 1061, 1067], "51": 948, "512": [45, 140, 241, 338, 396, 623, 828, 999, 1206, 1337], "51966": [717, 1296], "52": [312, 338, 476, 657, 828, 912, 942], "523599": 1362, "527525": [1230, 1337], "53": [476, 1087, 1365], "533316061": 1346, "533_316_061": 1346, "54": [488, 828, 1140, 1337, 1359, 1368], "540": [429, 627, 828], "540302": 1362, "543": 9, "543081": [419, 828, 1027, 1337], "5432": 140, "54321": 9, "544": 1368, "544705": 759, "549306": [964, 1337], "55": [40, 53, 338, 510, 828, 1122, 1337, 1356, 1360, 1361], "5555": 948, "55550": 948, "56": [130, 698, 731, 828, 1278], "566371": [627, 828], "567": 27, "56789": [1021, 1110, 1233, 1337], "57": [654, 828, 1233, 1337, 1362, 1368], "570796": [355, 357, 828, 959, 961, 1337, 1362], "575050513": [165, 168], "58": [134, 263, 338], "581139": [1037, 1337], "584963": [571, 828], "587401": [415, 828, 1359], "59": [130, 207, 338, 439, 452, 460, 463, 467, 497, 770, 814, 815, 816, 828, 854, 942, 948, 1046, 1063, 1071, 1074], "59815": [488, 828, 1359], "5_000_555": 948, "5th": [40, 338], "6": [1, 8, 13, 35, 37, 39, 40, 41, 42, 43, 44, 45, 50, 52, 54, 59, 90, 91, 98, 123, 126, 127, 128, 129, 147, 148, 160, 197, 200, 203, 204, 208, 209, 210, 212, 213, 214, 216, 217, 220, 223, 224, 225, 226, 227, 229, 231, 233, 234, 235, 237, 239, 240, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 263, 264, 265, 267, 268, 270, 271, 272, 273, 274, 275, 276, 278, 281, 283, 284, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 302, 304, 305, 306, 308, 309, 310, 311, 312, 314, 315, 321, 331, 332, 338, 341, 342, 347, 351, 372, 373, 374, 376, 382, 390, 408, 409, 412, 413, 425, 426, 432, 435, 439, 443, 453, 457, 458, 459, 470, 471, 473, 476, 477, 480, 482, 491, 492, 497, 498, 501, 507, 509, 512, 530, 531, 532, 541, 544, 557, 558, 559, 560, 564, 576, 577, 613, 617, 624, 627, 628, 629, 634, 636, 638, 640, 642, 644, 646, 648, 651, 653, 654, 655, 660, 665, 671, 677, 682, 693, 694, 717, 728, 730, 735, 743, 745, 747, 754, 756, 763, 764, 765, 767, 770, 774, 777, 783, 789, 790, 794, 807, 811, 824, 828, 846, 849, 850, 851, 852, 855, 856, 858, 859, 860, 861, 864, 865, 866, 868, 869, 871, 872, 873, 875, 877, 878, 885, 887, 889, 891, 892, 893, 895, 897, 898, 899, 900, 901, 904, 907, 908, 911, 912, 915, 916, 922, 932, 933, 942, 948, 974, 976, 977, 978, 980, 986, 1015, 1022, 1026, 1028, 1033, 1034, 1039, 1042, 1068, 1078, 1088, 1095, 1102, 1114, 1120, 1145, 1146, 1155, 1158, 1171, 1172, 1173, 1174, 1178, 1196, 1210, 1213, 1214, 1219, 1221, 1226, 1228, 1230, 1232, 1237, 1242, 1245, 1256, 1261, 1272, 1296, 1308, 1318, 1337, 1342, 1347, 1350, 1352, 1354, 1355, 1359, 1365, 1366, 1368], "60": [40, 217, 263, 338, 446, 451, 452, 463, 474, 497, 654, 712, 828, 1069, 1074, 1085, 1215, 1291, 1337, 1362], "600": [307, 338, 470, 471, 473, 909, 942, 948], "60000": 449, "600000": 948, "60000000": 456, "60206": [572, 828, 1359], "605551": 809, "605551275463989": 809, "609438": 1359, "60_000": [441, 442, 446, 449, 451, 452, 456, 463, 465], "61": [263, 338], "625": [648, 828], "626172": [679, 1258], "63": [654, 828], "63204": 1368, "6331e16": [1310, 1337, 1362], "636253": 1362, "64": [1, 53, 55, 66, 68, 72, 76, 83, 86, 159, 196, 300, 338, 420, 599, 623, 828, 1206, 1209, 1337, 1359], "64030": [717, 1296], "642093": 1362, "647961": 168, "64bit": [160, 630, 828, 1215, 1337], "65": [211, 338, 857, 942, 1092, 1337], "650": [505, 616, 828], "65280": [717, 1296], "654": [27, 807, 901, 942], "65432": 1363, "654321": 585, "65536": 1359, "65552": [395, 998], "66": [244, 307, 338, 654, 743, 828, 873, 909, 942, 1140, 1228, 1337], "663053": 130, "666": 948, "666000": 948, "666667": [207, 235, 309, 326, 338, 483, 787, 793, 828, 854, 871, 910, 927, 942, 1097, 1337], "666f6f": [679, 1258], "67500": 806, "676": [245, 338, 874, 942], "678": [677, 684, 1256, 1263], "6789": [28, 948], "67890": 28, "686241": 1354, "69": [654, 828, 1140, 1337], "693147": [573, 828, 1185, 1187, 1337, 1359], "6_000_000": 1346, "7": [1, 16, 27, 35, 37, 39, 40, 41, 42, 43, 44, 45, 52, 54, 59, 147, 148, 160, 175, 197, 200, 203, 204, 205, 207, 209, 210, 213, 214, 216, 220, 223, 225, 229, 231, 233, 235, 243, 247, 249, 251, 253, 255, 256, 260, 263, 265, 267, 268, 270, 271, 273, 274, 275, 276, 278, 281, 283, 286, 287, 288, 289, 294, 296, 297, 298, 306, 308, 309, 310, 338, 341, 342, 347, 351, 373, 374, 376, 385, 426, 438, 439, 443, 450, 458, 461, 462, 467, 475, 477, 488, 501, 507, 512, 513, 530, 544, 557, 558, 559, 560, 617, 618, 628, 634, 638, 653, 654, 671, 687, 716, 730, 754, 763, 764, 767, 770, 771, 777, 782, 789, 790, 807, 811, 828, 846, 851, 852, 854, 856, 859, 861, 864, 866, 868, 869, 871, 872, 877, 883, 885, 888, 889, 891, 892, 893, 897, 901, 904, 942, 948, 964, 977, 978, 980, 989, 1045, 1046, 1050, 1055, 1060, 1072, 1073, 1078, 1086, 1088, 1101, 1124, 1139, 1158, 1171, 1172, 1173, 1174, 1218, 1219, 1231, 1237, 1266, 1295, 1337, 1342, 1347, 1352, 1354, 1355, 1356, 1359, 1361, 1365, 1368], "70": [207, 338, 743, 771, 828, 854, 942, 1140, 1337, 1354], "700": [307, 338, 909, 942], "702963": [40, 338], "7051579356916758811": 154, "707107": [384, 485, 651, 652, 750, 828, 988, 1099, 1337, 1362], "712389": 1362, "714": 1368, "714286": [513, 828, 1124, 1337], "718281828459045": [10, 480, 571, 828, 1092, 1185, 1337], "718282": [488, 828, 1101, 1337, 1359], "720": [429, 627, 828], "7264": 1368, "732051": [1251, 1337], "7415e16": 168, "742": [245, 338, 874, 942], "75": [40, 207, 211, 338, 351, 617, 625, 640, 642, 644, 646, 651, 653, 655, 787, 790, 828, 854, 857, 942, 948, 1037, 1120, 1140, 1211, 1277, 1337, 1354, 1362, 1368], "7500": [242, 338], "7508": 1368, "754": [736, 828], "754888": [480, 828], "761594": [732, 828, 1311, 1337], "7654": 948, "765431": 1074, "7654321": 27, "76933c": [40, 338], "77": 1078, "78": [9, 134, 698, 1278], "780": 9, "784": [244, 338, 873, 942], "785398": [359, 750, 751, 828, 963, 1337, 1362], "789": [10, 948], "79": [1140, 1337], "7d": 948, "8": [1, 11, 35, 37, 39, 41, 42, 43, 44, 45, 46, 51, 52, 54, 55, 59, 77, 81, 87, 147, 148, 160, 197, 200, 203, 204, 205, 207, 209, 210, 212, 213, 214, 216, 220, 223, 225, 227, 231, 233, 240, 243, 244, 245, 247, 248, 249, 251, 253, 256, 265, 267, 268, 270, 271, 273, 274, 275, 276, 278, 281, 283, 285, 286, 287, 289, 294, 296, 297, 298, 306, 309, 310, 312, 338, 351, 353, 365, 373, 374, 376, 423, 426, 427, 439, 467, 501, 508, 512, 513, 538, 540, 544, 557, 558, 559, 560, 599, 617, 618, 623, 634, 635, 639, 663, 669, 671, 695, 696, 697, 712, 743, 748, 754, 759, 761, 764, 766, 774, 776, 781, 782, 785, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 807, 809, 812, 813, 817, 828, 846, 851, 852, 854, 856, 858, 859, 861, 864, 866, 869, 872, 873, 874, 877, 878, 887, 889, 892, 893, 897, 901, 904, 912, 942, 948, 977, 978, 980, 1028, 1035, 1055, 1120, 1124, 1139, 1152, 1154, 1158, 1171, 1172, 1173, 1174, 1206, 1209, 1219, 1222, 1223, 1226, 1228, 1230, 1232, 1275, 1276, 1291, 1337, 1346, 1347, 1352, 1354, 1355, 1356, 1359, 1360, 1361, 1365, 1368], "80": [40, 211, 338, 857, 942], "800": [470, 471, 473, 1078], "8000": 140, "803065983": 130, "81": 1359, "814697265625": [1096, 1337], "816497": [286, 338], "8192": 138, "82": [244, 338, 873, 942], "8257e14": 1368, "83": [244, 338, 873, 942], "833": [244, 338, 873, 942], "833333": [326, 927], "848062": 1362, "848808": 168, "85": [40, 134, 338, 1140, 1337, 1368], "850": [505, 616, 828], "8568409950394724": [1092, 1337], "8589934592": [663, 828], "86": 1368, "8601": 1360, "87": 1368, "876": 9, "88": [207, 338, 854, 942], "881374": [358, 828, 962, 1337], "888": [807, 901, 942], "8_000_000": 1346, "8a": [995, 996], "8nin": 1368, "9": [1, 9, 35, 37, 39, 40, 41, 42, 45, 51, 59, 197, 205, 207, 220, 222, 231, 235, 243, 245, 247, 248, 263, 270, 272, 273, 276, 288, 289, 306, 310, 312, 331, 338, 347, 351, 353, 365, 373, 374, 376, 381, 383, 423, 426, 429, 439, 467, 493, 501, 512, 518, 538, 544, 555, 563, 601, 617, 618, 627, 634, 638, 639, 650, 653, 654, 665, 669, 684, 716, 724, 727, 757, 763, 764, 767, 770, 782, 816, 828, 854, 864, 869, 871, 872, 874, 877, 891, 893, 904, 912, 932, 942, 948, 972, 973, 977, 978, 980, 985, 987, 1037, 1050, 1059, 1061, 1067, 1073, 1086, 1087, 1130, 1139, 1152, 1158, 1169, 1177, 1219, 1223, 1229, 1231, 1233, 1245, 1263, 1295, 1304, 1337, 1346, 1347, 1352, 1355, 1356, 1365], "90": [207, 245, 338, 716, 854, 874, 942, 1295, 1354, 1362], "90000": 806, "901234": [1021, 1110, 1233, 1337], "909": [244, 338, 873, 942], "910": [244, 338, 684, 873, 942, 1263], "910t": [677, 684, 1256, 1263], "914": [244, 338, 873, 942], "9223372036854775807": [739, 828], "9223372036854775808": [574, 828], "927295": 1362, "928571": [486, 828, 1100, 1337], "93": [1140, 1337], "94": [348, 828], "9477376373212048": [1140, 1337], "95": [17, 348, 828, 948], "95b3d7": [40, 338], "96": [17, 207, 338, 348, 828, 854, 942, 1140, 1337], "961": 55, "963624": [485, 828, 1099, 1337], "964028": [263, 338], "96_067_179": 1346, "97": [17, 234, 338, 348, 828, 1140, 1337], "9774092659964970114": [506, 828], "978307200": [445, 1052], "978307200000": 466, "978307200000000": [445, 466, 1052, 1077], "978307200000000000": 1077, "978393600": [445, 1052], "978393600000": 466, "978393600000000": [445, 466, 1052, 1077], "978393600000000000": 1077, "978480000": [445, 1052], "978480000000": 466, "978480000000000": [445, 466, 1052, 1077], "978480000000000000": 1077, "98": [17, 234, 263, 338, 407, 500, 503, 670, 716, 734, 828, 1295], "987": [27, 585], "987000": 948, "9876": 9, "987654": [27, 948], "987654321": 10, "9876543210": 130, "987m": 948, "988": 10, "99": [17, 40, 218, 219, 234, 237, 263, 307, 338, 348, 407, 490, 492, 500, 503, 670, 734, 818, 828, 862, 863, 909, 942, 1078, 1092, 1104, 1337, 1359], "9914e218": 168, "993": [1120, 1337], "998347": [263, 338], "999": [438, 450, 948, 1045, 1060, 1357, 1368], "999000": 948, "999954": [263, 338], "999999": [460, 722, 770, 814, 815, 816, 948, 1071, 1078, 1301], "999999\u00b5": 948, "9bbb59": [40, 338], "A": [13, 37, 40, 45, 46, 57, 58, 63, 69, 130, 133, 138, 139, 140, 141, 152, 154, 159, 174, 204, 213, 222, 229, 244, 250, 252, 257, 263, 288, 291, 306, 307, 308, 312, 313, 338, 346, 413, 433, 434, 439, 464, 467, 481, 482, 490, 502, 504, 516, 519, 521, 522, 528, 568, 575, 576, 589, 603, 612, 613, 635, 640, 642, 644, 646, 648, 651, 653, 655, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 692, 694, 698, 699, 700, 702, 713, 722, 757, 773, 774, 778, 828, 852, 859, 868, 873, 889, 909, 912, 913, 942, 948, 1016, 1040, 1041, 1046, 1075, 1078, 1094, 1104, 1202, 1224, 1225, 1227, 1230, 1231, 1232, 1254, 1255, 1256, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1271, 1273, 1277, 1278, 1279, 1281, 1292, 1301, 1337, 1346, 1347, 1350, 1363, 1365], "AND": [744, 745, 807, 948, 1356], "ANDs": [398, 828, 1001, 1337], "AS": [285, 338, 807, 808, 901, 942, 1346, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1367], "And": [720, 1299], "As": [12, 50, 90, 91, 123, 125, 126, 127, 129, 143, 147, 148, 156, 220, 295, 300, 338, 568, 818, 864, 942], "At": [45, 263, 338], "BY": [807, 901, 942, 1346, 1349, 1355, 1364, 1365], "Be": 942, "By": [5, 12, 14, 30, 33, 51, 138, 139, 152, 229, 243, 244, 270, 272, 281, 286, 308, 309, 338, 382, 457, 462, 475, 561, 564, 570, 618, 633, 638, 641, 643, 645, 647, 649, 652, 654, 656, 662, 673, 741, 761, 768, 769, 771, 772, 773, 788, 809, 815, 816, 817, 828, 849, 868, 872, 873, 891, 897, 902, 910, 942, 986, 1068, 1073, 1086, 1175, 1218, 1241, 1252, 1327, 1337], "For": [14, 39, 40, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 211, 212, 217, 243, 244, 263, 270, 295, 324, 338, 341, 454, 455, 467, 483, 485, 486, 497, 568, 577, 589, 630, 668, 675, 683, 684, 685, 687, 689, 713, 763, 773, 777, 778, 824, 828, 857, 858, 873, 891, 925, 942, 1078, 1097, 1099, 1100, 1103, 1190, 1215, 1248, 1254, 1262, 1263, 1264, 1266, 1268, 1292, 1316, 1337, 1342], "IF": 1358, "If": [37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 56, 57, 58, 67, 123, 124, 125, 126, 127, 128, 129, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 169, 170, 171, 182, 196, 200, 212, 217, 220, 227, 229, 231, 239, 240, 241, 243, 244, 247, 248, 252, 259, 263, 270, 272, 273, 274, 278, 281, 283, 285, 288, 289, 292, 293, 295, 296, 302, 303, 305, 306, 307, 338, 341, 350, 352, 375, 382, 387, 395, 409, 435, 439, 440, 454, 455, 464, 467, 493, 508, 514, 526, 547, 556, 561, 562, 568, 576, 577, 584, 585, 591, 593, 618, 623, 625, 628, 630, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 662, 664, 668, 669, 674, 684, 685, 687, 689, 690, 691, 702, 703, 704, 705, 707, 708, 709, 712, 713, 714, 715, 719, 722, 740, 744, 746, 749, 753, 754, 758, 759, 763, 768, 769, 771, 772, 773, 776, 777, 783, 784, 785, 787, 788, 790, 794, 800, 803, 804, 805, 810, 812, 815, 816, 818, 819, 828, 849, 850, 858, 860, 864, 868, 872, 873, 878, 882, 889, 891, 895, 897, 899, 901, 906, 908, 909, 917, 925, 935, 942, 947, 948, 955, 956, 979, 986, 991, 998, 1011, 1024, 1042, 1046, 1047, 1065, 1066, 1075, 1078, 1103, 1119, 1120, 1125, 1139, 1140, 1144, 1161, 1170, 1175, 1176, 1182, 1190, 1209, 1211, 1213, 1215, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1237, 1239, 1241, 1244, 1248, 1249, 1253, 1263, 1264, 1266, 1268, 1269, 1270, 1277, 1281, 1282, 1283, 1284, 1286, 1287, 1288, 1291, 1292, 1293, 1294, 1298, 1301, 1309, 1312, 1316, 1318, 1326, 1337, 1342, 1346, 1347, 1349, 1357, 1360, 1365], "In": [51, 58, 140, 142, 153, 154, 157, 168, 172, 192, 197, 215, 217, 220, 229, 244, 245, 248, 259, 263, 270, 296, 305, 338, 341, 576, 577, 618, 638, 698, 699, 828, 850, 864, 868, 873, 874, 891, 908, 942, 1096, 1103, 1209, 1214, 1278, 1337, 1342], "It": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 50, 57, 58, 67, 69, 73, 91, 133, 134, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 194, 207, 245, 255, 262, 285, 295, 300, 307, 315, 324, 338, 341, 342, 427, 428, 508, 568, 577, 588, 625, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 756, 787, 824, 828, 845, 849, 850, 854, 860, 874, 878, 883, 901, 909, 916, 925, 942, 950, 1019, 1035, 1036, 1120, 1211, 1223, 1226, 1228, 1229, 1236, 1238, 1316, 1321, 1337, 1342], "Its": [230, 338, 506, 828, 1118, 1337], "NO": 948, "NOT": [126, 240, 279, 338, 568, 587, 661, 828, 896, 942, 1365], "No": [20, 243, 255, 338, 872, 883, 942], "Not": [218, 243, 338, 491, 521, 522, 828, 849, 862, 872, 942, 1105, 1337], "ON": 1365, "OR": [746, 747, 864, 942, 948, 1356], "ORs": [403, 828, 1006, 1337], "On": [736, 828, 876, 942], "One": [51, 207, 259, 295, 300, 338, 351, 617, 748, 760, 776, 782, 785, 793, 795, 798, 799, 808, 828, 854, 942, 948, 1037, 1337], "Or": [228, 229, 244, 270, 284, 308, 317, 338, 341, 484, 638, 671, 768, 769, 771, 772, 815, 816, 818, 824, 828, 867, 868, 873, 891, 900, 918, 942, 1098, 1337], "That": [144, 878, 942], "The": [20, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 56, 57, 59, 60, 65, 66, 68, 69, 70, 78, 82, 83, 91, 92, 94, 123, 125, 126, 127, 129, 133, 135, 138, 139, 140, 141, 142, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 168, 169, 170, 172, 174, 182, 199, 207, 208, 210, 211, 212, 213, 216, 217, 220, 227, 228, 229, 230, 235, 241, 243, 244, 245, 248, 255, 261, 263, 270, 271, 272, 273, 276, 277, 278, 285, 295, 296, 301, 304, 308, 312, 313, 315, 316, 317, 324, 338, 349, 390, 391, 392, 393, 407, 408, 428, 430, 433, 434, 435, 443, 453, 457, 458, 462, 464, 467, 475, 476, 487, 490, 493, 497, 498, 506, 539, 543, 576, 577, 591, 618, 625, 628, 631, 632, 633, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 665, 668, 674, 678, 679, 683, 688, 689, 690, 691, 696, 697, 698, 699, 707, 708, 709, 710, 711, 712, 713, 723, 727, 733, 734, 735, 754, 757, 775, 779, 788, 790, 804, 805, 806, 807, 810, 818, 820, 821, 823, 824, 828, 829, 830, 833, 835, 836, 837, 844, 849, 854, 855, 857, 858, 860, 861, 864, 867, 868, 871, 872, 873, 874, 878, 883, 887, 891, 893, 894, 895, 901, 905, 907, 912, 913, 916, 918, 925, 942, 946, 947, 948, 954, 957, 994, 995, 996, 1010, 1023, 1036, 1037, 1040, 1041, 1042, 1050, 1064, 1068, 1069, 1073, 1075, 1078, 1086, 1087, 1103, 1104, 1107, 1118, 1153, 1157, 1190, 1209, 1211, 1213, 1217, 1218, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1245, 1248, 1253, 1257, 1258, 1267, 1268, 1269, 1270, 1275, 1276, 1277, 1278, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1318, 1320, 1322, 1329, 1331, 1333, 1337, 1338, 1343, 1344, 1345, 1346, 1351, 1365, 1366, 1368], "Then": 157, "There": 1365, "These": [1, 32, 40, 132, 135, 140, 141, 192, 302, 338, 475, 827, 828, 1073, 1086], "To": [39, 58, 218, 338, 417, 433, 434, 491, 492, 675, 682, 683, 684, 687, 698, 699, 708, 709, 710, 711, 720, 828, 862, 942, 1024, 1040, 1041, 1105, 1254, 1261, 1262, 1263, 1266, 1277, 1278, 1299, 1318, 1337, 1365], "Will": [57, 58, 849, 850, 860, 887, 898, 942, 1337], "With": [147, 239, 281, 338, 382, 561, 662, 828, 849, 897, 942, 986, 1139, 1175, 1241, 1337], "_": [1, 51, 55, 192, 263, 293, 297, 338, 375, 412, 413, 547, 676, 684, 686, 688, 693, 694, 700, 703, 704, 1015, 1016, 1018, 1255, 1263, 1267, 1272, 1273, 1279, 1283, 1313, 1337], "__array_ufunc__": 950, "__call__": 824, "__dataframe__": 124, "__enter__": 1365, "__exit__": 1365, "__getattr__": 824, "__getitem__": 723, "__init__": [1, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 165, 177, 183, 184, 186, 187, 917, 1365], "__name__": [242, 338], "_bar_": 778, "_btm_by_a": [408, 828], "_btm_by_b": [408, 828], "_by_ca": [408, 735, 828], "_by_cb": [408, 735, 828], "_check_ord": [57, 58, 849, 850, 860, 887, 898, 942], "_df": [1, 52], "_diff": [312, 338, 912, 942], "_eager": [568, 849, 942], "_expr": [1, 53], "_foo": 582, "_geventdataframeresult": [58, 850, 942], "_is_not_nan": [522, 828], "_is_odd": [276, 338, 893, 942], "_isnan": [521, 828], "_isnul": [524, 828], "_kwarg": [849, 942], "_ldf": 1, "_lf": 54, "_lower_boundari": [229, 338, 868, 942], "_mean_squar": [317, 918], "_not_nul": [523, 828], "_o": [412, 413, 693, 694, 1015, 1016, 1272, 1273], "_revers": [602, 606, 635, 828], "_right": [243, 244, 245, 338, 872, 873, 874, 942], "_storage_account": 33, "_suffix": 607, "_sum": [317, 918], "_top_by_a": [735, 828], "_top_by_b": [735, 828], "_train": [914, 942], "_type_check": [46, 47, 48, 49, 57, 58, 849, 850, 860, 887, 898, 942], "_upper_boundari": [229, 338, 868, 942], "_verbos": 33, "_world": 778, "a1": [40, 52, 54, 338], "a101": 1368, "a123": [40, 338], "a2": [40, 52, 54, 338], "a_1": [704, 1283, 1313, 1337], "a_2": [1313, 1337], "a_3": [1313, 1337], "a_a": 808, "a_agg_list": [229, 338, 868, 942], "a_b_doubl": 774, "a_btm_by_a": [408, 828], "a_btm_by_b": [408, 828], "a_by_ca": [408, 735, 828], "a_by_cb": [408, 735, 828], "a_div_2": 1359, "a_div_5": 1359, "a_interpol": [513, 828], "a_is_even": [285, 338, 807, 901, 942], "a_isnul": [524, 828], "a_lag_": 757, "a_log2": 1359, "a_mod_2": 1359, "a_not_nul": [523, 828], "a_revers": [602, 606, 635, 828], "a_rol": 757, "a_suffix": 607, "a_times_2": [577, 828], "a_times_b": [576, 828], "a_top_by_a": [735, 828], "a_top_by_b": [735, 828], "a_txt": 808, "aa": [487, 675, 687, 775, 828, 948, 1037, 1254, 1266, 1337, 1360], "aaa": [1, 40, 338, 675, 687, 723, 725, 726, 948, 1254, 1266], "aaaa": [995, 996], "aabcdef": 709, "aad": [995, 996], "aag": 26, "aazz": 1360, "ab": [231, 247, 289, 312, 338, 699, 723, 725, 726, 828, 912, 942, 948, 1119, 1144, 1309, 1337, 1358, 1360], "ab12": 699, "ab12cd34ef": 699, "abc": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 347, 681, 684, 698, 708, 828, 948, 1260, 1263, 1277, 1278], "abc123": 1360, "abc456": [698, 1277, 1278, 1360], "abcabc": 699, "abcd": 1360, "abcdeff": 708, "abf": [142, 153, 154], "abl": [98, 140, 568], "about": [98, 133, 135, 140, 668, 675, 683, 684, 687, 698, 699, 828, 1248, 1254, 1262, 1263, 1266, 1277, 1278, 1337, 1368], "abov": [40, 244, 263, 338, 341, 818, 873, 942], "abs_a": 1359, "absolut": [142, 153, 154, 161, 162, 163, 164, 346, 483, 485, 486, 828, 953, 1097, 1099, 1100, 1337, 1359], "acc": [763, 764, 777, 802], "accent": 948, "accept": [37, 41, 45, 46, 47, 48, 49, 133, 135, 136, 138, 139, 142, 144, 146, 148, 150, 152, 155, 156, 157, 168, 182, 199, 209, 228, 276, 277, 281, 284, 301, 312, 313, 317, 338, 347, 408, 417, 487, 514, 618, 632, 633, 671, 700, 727, 735, 743, 745, 747, 752, 755, 756, 757, 758, 766, 775, 792, 794, 797, 806, 810, 812, 818, 824, 828, 844, 856, 867, 893, 894, 897, 900, 905, 912, 913, 918, 942, 947, 1024, 1125, 1209, 1217, 1218, 1241, 1279, 1337], "access": [37, 41, 45, 46, 47, 48, 49, 52, 53, 54, 55, 144, 148, 150, 152, 154, 155, 156, 157, 182, 196, 203, 241, 271, 272, 285, 338, 685, 723, 851, 901, 914, 942, 947, 1264, 1368], "accord": [271, 338, 625, 768, 769, 771, 772, 815, 816, 828, 1055, 1211, 1337], "accordingli": [133, 136, 138, 139, 144, 145, 146, 147, 148, 149, 150, 151], "account": [40, 130, 141, 154, 338, 457, 483, 485, 486, 828, 1068, 1097, 1099, 1100, 1337], "accumul": [763, 764, 777, 802], "acg": 26, "achiev": [248, 263, 324, 338, 413, 577, 694, 828, 1016, 1190, 1273, 1337], "aco": 1358, "acosd": 1358, "across": [40, 51, 141, 143, 208, 230, 243, 250, 252, 257, 278, 288, 338, 430, 506, 591, 745, 747, 763, 764, 766, 792, 794, 797, 812, 828, 855, 872, 895, 942, 1118, 1337], "action": [39, 338], "activ": [7, 8, 18, 19, 21, 22, 23, 24, 28, 29, 540, 684, 1154, 1263], "actual": [40, 126, 168, 172, 273, 338, 1243, 1337, 1360, 1367], "ad": [38, 40, 126, 143, 229, 285, 295, 300, 302, 307, 312, 313, 338, 353, 467, 490, 584, 585, 727, 763, 764, 807, 828, 868, 901, 909, 912, 913, 942, 948, 1078, 1104, 1316, 1321, 1337], "adbc": [38, 140, 141, 338], "adbc_driver_manag": 160, "adbc_ingest": [38, 338], "add": [39, 40, 139, 217, 229, 248, 312, 313, 314, 315, 338, 341, 428, 604, 605, 606, 607, 625, 727, 773, 777, 818, 828, 868, 872, 912, 913, 914, 915, 916, 942, 1103, 1337, 1342], "add_calendar_dai": 773, "add_calendar_month": 773, "add_calendar_year": 773, "add_chart": [40, 338], "add_dai": 773, "add_format": [40, 338], "add_hour": 773, "add_milli": 773, "add_second": 773, "add_seri": [40, 338], "add_week": 773, "add_worksheet": [40, 338], "addit": [29, 36, 38, 39, 40, 126, 137, 142, 143, 153, 154, 166, 168, 170, 172, 182, 212, 216, 228, 246, 261, 276, 277, 284, 297, 304, 312, 313, 317, 338, 347, 444, 487, 490, 618, 671, 675, 683, 684, 687, 698, 699, 723, 727, 752, 755, 756, 757, 758, 775, 806, 807, 810, 824, 828, 861, 867, 893, 894, 900, 907, 912, 913, 918, 942, 948, 1043, 1051, 1104, 1254, 1262, 1263, 1266, 1277, 1278, 1319, 1337, 1347, 1365], "addition": [59, 143, 271, 338, 948], "address": 684, "adjac": [40, 338], "adjust": [483, 485, 486, 668, 828, 1097, 1099, 1100, 1248, 1337], "adl": [142, 153, 154], "adlf": 154, "advanc": [40, 263, 338, 387, 568, 601, 604, 606, 608, 609, 991, 1182, 1368], "advantag": [40, 192, 262, 338], "advis": [40, 50, 91, 338], "aedt": 770, "aeiuo": [687, 1266], "af1": 51, "af2": 51, "af3": 51, "affect": [38, 161, 162, 163, 164, 338], "afm": 154, "afoo": [914, 942], "after": [40, 126, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 199, 200, 217, 301, 304, 338, 407, 408, 409, 487, 618, 628, 722, 734, 735, 828, 844, 905, 907, 942, 1010, 1103, 1213, 1301, 1322, 1337, 1352], "afterward": [50, 818], "ag": [255, 338, 883, 942, 1366], "again": [577, 828], "against": [38, 100, 138, 140, 220, 285, 338, 540, 687, 807, 864, 901, 942, 1154, 1266, 1346, 1365, 1367, 1368], "agg": [228, 229, 263, 270, 338, 348, 398, 403, 406, 408, 493, 495, 500, 503, 576, 577, 618, 670, 671, 735, 742, 768, 771, 790, 828, 849, 850, 860, 867, 868, 887, 891, 898, 942, 948], "agg_group": [780, 828], "agg_list": [576, 828], "aggreg": [135, 138, 139, 142, 150, 153, 222, 228, 229, 249, 251, 253, 256, 259, 263, 264, 265, 270, 286, 287, 306, 309, 317, 318, 320, 322, 338, 348, 398, 403, 406, 493, 509, 576, 577, 618, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 744, 745, 746, 747, 763, 764, 765, 766, 777, 782, 791, 792, 794, 796, 797, 802, 811, 812, 828, 868, 878, 879, 880, 881, 884, 885, 888, 891, 902, 903, 910, 918, 919, 921, 923, 942, 1001, 1006, 1009, 1121, 1223, 1224, 1225, 1227, 1230, 1231, 1232, 1337, 1353, 1355, 1358, 1364], "aggregate_funct": [263, 338, 948], "aho": [676, 686, 688, 700, 1255, 1265, 1267, 1279], "aiosqlit": 140, "alchemy_conn": 140, "algorithm": [198, 338, 354, 676, 686, 688, 700, 748, 828, 843, 942, 958, 1255, 1265, 1267, 1279, 1337], "alia": [1, 12, 51, 53, 55, 59, 89, 185, 189, 203, 229, 247, 263, 270, 304, 312, 315, 338, 341, 347, 351, 391, 392, 393, 394, 397, 407, 410, 412, 413, 414, 422, 423, 424, 425, 426, 428, 431, 436, 437, 439, 440, 441, 442, 443, 444, 445, 446, 448, 449, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 472, 474, 475, 476, 477, 478, 481, 482, 495, 497, 502, 504, 510, 511, 514, 517, 520, 528, 530, 552, 564, 570, 575, 577, 581, 584, 585, 587, 589, 594, 597, 599, 601, 612, 613, 617, 619, 623, 625, 628, 630, 658, 660, 675, 676, 677, 678, 680, 681, 683, 684, 686, 687, 688, 689, 693, 694, 700, 701, 702, 703, 704, 705, 706, 710, 711, 713, 723, 724, 725, 726, 728, 733, 734, 736, 742, 743, 749, 750, 751, 755, 756, 757, 758, 768, 771, 773, 774, 777, 778, 783, 786, 787, 789, 790, 802, 806, 810, 815, 818, 828, 868, 870, 877, 891, 907, 912, 916, 942, 1036, 1043, 1044, 1047, 1050, 1051, 1052, 1053, 1058, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1075, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1144, 1211, 1216, 1262, 1263, 1267, 1278, 1283, 1284, 1337], "alias": [285, 338, 584, 585, 901, 942], "alic": [138, 1366], "align": [10, 15, 16, 40, 51, 59, 338, 1366], "align_fram": 59, "align_ful": 59, "align_inn": 59, "align_left": 59, "align_right": 59, "all": [1, 4, 5, 8, 13, 17, 20, 25, 30, 37, 39, 40, 45, 46, 49, 51, 57, 64, 92, 109, 111, 123, 128, 134, 138, 139, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 165, 166, 169, 172, 192, 197, 198, 200, 207, 209, 211, 212, 219, 231, 236, 238, 240, 241, 242, 243, 245, 246, 247, 252, 254, 258, 259, 263, 266, 267, 271, 272, 273, 277, 283, 284, 288, 289, 293, 295, 296, 300, 303, 305, 306, 307, 308, 313, 315, 338, 341, 351, 353, 375, 390, 408, 421, 427, 433, 434, 435, 436, 467, 487, 492, 498, 505, 506, 509, 512, 516, 519, 523, 524, 529, 539, 540, 547, 565, 568, 576, 598, 601, 602, 604, 605, 606, 607, 608, 609, 616, 618, 628, 633, 635, 639, 663, 669, 671, 677, 681, 684, 685, 689, 692, 695, 699, 707, 708, 709, 713, 735, 745, 754, 756, 763, 764, 765, 766, 775, 777, 782, 783, 786, 794, 802, 810, 811, 812, 818, 824, 828, 834, 840, 843, 846, 849, 850, 854, 856, 857, 858, 860, 863, 872, 874, 878, 882, 887, 889, 894, 898, 899, 900, 906, 908, 909, 913, 914, 916, 942, 948, 979, 1035, 1037, 1040, 1041, 1042, 1043, 1078, 1119, 1126, 1138, 1144, 1153, 1154, 1161, 1179, 1182, 1213, 1218, 1223, 1249, 1256, 1260, 1263, 1264, 1267, 1268, 1271, 1278, 1286, 1287, 1288, 1292, 1309, 1318, 1337, 1341, 1342, 1347, 1349, 1354, 1355, 1360, 1364, 1365, 1367, 1368], "all_compat": 1349, "all_data": 1365, "all_horizont": [211, 212, 338, 744, 857, 858, 942], "all_stat": 30, "alloc": [135, 138, 139, 215, 266, 338, 828, 917, 1096, 1337], "allow": [1, 8, 39, 40, 46, 47, 48, 49, 50, 59, 91, 100, 124, 140, 143, 152, 155, 156, 157, 158, 165, 168, 169, 172, 192, 196, 241, 244, 246, 271, 272, 274, 296, 297, 300, 303, 316, 338, 410, 414, 457, 464, 467, 556, 576, 577, 584, 585, 630, 659, 712, 714, 715, 828, 872, 873, 878, 882, 906, 914, 942, 946, 948, 1068, 1075, 1078, 1170, 1190, 1215, 1235, 1291, 1293, 1294, 1318, 1319, 1337, 1360, 1368], "allow_alias": [584, 585], "allow_chunk": [168, 172], "allow_copi": [124, 196, 296, 338, 1318, 1337], "allow_dupl": [625, 828, 1211, 1337], "allow_exact_match": [244, 338, 873, 942], "allow_infin": [168, 172], "allow_masked_out": [168, 172], "allow_missing_column": [150, 157], "allow_nul": [165, 168, 172, 1368], "allow_object": 788, "allow_parallel": [244, 338, 872, 873, 942], "allow_pyarrow_filt": 158, "allow_time_zon": [168, 169, 172], "allowed_dtyp": [168, 169, 172, 1368], "almost": [58, 248, 324, 338, 712, 714, 715, 850, 942, 946, 1190, 1291, 1293, 1294, 1337], "along": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 338, 942], "alpha": [483, 485, 486, 828, 860, 887, 898, 942, 948, 1097, 1099, 1100, 1337], "alpha_i": [484, 828, 1098, 1337], "alphabet": [948, 1368], "alphanumer": [720, 948, 1299], "alreadi": [38, 39, 99, 295, 338, 427, 540, 592, 740, 828, 898, 942, 1035, 1154, 1326, 1337], "also": [27, 37, 40, 46, 50, 126, 140, 143, 144, 149, 150, 152, 157, 167, 168, 171, 172, 177, 186, 192, 213, 228, 229, 255, 259, 263, 270, 272, 276, 284, 295, 307, 312, 315, 338, 423, 426, 435, 457, 461, 467, 493, 514, 577, 584, 585, 618, 628, 632, 633, 671, 698, 699, 700, 707, 708, 723, 754, 763, 764, 767, 770, 777, 779, 802, 818, 827, 828, 834, 867, 868, 883, 891, 893, 900, 909, 912, 914, 916, 942, 948, 1042, 1072, 1125, 1213, 1217, 1218, 1256, 1277, 1278, 1279, 1286, 1337, 1341, 1347, 1349, 1352, 1356, 1360, 1363, 1365, 1366], "alt": [338, 341, 1337, 1342], "altair": [160, 338, 341, 1337, 1342], "altern": [40, 177, 338, 824, 1357], "although": [285, 338, 901, 942], "alwai": [13, 37, 39, 46, 67, 69, 73, 138, 199, 220, 228, 243, 244, 248, 301, 324, 338, 407, 408, 576, 588, 712, 734, 735, 818, 828, 844, 864, 872, 873, 878, 905, 942, 948, 1010, 1190, 1291, 1322, 1337, 1346, 1347, 1365, 1368], "am": [701, 1280], "amarillo": 1360, "amaz": [338, 341, 1337, 1342], "amazonaw": 32, "ambigu": [460, 461, 462, 475, 712, 715, 770, 1071, 1072, 1073, 1086, 1291, 1294], "america": 771, "amount": [50, 68, 91, 148, 152, 155, 156, 577, 773, 828, 1354], "amsterdam": [461, 1072], "an": [1, 30, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 55, 59, 67, 68, 69, 96, 100, 103, 106, 113, 115, 123, 125, 126, 129, 133, 135, 138, 139, 140, 141, 142, 143, 145, 148, 149, 150, 152, 153, 154, 155, 156, 157, 166, 168, 172, 182, 201, 202, 203, 209, 215, 218, 222, 224, 229, 240, 241, 242, 244, 245, 248, 259, 263, 267, 268, 270, 271, 275, 285, 290, 296, 300, 302, 306, 307, 312, 315, 324, 338, 341, 349, 371, 374, 386, 392, 398, 401, 403, 404, 406, 423, 424, 425, 426, 427, 428, 435, 439, 440, 457, 461, 464, 478, 484, 492, 493, 499, 500, 503, 537, 540, 543, 545, 567, 568, 576, 577, 589, 591, 601, 602, 623, 624, 625, 633, 634, 638, 639, 640, 642, 644, 646, 648, 651, 653, 655, 674, 675, 678, 684, 687, 691, 712, 714, 715, 717, 719, 733, 736, 744, 749, 753, 768, 769, 771, 772, 774, 776, 779, 783, 784, 785, 786, 787, 788, 800, 802, 803, 806, 810, 815, 816, 818, 819, 824, 828, 846, 847, 848, 850, 854, 856, 860, 864, 868, 873, 874, 878, 887, 889, 891, 892, 898, 901, 909, 912, 914, 916, 917, 925, 939, 942, 946, 947, 948, 975, 978, 990, 995, 1001, 1004, 1006, 1007, 1009, 1023, 1025, 1031, 1032, 1033, 1034, 1035, 1042, 1046, 1075, 1089, 1096, 1098, 1139, 1151, 1154, 1157, 1159, 1181, 1190, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1236, 1238, 1253, 1254, 1257, 1263, 1266, 1270, 1291, 1293, 1294, 1296, 1298, 1318, 1320, 1337, 1355, 1357, 1360, 1364, 1365, 1367], "ana": [701, 1280], "anan": [701, 1280], "ananab": 1360, "and_": 828, "ang": 1360, "angl": [750, 751], "ani": [4, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 67, 69, 73, 123, 124, 125, 126, 127, 128, 129, 133, 134, 135, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 150, 152, 153, 154, 155, 156, 157, 158, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 192, 194, 197, 199, 205, 209, 211, 212, 217, 219, 220, 222, 224, 239, 241, 242, 243, 244, 245, 248, 252, 262, 267, 271, 272, 273, 285, 288, 291, 292, 295, 296, 297, 300, 301, 303, 306, 307, 315, 338, 341, 342, 347, 350, 351, 375, 407, 408, 409, 427, 428, 463, 481, 482, 492, 493, 497, 500, 502, 504, 508, 518, 528, 535, 540, 547, 575, 576, 577, 584, 594, 597, 599, 601, 602, 604, 606, 608, 609, 612, 613, 617, 622, 625, 632, 633, 634, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 660, 664, 674, 676, 690, 708, 709, 710, 711, 712, 714, 715, 717, 719, 728, 734, 735, 736, 743, 744, 745, 747, 756, 758, 759, 760, 787, 788, 790, 794, 812, 818, 828, 844, 849, 850, 856, 857, 858, 860, 863, 864, 872, 873, 874, 886, 889, 901, 905, 906, 909, 916, 917, 942, 946, 948, 950, 952, 955, 979, 1010, 1019, 1035, 1036, 1074, 1093, 1094, 1103, 1106, 1111, 1113, 1115, 1120, 1130, 1139, 1142, 1149, 1154, 1161, 1189, 1190, 1201, 1202, 1211, 1217, 1218, 1219, 1223, 1226, 1228, 1229, 1236, 1237, 1253, 1255, 1269, 1291, 1293, 1294, 1296, 1298, 1316, 1317, 1318, 1319, 1321, 1322, 1337, 1342, 1365, 1368], "anna": [255, 338, 883, 942], "annex": [695, 1274], "anoth": [93, 167, 200, 208, 214, 228, 244, 278, 338, 427, 430, 437, 513, 543, 581, 587, 591, 632, 641, 643, 645, 647, 649, 652, 654, 656, 687, 828, 846, 855, 867, 873, 895, 914, 942, 1035, 1044, 1095, 1103, 1124, 1157, 1217, 1218, 1266, 1337, 1359, 1360], "anti": [243, 338, 872, 925, 942, 1236, 1238, 1337, 1353], "any_horizont": 746, "anyth": [39, 271, 338], "anywher": [394, 397, 712, 714, 715, 1291, 1293, 1294], "ap": 1360, "apach": [35, 41, 42, 45, 136, 140, 141, 144, 146, 154, 195, 338, 951], "apaya": [713, 1292], "api": [0, 32, 37, 41, 45, 46, 47, 48, 49, 124, 148, 150, 152, 155, 156, 157, 158, 177, 182, 196, 248, 324, 338, 577, 790, 828, 925, 942, 1190, 1337, 1364], "apia": [436, 1043], "app": [414, 706, 1017, 1285], "appear": [40, 63, 126, 163, 164, 338, 699, 738, 828, 948, 1324, 1337, 1366], "append": [38, 39, 168, 217, 243, 244, 245, 338, 629, 818, 828, 872, 873, 874, 942, 1103, 1337], "appl": [204, 233, 243, 267, 268, 291, 319, 320, 322, 323, 325, 326, 327, 328, 329, 330, 331, 338, 408, 410, 414, 635, 680, 706, 735, 828, 872, 889, 920, 921, 923, 924, 926, 927, 928, 929, 930, 931, 932, 942, 1012, 1017, 1259, 1285, 1353, 1360], "appli": [10, 20, 37, 40, 46, 59, 133, 140, 152, 165, 168, 172, 192, 207, 222, 245, 248, 262, 284, 285, 295, 324, 338, 363, 438, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 463, 465, 476, 477, 479, 485, 486, 576, 577, 622, 640, 641, 642, 643, 646, 647, 653, 654, 671, 698, 699, 712, 714, 715, 719, 752, 763, 764, 777, 789, 790, 802, 807, 818, 828, 854, 874, 878, 886, 900, 901, 925, 942, 1024, 1045, 1048, 1049, 1050, 1053, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1070, 1074, 1076, 1087, 1088, 1090, 1099, 1100, 1190, 1224, 1225, 1227, 1231, 1277, 1278, 1291, 1293, 1294, 1298, 1337, 1346], "applic": [296, 338, 577, 828], "apply_on_context_ent": 192, "appropri": [40, 158, 220, 296, 338, 467, 628, 828, 864, 942, 1078, 1213, 1337], "approx": [354, 828], "approx_n_uniqu": [338, 828, 942, 1337], "approxim": [45, 198, 338, 354, 484, 748, 828, 843, 942, 958, 1098, 1337, 1359, 1368], "april": [464, 1075, 1360, 1361], "ar": [1, 10, 11, 17, 20, 30, 32, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 58, 59, 90, 91, 98, 104, 120, 123, 124, 125, 126, 127, 128, 129, 130, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 161, 162, 163, 164, 166, 168, 169, 170, 172, 182, 192, 196, 199, 200, 205, 207, 211, 212, 215, 218, 220, 221, 222, 227, 228, 229, 241, 243, 244, 245, 246, 248, 254, 255, 261, 263, 270, 271, 272, 273, 276, 277, 281, 284, 291, 295, 296, 297, 300, 301, 305, 307, 308, 312, 313, 316, 317, 338, 350, 352, 366, 382, 387, 407, 408, 409, 417, 423, 425, 426, 435, 462, 467, 475, 480, 482, 483, 484, 485, 486, 491, 493, 514, 516, 518, 519, 521, 522, 523, 524, 526, 531, 561, 568, 576, 613, 618, 625, 628, 631, 632, 633, 634, 638, 641, 643, 645, 647, 649, 650, 652, 654, 656, 662, 665, 668, 670, 671, 676, 685, 689, 691, 692, 696, 697, 698, 699, 700, 702, 713, 715, 717, 722, 727, 729, 733, 734, 735, 744, 745, 747, 752, 755, 756, 757, 758, 759, 766, 768, 769, 771, 772, 787, 792, 794, 797, 806, 810, 812, 815, 816, 818, 820, 821, 823, 827, 828, 829, 830, 833, 834, 835, 836, 837, 840, 844, 849, 850, 854, 857, 858, 862, 864, 867, 868, 872, 873, 874, 878, 882, 883, 887, 889, 891, 893, 894, 897, 900, 905, 908, 909, 912, 913, 914, 918, 942, 946, 948, 955, 956, 970, 986, 991, 1010, 1014, 1024, 1033, 1034, 1042, 1073, 1078, 1086, 1092, 1094, 1096, 1097, 1098, 1099, 1100, 1105, 1107, 1109, 1125, 1128, 1130, 1131, 1133, 1134, 1135, 1136, 1140, 1145, 1175, 1182, 1202, 1211, 1213, 1217, 1218, 1219, 1229, 1241, 1245, 1248, 1255, 1264, 1268, 1270, 1275, 1276, 1277, 1278, 1281, 1292, 1294, 1296, 1301, 1308, 1316, 1318, 1319, 1320, 1322, 1329, 1331, 1333, 1337, 1338, 1341, 1343, 1344, 1345, 1347, 1349, 1352, 1357, 1365, 1368], "arbitrari": [80, 224, 338, 430, 828, 855, 942, 948], "arbitrarili": [248, 338], "arcco": [828, 1337], "arccosh": [828, 1337], "arcsin": [828, 1337], "arcsinh": [828, 1337], "arctan": [750, 751, 828, 1337], "arctan2": 751, "arctanh": [828, 1337], "aren": [37, 46, 338, 942], "arg": [31, 50, 61, 62, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 135, 185, 189, 220, 262, 338, 363, 622, 752, 778, 828, 864, 886, 942, 1190, 1337, 1350], "arg_max": [828, 1337], "arg_min": [828, 1337], "arg_sort": [828, 1337], "arg_tru": [753, 828, 1337], "arg_uniqu": [828, 1337], "arg_wher": [364, 828], "argmax": [576, 828], "argument": [36, 39, 45, 133, 135, 137, 138, 142, 150, 152, 153, 168, 170, 172, 182, 205, 209, 216, 228, 229, 244, 261, 262, 270, 276, 277, 284, 297, 304, 308, 312, 313, 317, 338, 462, 475, 487, 493, 514, 576, 618, 622, 638, 671, 707, 708, 709, 727, 744, 750, 751, 752, 755, 756, 757, 758, 760, 775, 806, 810, 818, 824, 828, 856, 861, 867, 868, 873, 886, 891, 893, 894, 900, 907, 912, 913, 918, 939, 942, 948, 1073, 1086, 1125, 1286, 1287, 1288, 1319, 1337, 1359, 1360], "aris": 140, "arithmet": [222, 338], "arm": 160, "arm64": 160, "around": [37, 46, 338, 942], "arr": [296, 338, 820, 1318, 1329, 1337], "arr_bar": 1355, "arr_foo": 1355, "arrai": [123, 127, 138, 139, 142, 150, 153, 194, 215, 216, 290, 295, 296, 297, 338, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 395, 423, 424, 425, 426, 535, 550, 551, 552, 553, 555, 564, 565, 567, 570, 572, 576, 634, 640, 642, 644, 646, 648, 651, 653, 655, 661, 733, 756, 774, 807, 828, 861, 942, 947, 950, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 998, 1031, 1032, 1033, 1034, 1039, 1096, 1149, 1164, 1165, 1166, 1167, 1169, 1177, 1178, 1179, 1181, 1184, 1186, 1187, 1219, 1224, 1225, 1227, 1230, 1231, 1232, 1239, 1243, 1312, 1316, 1318, 1319, 1320, 1337, 1358, 1364, 1367], "array_agg": 1358, "array_contain": 1358, "array_get": 1358, "array_length": 1358, "array_low": 1358, "array_mean": 1358, "array_revers": 1358, "array_sum": 1358, "array_to_str": 1358, "array_uniqu": 1358, "array_upp": 1358, "arraylik": [1039, 1337], "arrow": [41, 42, 47, 123, 140, 141, 144, 146, 155, 195, 241, 272, 273, 290, 292, 296, 338, 942, 951, 1312, 1318, 1337], "arrowinvaliderror": [39, 338], "as_": [1337, 1342], "as_dict": [139, 261, 338], "as_expr": 948, "as_seri": [200, 291, 338, 846, 942, 948], "asarrai": [194, 950], "ascend": [229, 270, 338, 618, 638, 828, 868, 891, 942], "ascii": [7, 20, 412, 413, 676, 686, 688, 689, 693, 694, 700, 702, 713, 722, 948, 1015, 1016, 1255, 1265, 1267, 1268, 1272, 1273, 1279, 1281, 1292, 1301], "ascii_borders_onli": 20, "ascii_borders_only_condens": 20, "ascii_case_insensit": [676, 686, 688, 700, 1255, 1265, 1267, 1279], "ascii_ful": 20, "ascii_full_condens": 20, "ascii_horizontal_onli": 20, "ascii_lett": 1368, "ascii_markdown": 20, "ascii_no_bord": 20, "ascii_onli": 948, "ascii_t": 192, "ascii_uppercas": [306, 338], "asd": [677, 684, 1256, 1263], "asia": [130, 948, 1048, 1049, 1076], "asid": 467, "asin": 1358, "asind": 1358, "asof": [244, 338, 873, 942], "asofjoinstrategi": [244, 338, 873, 942], "assert": [161, 162, 163, 164, 168, 172, 270, 338, 840, 948], "assert_frame_equ": [162, 163, 214, 338, 1368], "assert_frame_not_equ": [161, 164], "assert_series_equ": [161, 164, 1095, 1337, 1368], "assert_series_not_equ": [162, 163], "assert_someth": 166, "assertionerror": [161, 162, 163, 164], "assign": [166, 229, 323, 338, 387, 568, 618, 628, 704, 705, 828, 868, 924, 942, 991, 1182, 1213, 1283, 1284, 1337], "associ": [38, 40, 51, 141, 143, 167, 170, 273, 338, 947, 1348, 1350, 1354], "assum": [32, 273, 338, 878, 925, 942, 1360], "assume_rol": 32, "assumpt": [576, 828], "async": [140, 850, 942], "async_engin": 140, "asynchron": [58, 140, 850, 942], "asyncio": [58, 140, 850, 942], "asyncresult": [58, 850, 942], "asyncsurrealdb": 140, "ata": 26, "atan": 1358, "atan2": [750, 751, 1358], "atan2_ab": 1362, "atan2d": [751, 1358], "atan2d_ab": 1362, "atand": 1358, "atg": 26, "atgataaaggag": 26, "atol": [161, 162, 163, 164], "attain": [671, 828], "attempt": [1, 430, 828, 855, 942], "attr": [338, 341, 1337, 1342], "attribut": [60, 63, 66, 67, 68, 69, 70, 78, 82, 165, 183, 184, 186, 187, 338, 341, 820, 821, 823, 824, 829, 830, 833, 835, 836, 837, 917, 942, 1329, 1331, 1333, 1337, 1338, 1342, 1343, 1344, 1345], "attributeerror": 1, "audi": [291, 338, 635, 828], "august": 467, "australia": 770, "auth": 34, "authent": [39, 142, 150, 152, 153, 154, 155, 157, 177, 338], "author": 1, "auto": [37, 39, 41, 45, 46, 47, 48, 49, 59, 123, 125, 126, 127, 129, 142, 147, 148, 150, 152, 153, 155, 156, 157, 177, 182, 302, 338, 942, 1368], "auto_structifi": [276, 312, 338, 893, 912, 942], "autofilt": [40, 338], "autofit": [40, 338], "autogener": [138, 139, 143, 149, 152], "automat": [8, 37, 46, 59, 123, 125, 126, 127, 129, 130, 135, 138, 139, 140, 141, 147, 148, 150, 152, 155, 156, 168, 172, 174, 177, 276, 285, 312, 338, 576, 633, 707, 708, 709, 807, 828, 893, 901, 912, 942, 1217, 1218, 1286, 1287, 1288, 1321, 1337, 1347, 1349, 1352, 1365], "autumn": [698, 699], "avail": [40, 45, 49, 132, 140, 141, 142, 153, 154, 166, 179, 180, 181, 192, 263, 285, 337, 338, 467, 628, 807, 820, 821, 823, 827, 828, 829, 830, 833, 834, 835, 836, 837, 840, 901, 940, 941, 942, 948, 1037, 1213, 1329, 1331, 1333, 1337, 1338, 1341, 1343, 1344, 1345, 1356], "available_timezon": [66, 948], "averag": [40, 338, 483, 484, 485, 486, 628, 828, 1097, 1098, 1099, 1100, 1213, 1337, 1354], "avg": 1358, "avocado": 1360, "avoid": [168, 172, 220, 272, 338, 349, 828, 864, 942], "avro": [35, 136, 185, 338, 840], "avrocompress": [35, 338], "aw": [32, 37, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 338, 942], "awai": 1359, "await": [58, 140, 850, 936, 942], "awar": [10, 140, 241, 272, 273, 292, 338, 484, 676, 686, 688, 700, 715, 828, 942, 1098, 1255, 1265, 1267, 1279, 1294, 1337], "aws_access_key_id": [39, 142, 153, 157, 338], "aws_region": [39, 153, 157, 338], "aws_secret_access_kei": [39, 142, 153, 157, 338], "awsassumerolekwarg": 32, "axi": [254, 305, 338, 341, 750, 751, 882, 908, 942, 1337, 1342], "aya": [702, 1281, 1292], "az": [142, 153, 154], "azur": [33, 37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 154, 155, 156, 157, 182, 338, 942], "azure_storage_account_kei": [142, 153, 154], "azure_storage_account_nam": [142, 153, 154], "b": [1, 10, 35, 37, 39, 41, 42, 45, 54, 59, 82, 95, 98, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 140, 143, 196, 197, 198, 199, 201, 202, 203, 204, 206, 208, 209, 210, 211, 212, 213, 214, 215, 216, 218, 219, 220, 222, 223, 225, 226, 227, 228, 229, 230, 231, 233, 234, 236, 238, 239, 240, 241, 242, 243, 246, 247, 249, 251, 253, 256, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 271, 272, 273, 274, 275, 276, 281, 283, 284, 285, 286, 287, 289, 290, 291, 293, 294, 296, 297, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 347, 349, 350, 352, 353, 363, 365, 370, 375, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 406, 408, 409, 421, 428, 432, 464, 467, 487, 489, 491, 492, 493, 495, 498, 505, 506, 509, 512, 513, 514, 516, 519, 521, 522, 523, 524, 529, 535, 540, 547, 557, 558, 559, 560, 576, 577, 582, 598, 601, 602, 603, 604, 605, 606, 607, 615, 616, 618, 622, 625, 628, 632, 633, 635, 637, 663, 669, 671, 678, 682, 687, 691, 698, 699, 723, 724, 735, 738, 742, 744, 745, 746, 747, 748, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 774, 775, 776, 777, 778, 781, 782, 783, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 804, 805, 807, 809, 810, 811, 812, 813, 817, 824, 828, 843, 844, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 872, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 926, 927, 928, 929, 930, 931, 932, 933, 942, 948, 954, 957, 979, 994, 995, 996, 997, 998, 999, 1000, 1014, 1018, 1019, 1036, 1039, 1075, 1078, 1092, 1095, 1096, 1103, 1106, 1125, 1130, 1149, 1171, 1172, 1173, 1174, 1211, 1216, 1257, 1261, 1266, 1270, 1277, 1278, 1302, 1304, 1305, 1307, 1319, 1324, 1337, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1360, 1361, 1362, 1365], "b1": [52, 54], "b2": [52, 54], "b345": [40, 338], "b4": [40, 338], "b_b": [285, 338], "b_btm_by_a": [408, 828], "b_btm_by_b": [408, 828], "b_by_ca": [408, 735, 828], "b_by_cb": [408, 735, 828], "b_is_not_nan": [522, 828], "b_isnan": [521, 828], "b_isnul": [524, 828], "b_not_nul": [523, 828], "b_revers": [602, 606, 635, 828], "b_suffix": 607, "b_sum": [317, 918], "b_top_by_a": [735, 828], "b_top_by_b": [735, 828], "ba": [430, 487, 591, 706, 775, 828, 948], "back": [4, 51, 157, 217, 229, 278, 296, 297, 338, 591, 618, 699, 828, 849, 868, 895, 917, 942, 1103, 1319, 1337], "backend": [39, 140, 141, 142, 153, 154, 338, 341, 1337, 1342], "background": [338, 342, 849, 941, 942], "backward": [45, 49, 219, 244, 338, 390, 435, 455, 492, 828, 863, 873, 942, 1042, 1066, 1106, 1337], "backward_fil": [498, 662, 828], "bad": [698, 699, 1277, 1278], "balanc": [171, 173, 1368], "ballon_dor": [683, 685, 1262, 1264], "banana": [204, 291, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 408, 635, 680, 706, 735, 828, 921, 923, 926, 927, 928, 929, 930, 931, 932, 1360], "banded_column": [40, 338], "banded_row": [40, 338], "bar": [35, 37, 39, 41, 42, 43, 44, 45, 134, 147, 148, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 217, 220, 222, 224, 225, 226, 231, 233, 234, 235, 237, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 263, 265, 267, 268, 271, 274, 275, 276, 278, 283, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 303, 304, 309, 310, 311, 316, 338, 341, 411, 430, 511, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 668, 677, 679, 682, 684, 685, 701, 703, 705, 710, 711, 748, 759, 760, 761, 776, 781, 782, 785, 786, 791, 793, 795, 796, 798, 799, 806, 809, 813, 817, 818, 824, 828, 846, 851, 852, 856, 857, 858, 859, 864, 870, 871, 872, 885, 889, 892, 893, 906, 907, 911, 942, 947, 948, 1013, 1161, 1248, 1256, 1258, 1261, 1263, 1264, 1280, 1284, 1289, 1290, 1337, 1351, 1353, 1354, 1355, 1357, 1360, 1363], "bar2": 1360, "bar22": [222, 338], "bar_": 703, "bar_3": [293, 338], "bar_4": [293, 338], "bar_a": [263, 338], "bar_at_2": 1355, "bar_avg": 1354, "bar_b": [263, 338], "bar_color": [40, 338], "bar_max": 1354, "bar_median": 1354, "bar_min": 1354, "bar_negative_border_color_sam": [40, 338], "bar_negative_color_sam": [40, 338], "bar_std": 1354, "bar_sum": 1354, "bar_var": 1354, "bare": [584, 585, 948], "base": [31, 40, 64, 109, 111, 143, 170, 212, 220, 229, 245, 270, 338, 436, 444, 480, 483, 484, 485, 486, 493, 508, 513, 571, 572, 576, 577, 623, 625, 633, 638, 641, 643, 645, 647, 649, 652, 654, 656, 717, 828, 864, 868, 874, 891, 942, 948, 1043, 1051, 1092, 1097, 1098, 1099, 1100, 1120, 1124, 1185, 1186, 1190, 1209, 1211, 1217, 1218, 1296, 1328, 1337, 1353, 1359, 1368], "base64": [392, 393, 678, 679, 995, 996, 1257, 1258], "base_nam": [302, 338], "base_utc_offset": [444, 1051], "baseexcept": 1365, "basi": [40, 143, 168, 338], "basic": [40, 194, 338, 583, 950, 1368], "basic_chart": [40, 338], "batch": [42, 57, 58, 132, 133, 139, 140, 146, 148, 156, 158, 272, 300, 338, 849, 850, 878, 942], "batch_siz": [37, 46, 133, 138, 139, 140, 148, 156, 158, 300, 338, 942], "batchedcsvread": 139, "baz": [224, 234, 235, 304, 338, 685, 703, 705, 776, 785, 799, 824, 871, 907, 942, 947, 948, 1264, 1284, 1351, 1357, 1360], "bb": [948, 1037, 1337, 1360, 1365], "bbb": [1, 40, 338, 723, 725, 726, 948], "bc": [687, 699, 811, 1266], "bcbc45": 1360, "bea": 12, "bear": 948, "bearer": 177, "bearer_token": 177, "beauti": 12, "becaus": [148, 156, 215, 229, 246, 248, 306, 324, 338, 497, 540, 568, 828, 868, 925, 942, 1096, 1154, 1190, 1337], "becom": [170, 244, 337, 338, 873, 940, 941, 942], "bed3": [40, 338], "been": [5, 30, 40, 175, 196, 319, 338, 499, 577, 595, 628, 828, 920, 1213, 1337], "beetl": [291, 338, 635, 828], "befor": [40, 65, 66, 133, 135, 138, 140, 143, 152, 158, 161, 162, 163, 164, 174, 192, 217, 229, 244, 285, 295, 300, 304, 338, 401, 402, 404, 405, 425, 426, 427, 576, 618, 619, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 682, 722, 729, 757, 804, 805, 828, 868, 870, 873, 907, 942, 1004, 1005, 1007, 1008, 1033, 1034, 1035, 1103, 1206, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1261, 1301, 1308, 1337, 1353], "beforehand": [712, 714, 715, 1291, 1293, 1294], "begin": [12, 40, 338, 483, 485, 486, 683, 713, 828, 1097, 1099, 1100, 1262, 1292, 1337], "behav": [220, 338, 493, 577, 708, 709, 828, 864, 942], "behavior": [45, 49, 150, 157, 211, 212, 220, 243, 244, 338, 374, 499, 543, 545, 682, 776, 785, 828, 857, 858, 864, 872, 873, 939, 942, 978, 1157, 1159, 1261], "behaviour": [10, 51, 211, 212, 285, 338, 675, 683, 684, 687, 698, 699, 736, 807, 828, 857, 858, 901, 942, 1254, 1262, 1263, 1266, 1277, 1278], "behind": 174, "being": [13, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 133, 134, 138, 139, 140, 142, 143, 148, 149, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 200, 216, 245, 285, 293, 295, 300, 307, 338, 341, 342, 427, 428, 508, 577, 625, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 682, 754, 756, 774, 787, 828, 846, 849, 850, 860, 861, 874, 901, 909, 942, 1019, 1035, 1036, 1120, 1211, 1223, 1226, 1228, 1229, 1261, 1313, 1316, 1321, 1337, 1342, 1368], "belong": [1, 229, 338, 868, 942], "below": [19, 39, 142, 143, 153, 154, 212, 220, 263, 338, 467, 492, 689, 698, 699, 713, 768, 769, 771, 772, 815, 816, 818, 824, 828, 864, 942, 1078, 1268, 1277, 1278, 1292], "benchmark": 138, "best": [248, 324, 338, 577, 828, 1190, 1337], "better": [248, 295, 296, 324, 338, 413, 577, 694, 828, 845, 925, 942, 1016, 1236, 1238, 1273, 1337], "between": [24, 59, 94, 165, 166, 168, 172, 197, 205, 243, 255, 265, 272, 330, 338, 375, 409, 431, 432, 467, 514, 538, 547, 557, 558, 559, 560, 619, 625, 626, 648, 649, 674, 690, 750, 751, 754, 759, 761, 801, 804, 805, 828, 872, 883, 888, 931, 942, 979, 1011, 1018, 1038, 1039, 1078, 1125, 1152, 1161, 1171, 1172, 1173, 1174, 1206, 1211, 1212, 1228, 1253, 1269, 1337, 1354, 1362], "between_ab": [514, 828], "beyond": [720, 1299], "bia": [485, 486, 526, 650, 668, 828, 1099, 1100, 1140, 1229, 1248, 1337], "bias": [526, 668, 828, 1140, 1248, 1337], "big": [139, 395, 998], "big_fil": 139, "bigidx": 131, "bigqueri": 141, "bigquery_format": 185, "bin": [428, 508, 625, 717, 743, 821, 828, 1036, 1120, 1211, 1296, 1331, 1337, 1342], "bin2int": 395, "bin_count": [508, 828, 1120, 1337], "bin_i": [743, 828], "bin_x": [743, 828], "bin_xor_xi": [743, 828], "binari": [40, 41, 134, 140, 208, 278, 338, 391, 392, 393, 394, 395, 396, 397, 430, 591, 678, 828, 855, 895, 942, 948, 994, 995, 997, 998, 999, 1000, 1257, 1356], "binary_str": [743, 828], "bind": 143, "birthdai": 138, "bit": [65, 66, 67, 68, 71, 72, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 399, 400, 401, 402, 404, 405, 630, 675, 828, 1002, 1004, 1005, 1007, 1008, 1215, 1254, 1337, 1356, 1360], "bit_and": 1358, "bit_count": 1358, "bit_length": 1358, "bit_or": 1358, "bit_xor": 1358, "bitmap": [215, 338, 1096, 1337], "bitwis": [351, 398, 403, 406, 617, 743, 744, 745, 746, 747, 828, 1001, 1006, 1009, 1337, 1356, 1358], "bitwise_and": [828, 1337], "bitwise_count_on": [828, 1337], "bitwise_count_zero": [828, 1337], "bitwise_leading_on": [828, 1337], "bitwise_leading_zero": [828, 1337], "bitwise_or": [828, 1337], "bitwise_trailing_on": [828, 1337], "bitwise_trailing_zero": [828, 1337], "bitwise_xor": [828, 1337], "bla": [677, 684, 1256, 1263], "black": [248, 338, 391, 392, 393, 394, 397], "blindli": [540, 1154], "block": [20, 58, 228, 303, 338, 818, 850, 867, 889, 906, 915, 916, 925, 942, 1236, 1238, 1337], "blue": [50, 90, 91, 391, 392, 393, 394, 397, 740, 828, 1326, 1337], "bob": [138, 255, 338, 883, 942, 1366], "bodi": [40, 338, 342], "bold": [40, 338], "bom": [37, 46, 338, 942], "bool": [5, 7, 8, 9, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 90, 123, 124, 125, 126, 128, 129, 130, 134, 135, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 176, 194, 196, 199, 200, 201, 202, 207, 209, 214, 219, 220, 221, 222, 226, 227, 228, 229, 233, 234, 236, 237, 238, 241, 243, 244, 252, 261, 263, 267, 271, 272, 273, 274, 279, 282, 284, 285, 288, 291, 293, 296, 297, 301, 302, 303, 304, 307, 308, 310, 312, 320, 322, 325, 328, 338, 349, 350, 351, 352, 353, 363, 366, 367, 370, 374, 375, 383, 388, 391, 392, 394, 397, 408, 409, 410, 414, 422, 423, 424, 425, 426, 427, 428, 435, 447, 463, 480, 481, 482, 483, 485, 486, 502, 504, 505, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 536, 540, 543, 545, 547, 556, 563, 568, 569, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 592, 593, 612, 613, 615, 617, 618, 620, 621, 625, 628, 630, 639, 640, 642, 644, 646, 648, 650, 651, 653, 655, 659, 661, 663, 668, 670, 671, 674, 675, 676, 677, 678, 680, 686, 687, 688, 690, 698, 699, 700, 703, 704, 706, 712, 714, 715, 717, 719, 723, 725, 726, 735, 737, 740, 743, 744, 745, 746, 747, 749, 752, 753, 754, 758, 759, 762, 763, 768, 769, 771, 772, 783, 784, 787, 788, 790, 794, 800, 803, 806, 807, 810, 812, 815, 816, 818, 819, 828, 844, 846, 847, 849, 850, 854, 856, 860, 863, 864, 867, 868, 872, 873, 878, 882, 887, 889, 896, 898, 900, 901, 905, 906, 907, 908, 909, 912, 917, 921, 923, 926, 929, 942, 947, 948, 950, 955, 956, 967, 970, 971, 974, 978, 979, 987, 992, 994, 995, 997, 1000, 1011, 1012, 1014, 1017, 1019, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1042, 1054, 1074, 1092, 1094, 1095, 1097, 1099, 1100, 1107, 1109, 1116, 1117, 1120, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1145, 1146, 1150, 1154, 1157, 1159, 1161, 1170, 1177, 1183, 1190, 1202, 1204, 1207, 1208, 1211, 1213, 1214, 1215, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1238, 1239, 1243, 1248, 1250, 1253, 1254, 1255, 1256, 1257, 1259, 1265, 1266, 1267, 1269, 1277, 1278, 1279, 1282, 1283, 1285, 1291, 1293, 1294, 1296, 1298, 1313, 1318, 1319, 1323, 1326, 1337, 1346, 1347, 1349, 1355, 1360, 1365], "boolean": [51, 168, 199, 220, 222, 284, 301, 338, 350, 351, 352, 366, 367, 370, 391, 394, 397, 408, 447, 493, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 531, 532, 536, 615, 617, 620, 621, 671, 691, 735, 742, 743, 752, 753, 810, 818, 828, 844, 864, 900, 905, 942, 948, 955, 956, 968, 970, 971, 974, 994, 1054, 1107, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1145, 1146, 1150, 1204, 1207, 1208, 1238, 1254, 1328, 1337, 1357], "border": 20, "both": [10, 25, 37, 46, 50, 90, 91, 140, 143, 157, 203, 229, 243, 244, 245, 255, 270, 271, 297, 307, 338, 353, 417, 428, 467, 487, 514, 625, 638, 641, 643, 645, 647, 649, 652, 654, 656, 702, 768, 769, 771, 772, 787, 815, 816, 824, 828, 839, 868, 872, 873, 874, 883, 891, 909, 942, 948, 1024, 1078, 1125, 1281, 1319, 1337, 1365, 1366], "boto3": 32, "bottom": [199, 338, 408, 828, 844, 942], "bottom_k": [301, 338, 408, 734, 735, 828, 905, 942, 1322, 1337], "bottom_k_bi": [407, 734, 735, 828], "bound": [105, 138, 139, 215, 229, 338, 374, 417, 514, 543, 545, 568, 574, 739, 749, 768, 769, 771, 772, 787, 815, 816, 828, 868, 942, 978, 1024, 1096, 1125, 1157, 1159, 1188, 1325, 1337, 1355], "boundari": [229, 338, 417, 508, 720, 828, 868, 942, 1024, 1120, 1299, 1337], "box": [20, 248, 338], "box_draw": 20, "branch": [57, 58, 849, 850, 860, 887, 898, 942], "break": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 133, 134, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 243, 245, 285, 295, 300, 307, 338, 341, 342, 427, 428, 508, 577, 625, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 756, 787, 828, 849, 850, 860, 872, 874, 901, 909, 942, 1019, 1035, 1036, 1120, 1211, 1223, 1226, 1228, 1229, 1316, 1321, 1337, 1342], "breakpoint": [428, 508, 625, 828, 1036, 1120, 1211, 1337], "breezah": 152, "breviti": 192, "broadcast": [700, 756, 948, 1279], "broader": 948, "brotli": [45, 49, 338, 942], "brussel": [461, 1072], "bst": [440, 444, 461, 1047, 1051, 1072], "bucket": [39, 142, 153, 154, 157, 338, 462, 475, 508, 828, 1073, 1086, 1120, 1337], "bud": [698, 699, 1277, 1278], "budget": 1346, "buffer": [138, 139, 140, 215, 241, 338, 395, 998, 1096, 1337], "buffer_s": [241, 338], "bug": [576, 577, 828, 878, 925, 942, 1190, 1337], "build": [56, 124, 948, 1368], "built": 94, "builtin": [136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 338, 430, 828, 855, 942], "bundl": 192, "busi": [435, 754, 1042], "business_day_count": [435, 1042], "by_alternate_row": 1, "by_dtyp": 948, "by_first_letter_of_column_nam": 52, "by_first_letter_of_column_valu": 52, "by_index": 948, "by_left": [244, 338, 873, 942], "by_nam": 948, "by_pred": [271, 338], "by_right": [244, 338, 873, 942], "bye": 1, "byi": 1360, "bys": [229, 338, 868, 942], "byte": [35, 37, 40, 41, 42, 45, 46, 49, 134, 136, 137, 138, 139, 144, 145, 146, 147, 148, 151, 152, 155, 156, 208, 215, 278, 338, 395, 412, 413, 430, 591, 687, 688, 689, 693, 694, 702, 713, 828, 855, 895, 942, 998, 1015, 1016, 1096, 1266, 1267, 1268, 1272, 1273, 1281, 1292, 1337, 1360], "bytesio": [40, 41, 42, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 278, 338, 430, 591, 828, 855, 895, 942], "c": [1, 10, 35, 37, 39, 41, 42, 45, 52, 54, 59, 98, 124, 126, 128, 130, 135, 143, 152, 196, 197, 199, 200, 201, 202, 203, 204, 206, 209, 210, 211, 212, 213, 214, 216, 220, 222, 225, 226, 227, 228, 229, 231, 233, 234, 242, 243, 246, 247, 249, 251, 253, 256, 258, 259, 260, 261, 263, 264, 265, 267, 268, 269, 271, 274, 275, 276, 283, 284, 285, 286, 287, 289, 290, 293, 294, 295, 296, 297, 298, 301, 305, 306, 307, 309, 310, 312, 317, 320, 321, 322, 325, 326, 328, 331, 332, 338, 342, 347, 349, 350, 352, 370, 390, 408, 428, 467, 505, 514, 535, 547, 577, 584, 601, 602, 616, 618, 622, 625, 663, 704, 712, 735, 738, 745, 747, 748, 750, 751, 752, 755, 756, 758, 759, 760, 761, 763, 764, 766, 776, 777, 778, 781, 782, 785, 786, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 807, 809, 811, 812, 813, 817, 824, 828, 844, 846, 847, 848, 849, 850, 851, 852, 853, 856, 857, 858, 859, 860, 861, 864, 867, 868, 872, 876, 885, 887, 889, 890, 892, 893, 898, 899, 900, 901, 905, 908, 909, 912, 914, 918, 921, 922, 923, 926, 927, 929, 932, 933, 942, 948, 1018, 1036, 1125, 1149, 1211, 1283, 1291, 1305, 1324, 1337, 1347, 1349, 1350, 1352, 1353, 1354, 1355, 1360, 1365], "c00": 948, "c01": 948, "c02": 948, "c03": 948, "c05": 948, "c1": 387, "c123": 1360, "c2": 387, "c20": 948, "c25": 948, "c3": 387, "c40": 948, "c45": 1360, "c4d79b": [40, 338], "c50": 948, "c567": [40, 338], "c60": 948, "c75": 948, "c80": 948, "c8ae6d2b276": [40, 338], "c93": 948, "c95": 948, "c96": 948, "c97": 948, "c98": 948, "c99": 948, "c_btm_by_a": [408, 828], "c_btm_by_b": [408, 828], "c_by_ca": [408, 735, 828], "c_by_cb": [408, 735, 828], "c_c_c": [807, 901, 942], "c_contigu": [296, 338], "c_max": [618, 828], "c_mean_squar": [317, 918], "c_min": [618, 828], "c_top_by_a": [735, 828], "c_top_by_b": [735, 828], "c_total": 1365, "cach": [50, 57, 58, 90, 91, 118, 144, 152, 155, 157, 161, 162, 163, 164, 176, 632, 633, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 712, 714, 715, 719, 828, 839, 849, 850, 860, 887, 898, 942, 1014, 1217, 1218, 1291, 1293, 1294, 1298, 1337], "cadi": [263, 338], "cafe": [717, 1296], "caf\u00e9": [412, 413, 693, 694, 948, 1015, 1016, 1272, 1273], "calamin": 143, "calcul": [40, 45, 49, 51, 207, 229, 286, 309, 338, 431, 483, 484, 485, 486, 526, 538, 557, 564, 570, 574, 650, 668, 673, 739, 741, 761, 804, 805, 809, 817, 828, 854, 868, 902, 910, 942, 1037, 1038, 1097, 1098, 1099, 1100, 1140, 1152, 1171, 1229, 1248, 1252, 1327, 1337], "calendar": [65, 66, 229, 244, 270, 308, 338, 438, 448, 450, 457, 462, 475, 479, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 1045, 1055, 1060, 1068, 1073, 1086, 1090, 1098, 1337], "calendar_year": [448, 479], "call": [37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 57, 58, 128, 135, 139, 140, 142, 143, 148, 150, 152, 153, 155, 156, 157, 161, 162, 163, 164, 168, 172, 182, 192, 199, 228, 229, 246, 248, 270, 285, 296, 301, 337, 338, 407, 408, 423, 426, 435, 576, 577, 601, 602, 604, 606, 608, 609, 632, 633, 664, 734, 735, 754, 760, 824, 828, 844, 849, 850, 860, 867, 868, 887, 891, 898, 901, 905, 939, 940, 941, 942, 948, 1010, 1042, 1190, 1218, 1244, 1318, 1322, 1337, 1347, 1351, 1365], "callabl": [52, 53, 54, 55, 133, 152, 222, 248, 262, 267, 324, 338, 387, 568, 576, 577, 602, 603, 622, 639, 763, 764, 777, 789, 790, 802, 828, 878, 886, 889, 925, 942, 991, 1182, 1190, 1223, 1337], "caller": [141, 255, 338, 568, 878, 883, 925, 942], "cam": [267, 338, 889, 942], "can": [1, 14, 27, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 65, 66, 68, 82, 90, 91, 126, 133, 138, 139, 140, 142, 143, 144, 148, 149, 150, 152, 153, 155, 156, 157, 158, 166, 167, 168, 172, 174, 177, 182, 192, 194, 199, 201, 211, 212, 213, 222, 224, 228, 229, 236, 238, 240, 243, 244, 248, 259, 263, 270, 272, 273, 276, 278, 279, 284, 295, 296, 300, 301, 302, 306, 312, 315, 324, 338, 341, 350, 387, 408, 423, 426, 427, 430, 435, 454, 455, 457, 461, 464, 467, 475, 484, 490, 493, 514, 540, 568, 576, 577, 584, 588, 591, 592, 598, 601, 602, 604, 606, 608, 609, 618, 623, 625, 630, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 661, 663, 668, 671, 676, 685, 692, 698, 699, 700, 707, 708, 709, 712, 723, 735, 752, 754, 767, 770, 777, 779, 783, 784, 787, 790, 807, 818, 824, 827, 828, 839, 844, 845, 849, 850, 855, 857, 858, 860, 868, 872, 873, 891, 893, 895, 896, 898, 900, 901, 905, 912, 915, 916, 942, 948, 950, 991, 1035, 1042, 1065, 1066, 1068, 1072, 1073, 1075, 1078, 1086, 1098, 1104, 1125, 1154, 1182, 1190, 1195, 1209, 1211, 1215, 1218, 1236, 1238, 1239, 1242, 1248, 1255, 1256, 1264, 1271, 1277, 1278, 1279, 1286, 1287, 1288, 1291, 1316, 1318, 1337, 1342, 1352, 1365], "cancel": [849, 942], "candid": [683, 685, 1262, 1264], "cannot": [1, 45, 49, 100, 103, 138, 139, 143, 144, 146, 149, 150, 157, 174, 192, 248, 273, 274, 296, 315, 324, 338, 392, 467, 487, 556, 577, 592, 659, 678, 704, 725, 790, 828, 898, 916, 917, 925, 942, 948, 995, 1078, 1170, 1190, 1235, 1257, 1283, 1318, 1337], "capabl": [1, 40, 338], "capac": [215, 282, 338, 1096, 1243, 1337], "capit": [720, 1299, 1360], "captur": [683, 685, 698, 699, 1262, 1264, 1277, 1278], "car": [267, 291, 338, 635, 828, 889, 942], "cardin": [198, 338, 354, 748, 828, 843, 942, 958, 1337], "care": [40, 279, 338, 577, 618, 661, 828, 896, 942, 1239, 1337], "cars_revers": [635, 828], "cartesian": [243, 338, 872, 942], "case": [40, 50, 51, 58, 98, 123, 125, 126, 127, 129, 135, 140, 147, 148, 156, 157, 174, 217, 229, 241, 244, 248, 263, 270, 272, 273, 292, 295, 296, 338, 436, 484, 576, 588, 589, 602, 618, 638, 675, 676, 684, 686, 687, 688, 698, 699, 700, 720, 828, 850, 868, 873, 891, 942, 948, 1043, 1098, 1103, 1254, 1255, 1263, 1265, 1266, 1267, 1277, 1278, 1279, 1299, 1316, 1337], "cast": [1, 39, 53, 54, 123, 125, 126, 129, 135, 161, 162, 163, 164, 222, 229, 262, 270, 295, 296, 300, 312, 338, 353, 425, 426, 437, 464, 467, 478, 617, 622, 623, 630, 632, 638, 691, 692, 722, 729, 733, 757, 758, 808, 828, 868, 886, 891, 912, 942, 948, 1019, 1033, 1034, 1044, 1075, 1078, 1089, 1209, 1215, 1270, 1271, 1301, 1308, 1314, 1318, 1320, 1321, 1337, 1358], "cast_str_to_int": [262, 338, 886, 942], "cast_to_supertyp": [135, 828], "cat": [26, 50, 90, 91, 428, 625, 675, 677, 718, 721, 733, 758, 823, 828, 948, 1036, 1120, 1211, 1254, 1256, 1297, 1300, 1333, 1337], "catalog": [0, 840], "catalog_nam": [178, 180, 181, 182], "cataloginfo": [179, 190], "categor": [39, 50, 69, 90, 91, 93, 161, 162, 163, 164, 243, 293, 338, 410, 411, 412, 413, 414, 428, 625, 632, 633, 733, 828, 948, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1036, 1211, 1217, 1218, 1320, 1337], "categori": [40, 50, 69, 91, 293, 338, 411, 428, 508, 625, 828, 1013, 1036, 1120, 1211, 1313, 1337], "categorical_as_str": [161, 162, 163, 164], "categoricalord": 63, "categoricaltyp": [290, 338], "caus": [106, 115, 124, 138, 139, 140, 152, 196, 217, 296, 338, 576, 828, 1103, 1318, 1337], "cba": 709, "cbrt": [828, 1337, 1358], "cbrt_a": 1359, "cc": [487, 775, 828, 948, 1037, 1337, 1360], "ccc": [1, 40, 338, 723, 725, 726, 948, 1360], "ccy": 1368, "cd": [699, 723, 725, 726, 948], "cd34": 699, "cdatainterfac": [195, 951], "cde": [948, 1360], "cdt": [462, 475, 1073, 1086], "ceil": [53, 828, 1337, 1358], "ceil_a": 1359, "cell": [15, 16, 40, 263, 338], "cent": [438, 1277], "center": [15, 16, 40, 338, 483, 485, 486, 639, 640, 642, 644, 646, 648, 651, 653, 655, 828, 1097, 1099, 1100, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1337], "central": [153, 154, 192, 526, 668, 828, 1140, 1248, 1337], "centuri": 1361, "certain": [46, 47, 48, 49, 58, 234, 308, 338, 708, 709, 824, 849, 850, 887, 942, 1337], "certainli": [712, 714, 715, 1291, 1293, 1294], "cest": [461, 1072], "cet": [461, 1072], "cfg": [2, 4, 17, 192], "cfg_ascii_fram": 192, "cfg_markdown": 192, "cfg_verbos": 192, "cfoo": [914, 942], "chain": [601, 602, 604, 606, 608, 609, 818], "chanc": [165, 168, 172, 1368], "chang": [30, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 51, 57, 58, 67, 69, 73, 133, 134, 135, 138, 139, 140, 142, 143, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 245, 285, 295, 300, 307, 314, 338, 341, 342, 427, 428, 431, 467, 508, 577, 618, 619, 625, 632, 637, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 756, 787, 828, 849, 850, 860, 874, 901, 909, 915, 942, 948, 1018, 1019, 1035, 1036, 1078, 1120, 1206, 1211, 1217, 1222, 1223, 1226, 1228, 1229, 1243, 1316, 1321, 1337, 1342], "changes_length": [135, 828], "char": [27, 138, 152, 684, 1263], "char_length": 1360, "charact": [7, 9, 12, 20, 26, 27, 28, 37, 38, 46, 92, 137, 138, 139, 141, 152, 338, 412, 413, 457, 681, 682, 684, 689, 693, 694, 696, 697, 698, 699, 702, 703, 704, 707, 708, 709, 710, 711, 713, 720, 722, 887, 942, 948, 1015, 1016, 1068, 1260, 1261, 1263, 1268, 1272, 1273, 1275, 1276, 1277, 1278, 1281, 1282, 1283, 1286, 1287, 1288, 1292, 1299, 1301, 1360], "character_length": 1360, "characterist": [168, 172], "charli": [138, 1366], "chart": [40, 338, 341, 887, 942, 1337, 1342], "cheap": [201, 202, 277, 313, 338, 847, 848, 894, 913, 942, 1023, 1025, 1337], "cheaper": [543, 1157], "check": [39, 66, 100, 138, 139, 152, 161, 162, 163, 164, 176, 214, 239, 243, 244, 338, 370, 391, 394, 397, 410, 414, 505, 514, 518, 536, 675, 680, 687, 706, 828, 872, 873, 878, 942, 974, 994, 997, 1000, 1012, 1017, 1095, 1116, 1117, 1127, 1130, 1137, 1139, 1150, 1254, 1259, 1266, 1285, 1337], "check_column_ord": [161, 162], "check_dtyp": [161, 162, 163, 164, 947, 1095, 1337], "check_exact": [161, 162, 163, 164], "check_nam": [163, 164, 1095, 1337], "check_ord": [163, 164], "check_row_ord": [161, 162], "check_sorted": [244, 338, 873, 942], "choos": [45, 47, 49, 229, 263, 338, 467, 868, 942, 1078], "chrono": [37, 46, 94, 338, 464, 467, 712, 714, 715, 719, 942, 1075, 1078, 1291, 1293, 1294, 1298, 1360, 1361], "chunk": [14, 49, 132, 138, 139, 142, 148, 150, 152, 153, 155, 156, 157, 168, 172, 217, 242, 258, 296, 338, 353, 629, 828, 942, 957, 1022, 1103, 1114, 1196, 1214, 1312, 1318, 1337], "chunk_length": 1337, "chunkedarrai": [123, 258, 338], "citi": [698, 699], "clang": 160, "clariti": [271, 338], "class": [1, 17, 31, 32, 33, 34, 50, 52, 53, 54, 55, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 109, 111, 165, 166, 177, 183, 184, 186, 187, 273, 278, 338, 591, 787, 815, 824, 828, 834, 840, 852, 859, 892, 911, 917, 942, 947, 1317, 1337, 1341, 1349, 1365], "classmethod": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 208, 338, 430, 499, 828, 855, 942, 1347, 1365], "claus": [840, 1355, 1364], "clean": [712, 714, 715, 1291, 1293, 1294], "cleaner": 192, "cleanli": [10, 227, 338, 1365], "clear": [50, 90, 202, 338, 848, 942, 1025, 1337], "clearer": 126, "clickhous": 141, "client": [32, 140, 177], "clip": [828, 1337], "clipboard": [36, 137, 338, 840], "clone": [125, 126, 127, 128, 129, 201, 296, 338, 847, 942, 1023, 1337], "close": [40, 140, 229, 270, 285, 338, 428, 514, 573, 625, 638, 641, 643, 645, 647, 649, 652, 654, 656, 668, 768, 769, 771, 772, 787, 815, 816, 828, 868, 891, 901, 942, 1036, 1125, 1211, 1248, 1337], "closedinterv": [229, 270, 338, 514, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 787, 815, 816, 828, 868, 891, 942, 1125, 1337], "closest": [123, 244, 338, 873, 942, 1354, 1359], "closur": [641, 643, 652, 654, 656, 828], "cloud": [34, 37, 39, 41, 45, 46, 47, 48, 49, 140, 142, 148, 150, 152, 153, 154, 155, 156, 157, 158, 182, 338, 840, 942], "cloudi": [698, 699], "cloudpickl": 160, "cluster": 157, "cluster_with_column": [57, 58, 849, 850, 860, 887, 898, 942], "co": [684, 828, 1263, 1337, 1358], "coalesc": [59, 243, 244, 307, 338, 512, 686, 688, 712, 828, 872, 873, 909, 942, 1267, 1291, 1353, 1358], "code": [192, 203, 243, 338, 391, 392, 393, 394, 397, 430, 577, 661, 828, 855, 872, 876, 942, 1239, 1337, 1347], "codebas": 192, "coeffici": [205, 338, 668, 828, 1248, 1337], "coerc": [59, 631, 828], "coercion": [46, 47, 48, 49, 57, 58, 631, 828, 849, 850, 860, 887, 898, 942], "col": [1, 12, 37, 40, 46, 51, 52, 53, 54, 127, 129, 152, 166, 168, 220, 228, 229, 237, 239, 243, 244, 245, 248, 259, 262, 263, 270, 271, 276, 284, 295, 300, 304, 306, 312, 317, 338, 342, 346, 347, 348, 349, 350, 351, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 391, 392, 393, 394, 395, 396, 397, 398, 403, 406, 407, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 500, 501, 502, 503, 504, 507, 508, 510, 511, 512, 513, 514, 515, 517, 518, 520, 521, 522, 525, 526, 527, 528, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 599, 600, 601, 603, 605, 607, 610, 611, 612, 613, 614, 615, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 736, 737, 738, 739, 740, 741, 742, 743, 744, 746, 748, 752, 753, 755, 756, 757, 758, 760, 762, 765, 767, 768, 770, 771, 773, 777, 778, 779, 780, 781, 782, 791, 793, 795, 796, 798, 801, 802, 806, 807, 809, 811, 813, 814, 817, 818, 828, 864, 867, 868, 870, 872, 873, 874, 886, 891, 893, 900, 901, 907, 912, 914, 918, 942, 948, 1068, 1072, 1154, 1236, 1238, 1267, 1271, 1291, 1337, 1368], "col0": [168, 1368], "col1": [168, 263, 338, 942, 1368], "col2": [168, 263, 338, 942, 1368], "col3": [263, 338, 1368], "col4": 1368, "col_nam": [262, 338, 577, 818, 828, 886, 942], "cole": 134, "coli": [40, 338, 608, 609, 948, 1368], "collaps": [46, 47, 48, 49, 57, 58, 849, 850, 860, 887, 898, 942], "collapse_join": [46, 47, 48, 49, 57, 58, 849, 850, 860, 887, 898, 942], "collect": [54, 57, 58, 152, 153, 154, 158, 168, 169, 172, 211, 212, 246, 263, 285, 290, 303, 304, 338, 487, 518, 577, 757, 775, 779, 806, 807, 810, 828, 843, 844, 846, 847, 850, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 888, 889, 890, 891, 893, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 918, 919, 920, 921, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 939, 941, 942, 948, 1130, 1337, 1347, 1348, 1349, 1352, 1353, 1365, 1366, 1368], "collect_al": [54, 58, 849, 850, 942], "collect_all_async": [850, 942], "collect_async": [58, 942], "collect_schema": [54, 246, 338, 852, 859, 886, 892, 911, 942], "collis": 59, "colnam": [24, 40, 152, 338], "color": [50, 90, 91, 324, 338, 341, 391, 392, 393, 394, 397, 678, 740, 828, 925, 994, 995, 996, 997, 1000, 1257, 1326, 1337, 1360], "column": [10, 16, 17, 18, 21, 22, 24, 39, 40, 45, 49, 50, 51, 52, 59, 66, 82, 91, 95, 99, 123, 125, 126, 127, 128, 129, 130, 133, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 168, 184, 187, 197, 199, 200, 203, 205, 206, 209, 210, 211, 212, 213, 216, 220, 221, 224, 225, 227, 228, 229, 233, 234, 239, 240, 241, 243, 244, 245, 248, 249, 250, 251, 252, 253, 254, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 270, 271, 272, 273, 275, 276, 277, 279, 284, 286, 287, 288, 291, 293, 295, 296, 297, 298, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 313, 314, 315, 317, 323, 338, 341, 342, 349, 350, 352, 363, 372, 381, 383, 386, 395, 408, 417, 421, 422, 428, 438, 439, 441, 442, 443, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 460, 463, 464, 465, 467, 476, 477, 479, 487, 489, 493, 495, 508, 513, 514, 529, 535, 541, 543, 563, 567, 568, 577, 583, 584, 586, 588, 590, 601, 603, 604, 605, 606, 607, 608, 609, 618, 625, 629, 631, 632, 633, 634, 636, 637, 638, 641, 643, 645, 647, 649, 652, 654, 656, 663, 664, 670, 671, 674, 682, 687, 689, 690, 700, 704, 705, 712, 713, 714, 715, 716, 717, 719, 724, 727, 735, 740, 742, 744, 745, 746, 747, 748, 749, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 775, 776, 777, 779, 780, 781, 782, 783, 784, 785, 786, 787, 789, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 844, 846, 853, 856, 857, 858, 859, 861, 864, 867, 868, 872, 873, 874, 878, 879, 880, 881, 882, 884, 885, 888, 889, 891, 892, 893, 894, 896, 900, 902, 903, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 918, 924, 925, 942, 947, 948, 955, 956, 976, 985, 987, 990, 998, 1014, 1018, 1024, 1029, 1030, 1036, 1045, 1048, 1049, 1050, 1053, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1070, 1074, 1075, 1076, 1078, 1087, 1088, 1090, 1102, 1120, 1124, 1149, 1155, 1157, 1177, 1181, 1211, 1218, 1219, 1222, 1242, 1253, 1261, 1266, 1269, 1283, 1284, 1291, 1293, 1294, 1295, 1296, 1298, 1304, 1307, 1313, 1314, 1326, 1337, 1353, 1355, 1357, 1359, 1360, 1362, 1363, 1366, 1367, 1368], "column_0": [1, 248, 302, 338], "column_1": [248, 302, 338, 1362], "column_2": [302, 338, 1362], "column_abc": 15, "column_format": [40, 338], "column_nam": [267, 302, 338, 889, 942], "column_tot": [40, 338], "column_width": [40, 338], "column_x": [138, 139, 143, 149, 152], "column_xyz": 15, "columnar": [127, 129, 241, 272, 338], "columnformatdict": [40, 338], "columninfo": [187, 190], "columnnameorselector": [200, 209, 211, 212, 254, 261, 263, 273, 293, 303, 304, 305, 306, 338, 846, 856, 857, 858, 882, 906, 907, 908, 942], "columnnotfounderror": [224, 225, 338], "columntotalsdefinit": [40, 338], "columnwidthsdefinit": [40, 338], "colx": [40, 338, 608, 609, 948, 1352, 1368], "colz": [948, 1368], "com": [32, 40, 141, 338, 483, 485, 486, 683, 684, 685, 828, 1097, 1099, 1100, 1262, 1263, 1264, 1337], "combin": [45, 49, 57, 58, 59, 220, 229, 230, 244, 263, 270, 308, 338, 351, 364, 475, 484, 497, 592, 617, 633, 638, 707, 708, 709, 768, 769, 771, 772, 815, 816, 818, 828, 849, 850, 860, 868, 873, 887, 891, 898, 942, 1073, 1086, 1098, 1218, 1286, 1287, 1288, 1337, 1353, 1366], "come": [118, 141, 229, 303, 305, 338, 435, 454, 455, 526, 568, 754, 828, 868, 906, 908, 942, 1042, 1065, 1066, 1140, 1337], "comm_subexpr_elim": [57, 58, 849, 850, 860, 887, 898, 942], "comm_subplan_elim": [57, 58, 849, 850, 860, 887, 898, 942], "comma": [36, 37, 138, 139, 152, 338], "comment": [138, 139, 152, 183, 184, 186, 187], "comment_prefix": [138, 139, 152], "common": [51, 57, 58, 59, 98, 138, 139, 152, 307, 338, 602, 834, 849, 850, 860, 887, 898, 909, 942, 1341], "compact": 1363, "compani": 141, "compar": [157, 161, 162, 163, 164, 214, 220, 338, 481, 482, 502, 504, 514, 528, 575, 612, 613, 828, 864, 942, 1018, 1094, 1095, 1202, 1337], "comparison": [158, 220, 338, 864, 942], "compat": [20, 40, 41, 42, 45, 49, 93, 290, 338, 675, 677, 683, 684, 685, 687, 698, 699, 942, 948, 1078, 1254, 1256, 1262, 1263, 1264, 1266, 1277, 1278, 1312, 1337, 1347, 1360, 1361, 1365], "compat_level": [41, 42, 290, 338, 1312, 1337], "compatibleframetyp": [1348, 1350, 1365], "compatlevel": [41, 42, 290, 338, 1312, 1337], "competit": [628, 828, 1213, 1337], "compil": [56, 368, 369, 533, 534, 946, 972, 973, 1147, 1148], "complement": 948, "complet": [138, 140, 152, 1366], "complex": [169, 407, 408, 427, 734, 735, 828, 1010, 1035, 1322, 1337], "compliant": [40, 338, 467, 1078], "compon": [439, 463, 467, 712, 715, 773, 1046, 1074, 1078, 1291, 1294], "compos": 1366, "composit": [82, 1368], "compound": [130, 273, 338, 948], "comprehens": 166, "compress": [35, 39, 41, 42, 45, 47, 49, 338, 636, 828, 942, 1221, 1337], "compression_level": [45, 49, 338, 942], "comput": [57, 59, 96, 215, 228, 244, 263, 297, 303, 317, 330, 338, 346, 355, 356, 357, 358, 359, 360, 377, 378, 379, 384, 385, 389, 415, 418, 419, 420, 423, 424, 425, 426, 432, 480, 483, 484, 485, 486, 488, 526, 550, 551, 552, 553, 557, 558, 559, 560, 564, 570, 571, 572, 573, 598, 618, 619, 624, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 665, 666, 667, 668, 672, 731, 732, 740, 745, 747, 750, 751, 752, 759, 761, 774, 794, 804, 805, 818, 828, 849, 867, 870, 872, 873, 906, 914, 918, 931, 942, 953, 959, 960, 961, 962, 963, 964, 981, 982, 983, 988, 989, 993, 1020, 1026, 1027, 1028, 1031, 1032, 1033, 1034, 1039, 1092, 1096, 1097, 1098, 1099, 1100, 1101, 1140, 1164, 1165, 1166, 1167, 1171, 1172, 1173, 1174, 1178, 1184, 1185, 1186, 1187, 1195, 1206, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1245, 1246, 1247, 1248, 1251, 1310, 1311, 1319, 1326, 1337, 1359, 1362], "computeerror": [588, 717, 1296], "concat": [50, 90, 91, 99, 139, 244, 338, 873, 914, 942, 1022, 1114, 1196, 1214, 1337, 1358], "concat_list": [540, 774], "concat_w": [285, 338, 807, 901, 942, 1358, 1365], "concaten": [50, 59, 90, 91, 222, 262, 338, 622, 674, 690, 756, 757, 758, 828, 886, 942, 1022, 1196, 1253, 1269, 1337, 1360], "concatmethod": 59, "conclus": [127, 129, 338, 942], "concret": [168, 172], "condit": [40, 212, 220, 245, 271, 338, 410, 414, 493, 514, 680, 706, 753, 777, 818, 828, 864, 874, 942, 1125, 1337, 1353, 1358, 1364], "conditional_format": [40, 338], "conditionalformatdict": [40, 338], "config": [0, 51, 207, 276, 295, 312, 338, 676, 686, 688, 700, 768, 769, 771, 772, 773, 840, 849, 854, 893, 912, 942, 1255, 1267, 1279], "configur": [5, 32, 39, 142, 153, 154, 192, 338, 341, 841, 849, 917, 942, 1337, 1342], "configure_axisx": [338, 341, 1337, 1342], "configure_point": [338, 341, 1337, 1342], "conflat": [514, 828], "conform": 1368, "confus": [98, 350, 521, 522, 700, 828], "conjunct": [40, 90, 140, 143, 149, 166, 338, 783, 786, 942], "conn": 140, "connect": [37, 38, 41, 45, 46, 47, 48, 49, 69, 138, 140, 141, 144, 146, 148, 150, 152, 155, 156, 157, 158, 182, 338, 841, 942], "connectionorcursor": [38, 140, 338], "connector": 141, "connectorx": [140, 141, 160], "consecut": [219, 338, 390, 492, 498, 674, 690, 698, 828, 863, 942, 1106, 1253, 1269, 1278, 1337], "consid": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 90, 91, 133, 134, 138, 139, 140, 142, 148, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 199, 211, 212, 214, 240, 245, 248, 254, 272, 285, 295, 300, 301, 303, 305, 307, 338, 341, 342, 408, 417, 427, 428, 497, 508, 576, 577, 584, 600, 601, 604, 606, 608, 609, 625, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 735, 756, 763, 777, 787, 824, 828, 844, 849, 850, 857, 858, 860, 874, 882, 901, 905, 906, 908, 909, 925, 942, 948, 1014, 1019, 1024, 1035, 1036, 1095, 1120, 1190, 1211, 1223, 1226, 1228, 1229, 1236, 1238, 1316, 1321, 1337, 1342, 1347], "consider": 134, "consist": [228, 261, 296, 338, 712, 768, 769, 787, 867, 942, 948, 957, 1103, 1291, 1318, 1337], "consola": [40, 338], "const": 10, "constant": [215, 270, 338, 436, 484, 490, 828, 891, 942, 1043, 1096, 1098, 1104, 1337], "constrain": [51, 152, 211, 212, 338, 857, 858, 942, 948], "constraint": [220, 338, 493, 601, 602, 604, 606, 608, 609, 818, 828, 864, 942, 948], "construct": [50, 90, 91, 98, 123, 125, 126, 127, 128, 129, 130, 134, 140, 338, 499, 800, 803, 819, 824, 828, 855, 942, 1014, 1337, 1352], "construct_categor": 50, "constructor": [134, 143, 172], "contain": [5, 37, 38, 39, 40, 46, 51, 56, 94, 125, 128, 130, 135, 140, 141, 142, 150, 153, 154, 157, 167, 168, 170, 172, 199, 204, 211, 212, 213, 229, 237, 242, 259, 295, 296, 300, 301, 307, 319, 338, 350, 352, 375, 394, 397, 410, 414, 430, 505, 518, 547, 577, 674, 676, 680, 683, 685, 687, 690, 692, 705, 706, 722, 744, 745, 746, 747, 758, 790, 828, 844, 852, 855, 857, 858, 859, 868, 887, 905, 909, 920, 942, 948, 955, 956, 979, 1012, 1017, 1116, 1117, 1161, 1196, 1253, 1255, 1259, 1262, 1264, 1266, 1269, 1271, 1284, 1285, 1301, 1312, 1318, 1337, 1355], "contains_with_expr": 391, "contains_with_lit": 391, "content": [13, 664, 828, 946, 1244, 1337], "context": [50, 90, 91, 174, 259, 285, 338, 348, 493, 540, 576, 577, 588, 670, 671, 740, 760, 776, 779, 785, 786, 790, 799, 803, 806, 827, 828, 839, 840, 901, 914, 942, 1154, 1326, 1337, 1352, 1365, 1367], "contigu": [59, 123, 128, 138, 139, 142, 144, 146, 148, 150, 152, 153, 155, 156, 157, 266, 296, 338], "continu": [138, 428, 625, 668, 828, 1036, 1211, 1248, 1337, 1354], "contrast": 773, "control": [10, 11, 40, 58, 59, 143, 166, 168, 284, 285, 295, 338, 633, 671, 807, 828, 849, 850, 860, 900, 901, 917, 939, 942, 1218, 1316, 1337, 1349, 1352, 1365], "conveni": [217, 300, 338, 934, 957, 1103, 1337, 1347], "convers": [124, 196, 241, 242, 272, 273, 292, 296, 297, 338, 440, 712, 714, 715, 719, 840, 1047, 1291, 1293, 1294, 1298, 1318, 1319, 1337, 1363, 1365], "convert": [39, 94, 124, 128, 135, 142, 143, 149, 153, 196, 273, 291, 292, 293, 294, 295, 296, 297, 299, 300, 338, 386, 387, 429, 440, 464, 467, 567, 568, 576, 602, 627, 685, 712, 714, 715, 716, 717, 719, 724, 828, 942, 990, 991, 1018, 1047, 1075, 1078, 1181, 1182, 1264, 1291, 1293, 1294, 1295, 1296, 1298, 1304, 1307, 1315, 1316, 1317, 1318, 1319, 1321, 1337, 1360, 1362, 1363, 1365], "convert_time_zon": [461, 1072], "coo": [267, 338, 889, 942], "coord": 727, "coordin": [40, 338], "copi": [36, 123, 124, 137, 194, 196, 201, 202, 242, 290, 296, 297, 312, 338, 490, 828, 847, 848, 912, 942, 950, 1023, 1025, 1104, 1312, 1317, 1318, 1319, 1337, 1365], "corasick": [676, 686, 688, 700, 1255, 1265, 1267, 1279], "core": [1, 245, 338, 874, 942, 1365, 1368], "cores_right": [245, 338, 874, 942], "corner": [20, 40, 130, 338], "corr": 338, "corrcoef": [205, 338], "correct": [135, 143, 149, 485, 486, 526, 568, 650, 668, 828, 878, 942, 1099, 1100, 1140, 1229, 1248, 1337], "correctli": [40, 338, 576, 828], "correl": [205, 338, 759, 804], "correlationmethod": 759, "correspond": [229, 244, 270, 296, 308, 338, 408, 448, 457, 462, 475, 577, 628, 638, 641, 643, 645, 647, 649, 652, 654, 656, 735, 768, 769, 771, 772, 815, 816, 828, 849, 868, 873, 891, 942, 1055, 1068, 1073, 1086, 1213, 1337, 1354], "cosd": 1358, "cosh": [828, 1337], "cosin": [355, 356, 418, 419, 576, 828, 959, 960, 1026, 1027, 1337, 1362], "cost": [245, 273, 338, 698, 874, 942, 1278], "cost_usd": [698, 1278], "cot": [828, 1337, 1358], "cotang": [420, 828, 1028, 1337, 1362], "cotd": 1358, "could": [39, 88, 96, 338, 665, 763, 773, 777, 828, 846, 854, 942, 1245, 1337], "count": [40, 158, 198, 207, 229, 259, 260, 270, 302, 308, 314, 329, 338, 354, 371, 380, 422, 435, 484, 508, 529, 537, 549, 554, 577, 600, 616, 638, 641, 643, 645, 647, 649, 652, 654, 656, 677, 738, 740, 748, 754, 762, 786, 798, 828, 843, 854, 868, 885, 891, 915, 930, 942, 948, 958, 975, 984, 1030, 1037, 1042, 1098, 1120, 1143, 1151, 1163, 1168, 1197, 1205, 1256, 1324, 1326, 1337, 1342, 1346, 1358], "count_digit": 677, "count_num": [40, 338], "counterpart": 134, "countri": [244, 338, 436, 873, 942, 1043], "country_holidai": [435, 754, 1042], "covari": [135, 761, 805, 828], "cover": 10, "cow": [696, 697, 1275, 1276], "cpu": [138, 139, 160, 295, 338, 849, 917, 942, 1316, 1337], "crab": [675, 687, 1254, 1266], "crate": [37, 46, 94, 338, 675, 677, 683, 684, 685, 687, 698, 699, 712, 714, 715, 719, 942, 948, 1254, 1256, 1262, 1263, 1264, 1266, 1277, 1278, 1291, 1293, 1294, 1298], "creat": [38, 40, 50, 91, 123, 127, 129, 138, 139, 140, 141, 144, 146, 150, 153, 154, 166, 167, 168, 169, 170, 171, 172, 173, 192, 201, 202, 229, 260, 263, 270, 295, 296, 308, 312, 315, 338, 341, 342, 439, 462, 475, 484, 568, 576, 629, 638, 641, 643, 645, 647, 649, 652, 654, 656, 757, 767, 768, 769, 770, 771, 772, 773, 787, 814, 815, 816, 824, 828, 847, 848, 854, 860, 868, 891, 912, 916, 942, 946, 947, 1023, 1025, 1036, 1046, 1073, 1086, 1098, 1203, 1211, 1214, 1316, 1318, 1337, 1342, 1364, 1365, 1368], "create_async_engin": 140, "create_engin": [38, 338], "created_at": [183, 186, 187], "created_bi": [183, 186, 187], "creation": 139, "credenti": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 338, 840, 942], "credential_provid": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 338, 942], "credentialproviderfunct": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 338, 942], "cross": [243, 338, 872, 942, 1353], "crustacean": [687, 1266], "cst": [462, 475, 1073, 1086], "csv": [36, 37, 46, 47, 48, 49, 137, 138, 139, 143, 152, 185, 338, 840, 942], "csvencod": [138, 139, 152], "csvquotestyl": [37, 46, 338, 942], "ctx": [1346, 1348, 1349, 1350, 1351, 1352, 1365], "cube": [1, 55, 415, 623, 828, 1020, 1337, 1359], "cuda": 917, "cum_count": [828, 1337], "cum_count_revers": [422, 828], "cum_max": [828, 1337], "cum_max_all_fil": [423, 828], "cum_max_revers": [423, 828], "cum_min": [828, 1337], "cum_min_revers": [424, 828], "cum_prod": [347, 828, 1337], "cum_prod_revers": [425, 828], "cum_reduc": 763, "cum_sum": [511, 618, 728, 766, 828, 870, 942, 1139, 1337], "cum_sum_revers": [426, 828], "cumsum_horizont": 765, "cumul": [422, 423, 424, 425, 426, 762, 763, 764, 765, 766, 828, 1030, 1031, 1032, 1033, 1034, 1337], "cumulative_ev": [828, 1337], "cumulative_sal": [618, 828], "current": [2, 3, 5, 6, 30, 37, 38, 41, 45, 46, 47, 48, 49, 130, 140, 141, 148, 150, 152, 155, 156, 157, 165, 166, 168, 169, 170, 171, 172, 173, 182, 201, 202, 209, 243, 244, 267, 285, 295, 300, 338, 341, 342, 444, 568, 619, 828, 847, 848, 856, 872, 873, 889, 901, 917, 942, 948, 1023, 1025, 1043, 1051, 1206, 1316, 1321, 1337, 1342, 1349, 1365], "cursor": [38, 140, 338], "custom": [1, 27, 39, 40, 52, 53, 54, 55, 97, 134, 171, 173, 207, 248, 263, 324, 338, 387, 435, 464, 467, 568, 576, 577, 639, 740, 754, 789, 790, 828, 854, 878, 925, 942, 991, 1042, 1075, 1078, 1182, 1190, 1223, 1326, 1337, 1368], "customis": [40, 338], "cut": [625, 828, 1211, 1337], "cxx": 1360, "cypher": 140, "d": [28, 35, 37, 39, 40, 41, 42, 45, 126, 158, 197, 220, 227, 229, 230, 231, 234, 243, 247, 289, 290, 300, 306, 310, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 347, 349, 422, 445, 464, 467, 514, 583, 622, 663, 677, 684, 698, 699, 704, 712, 714, 715, 755, 756, 773, 779, 807, 828, 864, 868, 872, 901, 921, 923, 926, 927, 928, 929, 930, 931, 932, 942, 948, 1018, 1030, 1052, 1075, 1078, 1125, 1149, 1256, 1263, 1277, 1278, 1283, 1291, 1293, 1294, 1305, 1337, 1353, 1355, 1357, 1360, 1361], "d1": [40, 338, 439], "d2": 439, "d3": 439, "d789": [40, 338], "d_4": [704, 1283], "dai": [65, 66, 83, 229, 242, 244, 270, 308, 338, 341, 435, 454, 455, 457, 458, 460, 462, 464, 467, 468, 475, 477, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 754, 767, 768, 769, 770, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 948, 1042, 1065, 1066, 1068, 1069, 1071, 1073, 1075, 1078, 1079, 1086, 1088, 1098, 1337, 1361], "dark": 1346, "data": [0, 1, 10, 18, 19, 21, 24, 28, 35, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 50, 51, 52, 54, 57, 58, 59, 64, 65, 66, 68, 79, 80, 82, 83, 91, 94, 98, 100, 103, 117, 123, 124, 125, 126, 127, 128, 129, 130, 131, 134, 137, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 172, 190, 194, 196, 202, 203, 213, 216, 217, 227, 228, 229, 241, 242, 243, 246, 248, 261, 262, 266, 271, 272, 273, 275, 279, 282, 290, 295, 296, 297, 300, 302, 312, 316, 336, 338, 342, 350, 351, 352, 355, 356, 357, 358, 359, 360, 363, 366, 367, 368, 369, 370, 372, 375, 377, 378, 379, 384, 385, 386, 388, 389, 391, 392, 393, 394, 395, 396, 397, 409, 411, 412, 413, 417, 418, 419, 420, 421, 428, 429, 430, 435, 436, 437, 438, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 489, 500, 502, 503, 504, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 528, 529, 533, 534, 536, 541, 547, 549, 556, 567, 569, 575, 577, 612, 613, 617, 618, 625, 627, 628, 631, 632, 633, 634, 636, 637, 641, 643, 645, 647, 649, 652, 654, 656, 657, 659, 661, 666, 667, 668, 674, 677, 678, 679, 682, 683, 684, 685, 689, 690, 691, 692, 693, 694, 702, 703, 704, 705, 712, 713, 714, 715, 717, 719, 722, 731, 732, 733, 736, 737, 740, 743, 749, 757, 760, 767, 768, 769, 770, 771, 772, 773, 783, 784, 786, 787, 788, 789, 790, 800, 803, 814, 815, 816, 819, 824, 828, 840, 847, 848, 849, 850, 855, 859, 861, 867, 868, 892, 896, 912, 942, 947, 950, 955, 956, 968, 970, 971, 972, 973, 974, 976, 978, 979, 990, 992, 994, 995, 996, 998, 999, 1011, 1013, 1015, 1016, 1023, 1024, 1025, 1036, 1037, 1042, 1043, 1044, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1095, 1098, 1102, 1103, 1120, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1145, 1146, 1147, 1148, 1150, 1155, 1161, 1163, 1170, 1181, 1183, 1190, 1204, 1211, 1213, 1217, 1218, 1219, 1221, 1222, 1233, 1235, 1243, 1248, 1253, 1254, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1268, 1269, 1270, 1271, 1272, 1273, 1281, 1282, 1283, 1284, 1291, 1292, 1293, 1294, 1296, 1298, 1301, 1312, 1317, 1318, 1319, 1320, 1323, 1336, 1337, 1346, 1353, 1360, 1365, 1367], "data_bar": [40, 338], "data_bar_2010": [40, 338], "data_label": [40, 338], "data_page_s": [45, 49, 338, 942], "data_source_format": 187, "databas": [38, 122, 140, 141, 338, 840], "databrick": 177, "databricks_format": 185, "datafram": [0, 1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 78, 95, 98, 99, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 161, 162, 165, 166, 192, 336, 337, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 406, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 718, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 806, 807, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 824, 828, 840, 849, 850, 852, 854, 856, 859, 861, 865, 868, 872, 873, 874, 875, 876, 878, 882, 883, 887, 890, 892, 899, 901, 906, 907, 908, 909, 911, 914, 918, 919, 921, 922, 923, 925, 926, 927, 928, 929, 930, 931, 932, 933, 935, 936, 942, 947, 948, 1036, 1037, 1072, 1098, 1120, 1190, 1211, 1267, 1271, 1283, 1284, 1307, 1313, 1314, 1326, 1337, 1346, 1347, 1348, 1349, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1368], "dataframeplot": [338, 341], "dataload": [300, 338], "datapoint": [229, 338, 868, 942], "dataset": [14, 45, 69, 138, 139, 142, 143, 149, 152, 153, 158, 243, 300, 338, 526, 828, 840, 872, 878, 942, 1140, 1337, 1366], "datasourceformat": [187, 190], "datat": [40, 338], "datatyp": [37, 46, 123, 125, 126, 127, 129, 131, 145, 147, 148, 150, 151, 156, 157, 169, 170, 172, 213, 222, 338, 409, 487, 663, 733, 756, 775, 788, 824, 828, 840, 859, 942, 947, 948, 1011, 1037, 1091, 1190, 1242, 1320, 1337, 1363], "date": [16, 40, 51, 66, 138, 139, 141, 143, 149, 150, 152, 155, 157, 158, 200, 207, 227, 229, 242, 244, 270, 285, 338, 341, 370, 435, 437, 438, 439, 440, 443, 445, 447, 448, 450, 453, 454, 455, 457, 458, 459, 460, 461, 462, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 536, 618, 638, 641, 643, 645, 647, 649, 652, 654, 656, 712, 714, 733, 754, 768, 769, 771, 772, 779, 787, 788, 814, 828, 846, 854, 868, 873, 891, 942, 948, 974, 1042, 1044, 1045, 1046, 1047, 1050, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1098, 1150, 1199, 1200, 1291, 1293, 1320, 1337, 1358, 1361, 1363], "date32": [242, 338], "date_format": [37, 46, 338, 942], "date_min": 457, "date_minus_1y_2mon": 1068, "date_part": 1358, "date_plus_1i": [457, 1068], "date_rang": [244, 308, 338, 443, 445, 458, 466, 477, 771, 772, 873, 942, 1050, 1064, 1069, 1070, 1087, 1088], "date_right": [244, 338, 873, 942], "datetim": [16, 37, 40, 46, 51, 94, 130, 142, 150, 153, 155, 157, 168, 169, 170, 172, 182, 183, 186, 187, 200, 207, 227, 229, 242, 244, 270, 285, 308, 338, 341, 370, 435, 436, 437, 438, 439, 440, 441, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 536, 585, 618, 638, 641, 643, 645, 647, 649, 652, 654, 656, 712, 715, 733, 754, 767, 768, 769, 771, 772, 773, 779, 787, 788, 815, 816, 828, 846, 854, 868, 873, 891, 942, 947, 948, 974, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1098, 1150, 1199, 1200, 1291, 1294, 1318, 1320, 1337, 1360, 1361], "datetime_format": [37, 46, 338, 942], "datetime_rang": [229, 338, 437, 440, 454, 455, 457, 461, 462, 468, 469, 470, 471, 472, 473, 474, 475, 478, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 828, 868, 942, 1043, 1044, 1047, 1051, 1052, 1053, 1058, 1059, 1061, 1063, 1065, 1066, 1067, 1068, 1072, 1073, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086], "datetime_str": 464, "datetimeindex": 128, "david": 1366, "day_nam": [464, 467], "day_of_month": [443, 458, 477], "day_of_year": [443, 458, 477], "daylight": [229, 244, 270, 308, 338, 436, 444, 457, 462, 475, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 1051, 1068, 1073, 1086], "dayofweek": 1361, "dayofyear": 1361, "days_diff": 468, "db": [38, 140, 141, 338], "dbapi2": 140, "dbc": [677, 1256], "dbreadengin": 141, "dbwriteengin": [38, 338], "dbwritemod": [38, 338], "dd": [40, 338, 1360], "ddd": [1, 40, 338, 723, 725, 726], "dddd": 1360, "ddof": [286, 309, 338, 384, 389, 564, 570, 651, 652, 655, 656, 673, 741, 759, 761, 804, 805, 809, 817, 828, 902, 910, 942, 988, 993, 1178, 1184, 1230, 1232, 1252, 1327, 1337], "ddww": 1360, "de": 1360, "deal": [45, 49, 241, 338, 350, 352, 460, 461, 628, 712, 715, 744, 745, 746, 747, 770, 828, 942, 955, 956, 1071, 1072, 1213, 1291, 1294, 1337], "debug": [29, 878, 942, 1368], "decad": [1346, 1361], "decai": [483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337], "decemb": [467, 1078], "decim": [9, 10, 11, 27, 28, 37, 40, 46, 138, 139, 152, 338, 342, 657, 716, 828, 942, 948, 1233, 1295, 1337, 1359], "decimal_comma": [138, 139, 152], "decimal_separ": [9, 27], "declar": [123, 125, 126, 127, 129, 140, 147, 148, 156, 295, 300, 338, 942, 948, 1346], "decod": [138, 139, 691], "decompos": [304, 338, 907, 942], "decompress": [45, 47, 49, 338, 942], "decor": [50, 52, 53, 54, 55, 168, 172, 248, 338, 577, 828, 839, 840, 1190, 1337], "dedic": [1, 124, 241, 272, 338, 948, 1365], "deem": [207, 338, 854, 942], "deepcopi": [201, 338, 847, 942, 1023, 1337], "def": [1, 50, 52, 53, 54, 55, 140, 166, 168, 172, 192, 262, 302, 338, 347, 622, 681, 684, 709, 743, 789, 828, 850, 886, 942, 948, 1260, 1263, 1368], "default": [4, 5, 9, 10, 14, 27, 30, 33, 34, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 49, 51, 57, 58, 59, 63, 66, 67, 68, 123, 125, 126, 127, 128, 129, 130, 138, 139, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 161, 163, 165, 166, 167, 168, 169, 170, 171, 172, 192, 207, 208, 211, 212, 215, 224, 228, 229, 230, 241, 243, 244, 252, 254, 261, 263, 270, 271, 272, 273, 274, 278, 281, 285, 286, 288, 293, 295, 296, 300, 303, 305, 306, 307, 309, 314, 323, 338, 349, 350, 352, 375, 382, 387, 395, 428, 430, 435, 460, 461, 467, 480, 482, 483, 485, 486, 506, 543, 547, 556, 561, 562, 564, 568, 570, 571, 576, 584, 585, 588, 591, 610, 611, 613, 618, 619, 625, 628, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 662, 664, 673, 674, 683, 690, 702, 707, 708, 709, 712, 714, 715, 717, 719, 740, 741, 744, 746, 749, 753, 754, 758, 759, 761, 768, 769, 770, 771, 772, 773, 776, 779, 783, 784, 785, 787, 788, 794, 800, 803, 806, 809, 810, 812, 815, 816, 817, 819, 828, 849, 850, 854, 855, 857, 858, 860, 867, 868, 872, 873, 882, 891, 895, 897, 901, 902, 906, 908, 909, 910, 915, 917, 924, 942, 946, 948, 955, 956, 979, 986, 991, 998, 1024, 1036, 1037, 1042, 1071, 1072, 1078, 1092, 1096, 1097, 1099, 1100, 1118, 1157, 1161, 1170, 1175, 1176, 1182, 1199, 1200, 1206, 1211, 1213, 1217, 1218, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1235, 1241, 1244, 1252, 1253, 1254, 1262, 1266, 1269, 1281, 1286, 1287, 1288, 1291, 1293, 1294, 1296, 1298, 1316, 1318, 1326, 1327, 1337, 1359, 1360, 1368], "default_match": [675, 687], "default_scop": 34, "defaultazurecredenti": 33, "defaultdict": [273, 338], "defer": [192, 338, 341, 342, 1337, 1342], "defin": [37, 40, 46, 66, 69, 140, 147, 165, 166, 168, 200, 211, 212, 216, 229, 248, 259, 262, 270, 307, 324, 338, 413, 514, 543, 577, 622, 625, 637, 638, 641, 643, 645, 647, 649, 652, 654, 656, 689, 694, 702, 713, 720, 768, 769, 771, 772, 787, 790, 810, 815, 816, 828, 846, 857, 858, 861, 868, 886, 891, 909, 925, 942, 946, 947, 948, 1016, 1125, 1157, 1190, 1211, 1222, 1268, 1273, 1281, 1292, 1299, 1337], "definit": [40, 70, 338, 526, 828, 947, 948, 1140, 1337], "deflat": [35, 338], "deg": 1362, "degre": [286, 309, 338, 564, 570, 627, 651, 652, 655, 656, 673, 741, 751, 761, 804, 805, 809, 817, 828, 902, 910, 942, 1230, 1232, 1252, 1327, 1337, 1358], "delet": [69, 1353, 1367], "delimit": [44, 46, 148, 156, 263, 293, 338, 674, 690, 942, 1253, 1269, 1313, 1337], "delta": [39, 142, 153, 185, 286, 309, 338, 564, 570, 651, 652, 655, 656, 673, 741, 761, 804, 805, 809, 817, 828, 840, 902, 910, 942, 1230, 1232, 1252, 1327, 1337], "delta_merge_opt": [39, 338], "delta_table_opt": [142, 153, 182], "delta_table_vers": 182, "delta_write_opt": [39, 338], "deltalak": [39, 142, 153, 160, 182, 338], "deltashar": 185, "deltat": [39, 142, 153, 338], "demo": [40, 338], "demonstr": [138, 497, 828, 948], "dens": [20, 227, 338, 628, 828, 1213, 1337], "densiti": [1337, 1342], "depend": [45, 50, 56, 91, 140, 143, 149, 160, 197, 338, 368, 369, 533, 534, 577, 588, 625, 628, 773, 776, 779, 785, 828, 952, 972, 973, 1147, 1148, 1211, 1213, 1337, 1368], "deploi": [168, 172], "deprec": [39, 60, 138, 139, 165, 166, 167, 168, 172, 175, 198, 254, 296, 314, 319, 338, 442, 478, 499, 595, 632, 674, 682, 742, 751, 759, 760, 828, 843, 860, 882, 895, 908, 914, 915, 920, 942, 1049, 1057, 1058, 1089, 1117, 1217, 1253, 1261, 1318, 1337], "depth": 134, "desc": [948, 1346, 1349, 1353, 1355], "descend": [51, 279, 284, 338, 363, 383, 563, 618, 628, 661, 670, 671, 740, 752, 828, 896, 900, 942, 967, 987, 1137, 1177, 1213, 1239, 1250, 1326, 1337], "describ": [168, 227, 338, 695, 942, 1274, 1337], "descript": [229, 338, 868, 942, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1363, 1366, 1367], "deseri": [134, 278, 338, 499, 591, 828, 895, 942], "deserializ": [208, 278, 338, 430, 591, 828, 855, 895, 942], "design": [295, 300, 338], "desir": [168, 243, 338, 387, 478, 568, 872, 942, 991, 1089, 1182], "destin": 141, "detail": [56, 124, 140, 141, 161, 163, 196, 229, 338, 467, 733, 828, 868, 917, 942, 1078, 1320, 1337, 1368], "determin": [14, 37, 40, 46, 51, 59, 88, 134, 138, 139, 140, 143, 149, 150, 152, 157, 159, 199, 203, 222, 229, 241, 242, 248, 270, 301, 302, 308, 338, 408, 447, 460, 461, 508, 568, 588, 625, 631, 633, 668, 676, 689, 712, 713, 715, 716, 735, 770, 800, 803, 819, 828, 844, 851, 852, 859, 868, 891, 905, 911, 942, 1054, 1071, 1072, 1120, 1182, 1211, 1217, 1218, 1248, 1255, 1291, 1294, 1295, 1337], "dev": [195, 951, 1230, 1337], "develop": [141, 168, 172], "deviat": [286, 338, 485, 651, 652, 673, 809, 828, 902, 942, 1099, 1252, 1337, 1354], "devic": [295, 338, 849, 917, 942, 1316, 1337], "devicememoryresourc": 917, "df": [1, 7, 8, 9, 10, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 52, 53, 78, 95, 99, 124, 125, 126, 127, 128, 129, 130, 139, 140, 141, 152, 165, 166, 168, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 215, 216, 218, 219, 220, 222, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 246, 247, 248, 249, 250, 251, 252, 253, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 395, 396, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 642, 644, 646, 648, 650, 651, 653, 655, 657, 658, 659, 660, 661, 662, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 718, 720, 721, 722, 723, 725, 726, 727, 728, 729, 730, 731, 732, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 750, 751, 752, 753, 754, 755, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 802, 806, 808, 809, 810, 811, 812, 813, 814, 816, 817, 818, 824, 828, 868, 891, 907, 909, 922, 925, 933, 942, 948, 1072, 1098, 1267, 1271, 1283, 1284, 1314, 1337, 1342, 1346, 1347, 1348, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1368], "df0": [255, 338, 883, 942, 1352], "df1": [51, 59, 161, 162, 214, 217, 255, 285, 310, 338, 883, 942, 1349, 1351, 1352, 1353, 1365], "df2": [51, 59, 161, 162, 214, 217, 310, 338, 1349, 1351, 1352, 1353, 1365], "df3": [51, 338], "df4": 338, "df5": 338, "df6": 338, "df_a": 1365, "df_a1": 59, "df_a2": 59, "df_a3": 59, "df_agg_nuniqu": [259, 338], "df_b": 1365, "df_current_batch": 139, "df_d1": 59, "df_d2": 59, "df_from_str_repr": [294, 338], "df_h1": 59, "df_h2": 59, "df_new_grid": [512, 828], "df_nuniqu": [259, 338], "df_original_grid": [512, 828], "df_panda": 1347, "df_pd": 124, "df_tempor": [641, 643, 645, 647, 649, 652, 654, 656, 828], "dfi": [124, 196], "diagon": [59, 302, 338], "diagonal_relax": 59, "dict": [30, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 52, 54, 56, 123, 125, 126, 127, 128, 129, 134, 135, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 168, 182, 183, 186, 187, 221, 241, 261, 267, 271, 272, 273, 291, 292, 295, 300, 302, 338, 828, 889, 942, 947, 948, 1109, 1337, 1350], "dictat": [135, 457, 828, 1068], "dictionari": [30, 37, 39, 40, 41, 45, 46, 47, 48, 49, 56, 82, 123, 125, 126, 127, 129, 134, 138, 139, 140, 141, 142, 145, 147, 148, 150, 151, 152, 153, 155, 156, 157, 182, 241, 261, 271, 272, 273, 291, 292, 295, 300, 338, 942, 947], "did": [436, 1043], "diff": [312, 338, 468, 469, 470, 471, 472, 473, 474, 557, 828, 912, 942, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1171, 1337], "differ": [40, 45, 94, 97, 118, 138, 143, 158, 161, 163, 192, 211, 217, 229, 230, 241, 243, 263, 270, 272, 273, 292, 295, 296, 302, 338, 431, 443, 457, 458, 461, 467, 476, 482, 497, 506, 538, 557, 559, 568, 577, 610, 611, 613, 618, 632, 633, 712, 738, 776, 779, 785, 828, 857, 858, 860, 868, 872, 891, 942, 946, 948, 1018, 1038, 1050, 1068, 1069, 1072, 1078, 1087, 1094, 1103, 1118, 1152, 1171, 1173, 1190, 1199, 1200, 1202, 1217, 1218, 1291, 1337, 1361, 1363, 1365], "digit": [67, 622, 657, 658, 684, 828, 948, 1233, 1234, 1256, 1263, 1337, 1368], "dimens": [123, 125, 127, 129, 147, 148, 156, 338, 634, 828, 942, 1219, 1318, 1337], "dimension": [125, 127, 129, 296, 338, 942, 1337], "direct": [40, 141, 150, 154, 157, 281, 295, 306, 338, 382, 561, 662, 828, 897, 942, 986, 1175, 1241, 1337], "directli": [6, 30, 40, 58, 59, 140, 168, 172, 192, 273, 295, 338, 483, 485, 486, 633, 803, 828, 850, 942, 1097, 1099, 1100, 1218, 1316, 1337, 1349, 1365, 1368], "directori": [40, 45, 135, 150, 152, 155, 157, 338], "dirpath": [35, 37, 41, 42, 45, 152, 338], "disabl": [45, 49, 50, 90, 91, 150, 155, 169, 241, 338, 849, 942], "disable_string_cach": 91, "disallow": 168, "discard": [220, 338, 493, 828, 864, 942, 1107, 1337], "disco": [686, 688, 1265, 1267], "discont": [686, 688, 1265, 1267], "discourag": [577, 828], "discoveri": [263, 338], "discret": [428, 431, 480, 508, 538, 557, 625, 828, 1036, 1038, 1092, 1120, 1152, 1171, 1211, 1337], "disk": [45, 46, 47, 48, 49, 144, 338, 592, 898, 942], "dispatch": 948, "displai": [7, 10, 11, 12, 13, 17, 18, 19, 23, 24, 25, 26, 40, 207, 227, 338, 854, 860, 942], "distanc": [244, 338, 508, 828, 873, 942, 1120, 1337], "distinct": [40, 172, 261, 263, 316, 338, 388, 517, 520, 569, 628, 637, 773, 828, 992, 1129, 1132, 1183, 1213, 1222, 1337, 1354, 1364, 1366, 1368], "distinct_count": [45, 49, 338, 942], "distinguish": [467, 1078], "distribut": [526, 668, 828, 1140, 1248, 1337], "div": 1358, "divid": [20, 428, 462, 475, 483, 485, 486, 497, 526, 625, 828, 1036, 1073, 1086, 1097, 1099, 1100, 1140, 1211, 1337, 1354, 1359], "divis": [497, 736, 828, 1359], "divisor": [286, 309, 338, 564, 570, 651, 652, 655, 656, 673, 741, 761, 804, 805, 809, 817, 828, 902, 910, 942, 1230, 1232, 1252, 1327, 1337], "dl": [300, 338], "do": [1, 40, 46, 47, 48, 49, 51, 57, 58, 125, 126, 129, 138, 150, 152, 157, 161, 162, 163, 164, 197, 207, 209, 217, 240, 243, 244, 263, 267, 290, 302, 306, 338, 341, 427, 435, 540, 576, 698, 699, 707, 708, 709, 759, 800, 803, 819, 828, 845, 849, 850, 854, 856, 860, 872, 873, 878, 887, 889, 898, 917, 942, 948, 1035, 1042, 1103, 1154, 1277, 1278, 1286, 1287, 1288, 1321, 1337, 1342], "do_polars_oper": 29, "do_someth": 140, "do_various_th": 192, "doc": [39, 41, 42, 141, 144, 146, 161, 163, 194, 195, 205, 338, 950, 951], "document": [32, 94, 141, 194, 338, 342, 464, 467, 692, 712, 714, 715, 719, 824, 917, 950, 1018, 1075, 1078, 1271, 1291, 1293, 1294, 1298], "doe": [10, 37, 39, 46, 51, 112, 123, 125, 126, 127, 129, 130, 138, 139, 140, 141, 142, 143, 147, 148, 152, 153, 156, 158, 202, 217, 220, 224, 229, 230, 242, 243, 271, 272, 273, 303, 312, 315, 338, 341, 342, 478, 493, 497, 506, 568, 577, 676, 686, 688, 700, 708, 709, 738, 824, 828, 848, 849, 854, 864, 868, 872, 878, 906, 912, 916, 942, 1025, 1089, 1103, 1107, 1118, 1243, 1255, 1265, 1267, 1279, 1337, 1342, 1360], "doesn": [39, 138, 152, 229, 244, 338, 480, 828, 868, 873, 942, 1092, 1337], "dog": [675, 718, 721, 758, 1254, 1297, 1300], "doi": 1361, "dollar": [698, 699, 1277, 1278], "domain": [1, 684, 1263], "don": [59, 229, 244, 248, 303, 306, 338, 427, 540, 577, 618, 828, 868, 873, 906, 942, 948, 1035, 1154, 1190, 1337], "done": [139, 158, 192, 198, 244, 338, 353, 354, 618, 828, 843, 846, 873, 942, 958, 1337], "dot": [51, 592, 824, 828, 898, 942, 1337], "doubl": [297, 338, 698, 699, 1277, 1278], "dow": 1361, "down": [152, 155, 156, 157, 158, 200, 338, 409, 496, 828, 1110, 1337], "download": [148, 152, 155, 156, 592, 898, 942], "downstream": [296, 338, 661, 828, 1239, 1337], "dr": 154, "drago": [689, 1268], "dragon": 689, "dragonfr": 1268, "dragonfruit": [689, 702, 713, 1268, 1281, 1292], "dramat": 143, "draw": [20, 25, 168, 172, 1368], "drawback": 824, "drawfn": 1368, "drawing_charact": 20, "dremio": 140, "driver": [38, 140, 141, 338], "drop": [1, 126, 210, 211, 212, 248, 303, 312, 338, 431, 433, 434, 538, 539, 625, 828, 857, 858, 906, 912, 942, 1038, 1040, 1041, 1152, 1153, 1211, 1337, 1364], "drop_dupl": [303, 338, 906, 942], "drop_empty_col": [143, 149], "drop_empty_row": [143, 149], "drop_first": [293, 338, 1313, 1337], "drop_in_plac": 338, "drop_nan": [338, 434, 828, 942, 1041, 1337], "drop_nul": [338, 433, 828, 942, 1040, 1337], "dset": 158, "dst": [462, 475, 1073, 1086], "dst_offset": [436, 1043], "dt": [1, 40, 51, 143, 149, 270, 338, 638, 773, 828, 837, 891, 942, 948, 1345, 1360, 1361], "dt1": 1360, "dt2": 1360, "dtm": [40, 338, 439, 467, 948, 1046, 1078, 1360], "dtm_iso": 467, "dtm_iso_strict": 467, "dtype": [10, 40, 50, 54, 60, 66, 70, 82, 90, 91, 101, 123, 125, 127, 129, 130, 138, 139, 140, 141, 143, 147, 148, 149, 152, 156, 165, 166, 167, 168, 172, 194, 196, 200, 203, 229, 244, 270, 294, 295, 296, 297, 300, 306, 315, 338, 395, 409, 410, 411, 412, 413, 414, 425, 426, 467, 478, 487, 500, 535, 543, 574, 576, 577, 584, 623, 630, 631, 638, 663, 665, 691, 712, 729, 733, 739, 749, 756, 775, 779, 783, 784, 786, 787, 788, 789, 790, 800, 803, 810, 819, 828, 846, 851, 868, 873, 891, 916, 942, 947, 948, 950, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 998, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1023, 1033, 1034, 1037, 1038, 1078, 1089, 1096, 1127, 1145, 1146, 1149, 1157, 1181, 1188, 1190, 1209, 1220, 1242, 1245, 1270, 1291, 1308, 1315, 1316, 1318, 1319, 1320, 1321, 1325, 1337, 1365, 1368], "dtype_format": [40, 338], "dtypekind": 196, "dtypelik": [194, 950], "dtypeoper": [1, 54], "dubiou": 94, "due": [229, 244, 270, 273, 308, 338, 349, 444, 457, 462, 475, 601, 602, 604, 606, 608, 609, 638, 641, 643, 645, 647, 649, 652, 654, 656, 754, 768, 769, 771, 772, 815, 816, 828, 846, 868, 873, 891, 942, 1051, 1068, 1073, 1086], "dummi": [293, 338, 1313, 1337], "dump": 134, "duplic": [51, 99, 236, 243, 244, 245, 303, 307, 338, 349, 515, 601, 625, 828, 872, 873, 874, 906, 909, 942, 1126, 1211, 1337, 1366], "duplicateerror": [625, 828, 1211, 1337], "dur": [245, 338, 874, 942], "durat": [192, 244, 308, 338, 436, 444, 467, 468, 469, 470, 471, 472, 473, 474, 478, 484, 733, 768, 769, 771, 772, 815, 816, 828, 873, 942, 947, 948, 1043, 1051, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1089, 1098, 1318, 1320, 1337], "dure": [50, 98, 138, 139, 152, 192, 217, 338, 1103, 1337], "dutch": [435, 754, 1042], "dynam": [135, 229, 338, 387, 568, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 828, 868, 942, 946, 991, 1182], "dynamicgroupbi": [229, 338], "e": [10, 33, 35, 37, 39, 41, 42, 45, 46, 124, 134, 138, 144, 146, 150, 155, 157, 158, 170, 208, 220, 227, 231, 240, 244, 247, 289, 290, 296, 306, 338, 347, 430, 480, 484, 487, 514, 571, 577, 582, 583, 584, 585, 586, 588, 589, 590, 592, 593, 594, 663, 668, 687, 708, 709, 720, 775, 790, 807, 818, 828, 855, 864, 873, 876, 889, 942, 946, 948, 1092, 1098, 1125, 1248, 1266, 1299, 1337, 1355, 1360, 1368], "e101": [40, 338], "e_filt": [588, 590], "e_sum_ov": [588, 590], "e_sum_slic": [588, 590], "each": [37, 40, 46, 51, 60, 67, 78, 139, 140, 143, 148, 156, 161, 162, 163, 164, 166, 204, 206, 213, 220, 227, 228, 229, 242, 244, 248, 261, 263, 270, 272, 274, 295, 300, 304, 307, 308, 316, 317, 319, 321, 323, 324, 332, 338, 363, 408, 412, 413, 428, 462, 475, 493, 517, 520, 546, 549, 556, 566, 573, 577, 625, 628, 636, 637, 644, 648, 659, 664, 671, 684, 688, 689, 693, 694, 702, 704, 705, 713, 720, 735, 749, 752, 758, 783, 784, 810, 818, 828, 849, 852, 853, 859, 864, 868, 873, 887, 891, 907, 909, 918, 920, 922, 924, 925, 933, 942, 967, 1015, 1016, 1022, 1036, 1073, 1086, 1129, 1132, 1160, 1163, 1170, 1180, 1211, 1213, 1221, 1222, 1235, 1244, 1263, 1267, 1268, 1272, 1273, 1281, 1283, 1284, 1292, 1299, 1307, 1337, 1354, 1365, 1366, 1368], "eager": [229, 244, 263, 306, 338, 437, 440, 443, 445, 454, 455, 457, 458, 461, 462, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 641, 643, 645, 647, 649, 652, 654, 656, 749, 753, 768, 769, 771, 772, 779, 783, 784, 787, 800, 803, 806, 807, 810, 815, 816, 819, 827, 828, 868, 873, 878, 942, 947, 1043, 1044, 1047, 1050, 1051, 1052, 1053, 1058, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1365], "eagerli": [568, 1346], "ear": [702, 713, 1281], "earlier": [244, 338, 873, 942], "earliest": [229, 338, 460, 461, 712, 715, 770, 868, 934, 942, 1071, 1072, 1291, 1294], "easi": 192, "easiest": 197, "easili": [51, 276, 300, 312, 317, 338, 810, 824, 893, 912, 918, 942], "east": [69, 157, 245, 338, 874, 942], "ebf1d": [40, 338], "eee": [1, 40, 338, 948], "ef": 699, "effect": [40, 222, 229, 338, 444, 497, 577, 603, 605, 607, 759, 828, 868, 915, 916, 942, 1043, 1051], "effici": [124, 140, 240, 242, 338, 576, 828], "efgh": 1360, "eg": [17, 25, 26, 40, 59, 141, 192, 295, 338, 462, 712, 715, 736, 828, 948, 1291, 1294], "egnaro": 1360, "either": [82, 135, 168, 239, 243, 244, 245, 261, 270, 271, 295, 296, 338, 484, 576, 623, 625, 638, 712, 744, 752, 756, 810, 828, 849, 872, 873, 874, 876, 891, 942, 946, 948, 1098, 1209, 1211, 1291, 1337, 1350, 1368], "element": [13, 14, 25, 163, 164, 167, 168, 170, 172, 197, 199, 206, 239, 263, 271, 284, 286, 301, 309, 338, 355, 356, 357, 358, 359, 360, 371, 372, 407, 408, 415, 418, 419, 420, 421, 423, 424, 425, 426, 427, 433, 434, 488, 489, 493, 506, 510, 518, 529, 537, 539, 540, 541, 544, 549, 557, 558, 559, 560, 564, 570, 572, 573, 576, 577, 618, 619, 628, 631, 639, 640, 642, 644, 646, 648, 650, 651, 653, 655, 660, 665, 666, 667, 671, 672, 673, 704, 705, 716, 731, 732, 734, 735, 741, 752, 761, 787, 804, 805, 809, 817, 828, 844, 853, 900, 902, 905, 910, 942, 959, 960, 961, 962, 963, 964, 975, 976, 1010, 1020, 1023, 1026, 1027, 1028, 1029, 1031, 1032, 1033, 1034, 1035, 1040, 1041, 1101, 1102, 1107, 1108, 1119, 1122, 1130, 1139, 1141, 1143, 1144, 1151, 1153, 1154, 1155, 1158, 1163, 1171, 1172, 1173, 1174, 1186, 1187, 1190, 1206, 1213, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1237, 1245, 1246, 1247, 1251, 1252, 1283, 1284, 1295, 1309, 1310, 1311, 1315, 1322, 1323, 1327, 1337, 1354, 1355], "elementwis": [576, 618, 639, 640, 642, 644, 646, 648, 651, 653, 655, 828, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1337], "elif": 818, "elig": [878, 942], "elimin": [526, 828, 1140, 1337], "elis": [255, 338, 883, 942], "ellips": 20, "ellipsi": [227, 338], "elppa": 1360, "els": [139, 818], "email": [684, 1263], "email_part": [684, 1263], "emphas": [338, 342], "emploi": 948, "empti": [13, 35, 37, 46, 103, 126, 138, 139, 143, 149, 152, 201, 202, 229, 254, 305, 338, 674, 682, 788, 806, 847, 848, 868, 882, 908, 942, 947, 948, 1023, 1025, 1108, 1127, 1141, 1253, 1261, 1337], "en": [20, 40, 338], "enabl": [28, 29, 45, 49, 50, 90, 91, 142, 150, 153, 155, 157, 161, 162, 163, 164, 176, 194, 276, 297, 312, 338, 350, 352, 632, 633, 661, 676, 686, 688, 700, 740, 824, 828, 849, 893, 912, 942, 950, 955, 956, 1217, 1218, 1239, 1255, 1265, 1267, 1279, 1319, 1326, 1337], "enable_string_cach": 90, "enclos": [499, 828], "encod": [63, 69, 81, 134, 138, 139, 152, 293, 338, 341, 392, 499, 636, 678, 724, 828, 995, 1221, 1257, 1313, 1337, 1342], "encount": [114, 138, 139, 152, 229, 338, 610, 611, 691, 692, 759, 763, 777, 828, 868, 942, 1199, 1200, 1270, 1271, 1337], "end": [37, 40, 46, 138, 139, 152, 229, 263, 338, 391, 394, 397, 410, 414, 436, 462, 487, 562, 675, 680, 684, 689, 696, 702, 706, 707, 708, 711, 749, 754, 767, 768, 769, 770, 771, 772, 775, 783, 784, 787, 815, 816, 818, 824, 828, 868, 887, 942, 948, 997, 1012, 1017, 1043, 1073, 1137, 1176, 1259, 1263, 1268, 1275, 1281, 1285, 1286, 1287, 1292, 1337, 1360], "endian": [395, 998], "endpoint": [177, 428, 625, 787, 828, 1036, 1211, 1337], "ends_a": 1360, "ends_in_digit": 1360, "ends_with": [391, 397, 414, 675, 706, 948, 1017, 1285, 1358], "ends_with_expr": 394, "ends_with_lit": 394, "engin": [14, 38, 140, 141, 143, 149, 174, 228, 243, 248, 296, 303, 324, 338, 576, 807, 828, 849, 867, 872, 878, 882, 906, 917, 925, 939, 942, 946, 1190, 1318, 1337, 1349, 1365], "engine_opt": [38, 143, 338], "enginetyp": [849, 942], "enough": [540, 668, 828, 1154, 1248, 1337], "ensur": [10, 40, 135, 141, 167, 170, 194, 220, 228, 261, 263, 271, 296, 338, 514, 576, 828, 864, 867, 878, 917, 942, 948, 950, 1318, 1337], "enter": 192, "entir": [40, 57, 58, 143, 149, 338, 849, 850, 942], "entri": [192, 338, 942, 947, 1365], "entropi": [828, 1337], "enumer": [69, 128, 138, 139, 143, 149, 152, 242, 338], "env": [4, 173], "env_onli": 30, "environ": [4, 30, 37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 171, 174, 177, 182, 295, 338, 942], "eol_char": [138, 139, 152], "eparg": 1360, "epoch": [65, 66, 779, 1361], "epoch_": [445, 1052], "epoch_n": [445, 1052], "epochtimeunit": [445, 779, 1052], "eq": [220, 338, 482, 493, 828, 864, 942, 1094, 1337], "eq_miss": [828, 1202, 1337], "equal": [50, 91, 138, 139, 152, 161, 162, 163, 164, 229, 244, 245, 255, 284, 338, 428, 475, 481, 482, 502, 528, 568, 613, 625, 631, 639, 640, 642, 644, 646, 648, 651, 653, 655, 671, 696, 697, 700, 722, 752, 787, 804, 805, 818, 824, 828, 868, 873, 874, 883, 900, 942, 1036, 1073, 1094, 1182, 1202, 1211, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1275, 1276, 1279, 1301, 1337, 1354, 1357, 1368], "equival": [40, 59, 123, 125, 126, 127, 129, 147, 148, 156, 229, 239, 259, 338, 347, 351, 413, 481, 482, 484, 497, 502, 504, 528, 575, 597, 599, 612, 613, 614, 617, 623, 694, 718, 720, 721, 728, 736, 743, 828, 868, 942, 1016, 1093, 1094, 1098, 1113, 1115, 1139, 1142, 1189, 1201, 1202, 1273, 1297, 1299, 1300, 1337, 1347, 1355], "err": 685, "error": [14, 39, 58, 59, 109, 113, 115, 125, 126, 129, 138, 139, 143, 150, 152, 157, 244, 263, 271, 296, 338, 349, 374, 375, 392, 435, 543, 545, 547, 568, 601, 633, 675, 678, 683, 685, 687, 691, 692, 712, 714, 715, 719, 828, 846, 850, 873, 917, 925, 942, 978, 979, 995, 1042, 1157, 1159, 1161, 1218, 1254, 1257, 1262, 1264, 1266, 1270, 1271, 1291, 1293, 1294, 1298, 1318, 1337, 1363], "escap": [92, 138, 139, 141, 152, 681, 698, 699, 1260, 1277, 1278], "esp": 14, "especi": [166, 637, 828, 942, 1222, 1337], "espresso": 948, "est": 771, "establish": [140, 192], "estim": [138, 139, 198, 215, 338, 354, 485, 486, 526, 748, 828, 843, 942, 958, 1096, 1099, 1100, 1140, 1337], "estimated_s": [338, 1337], "etc": [21, 39, 40, 135, 138, 142, 143, 144, 146, 153, 154, 338, 577, 828, 948, 1236, 1238, 1337, 1361], "eu": [153, 154], "eur": [227, 338, 1368], "europ": [440, 444, 461, 1047, 1051, 1072], "eval": [294, 338, 576, 577, 774, 828, 1190, 1315, 1337], "evalu": [46, 47, 48, 49, 157, 218, 220, 244, 338, 351, 364, 366, 367, 399, 400, 401, 402, 404, 405, 427, 493, 511, 531, 532, 568, 617, 618, 744, 746, 749, 753, 768, 769, 771, 772, 774, 783, 784, 787, 800, 803, 806, 810, 815, 816, 818, 819, 828, 849, 864, 870, 872, 873, 942, 968, 970, 971, 1002, 1003, 1004, 1005, 1007, 1008, 1035, 1107, 1145, 1146, 1328, 1337, 1357], "even": [37, 46, 138, 243, 338, 484, 622, 625, 828, 872, 942, 948, 1098, 1211, 1337], "evenli": [229, 338, 787, 868, 942], "event": [58, 850, 942], "eventu": [38, 338], "ever": [618, 828], "everi": [14, 37, 46, 138, 139, 143, 149, 152, 223, 229, 292, 308, 338, 366, 367, 368, 369, 372, 374, 380, 423, 424, 425, 426, 427, 462, 475, 489, 501, 533, 534, 538, 541, 544, 545, 546, 554, 557, 562, 566, 637, 682, 763, 764, 828, 866, 868, 942, 970, 971, 972, 973, 976, 978, 984, 1031, 1032, 1033, 1034, 1035, 1073, 1086, 1102, 1112, 1147, 1148, 1152, 1155, 1158, 1159, 1160, 1168, 1171, 1176, 1180, 1222, 1261, 1337], "everybodi": [676, 700, 1255, 1279], "everyth": 948, "ew": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "ewm_mean": [828, 1337], "ewm_mean_bi": [828, 1337], "ewm_std": [828, 1337], "ewm_var": [828, 1337], "ewma": [484, 828, 1098, 1337], "exact": [163, 166, 168, 172, 244, 282, 338, 354, 497, 682, 710, 711, 712, 714, 715, 736, 828, 873, 942, 1261, 1291, 1293, 1294], "exactli": [125, 126, 129, 161, 162, 163, 164, 167, 168, 172, 338, 704, 705, 710, 711, 773, 942, 1243, 1283, 1284, 1289, 1290, 1337], "exampl": [4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 78, 82, 90, 91, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 135, 138, 139, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 840, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337, 1342, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1367], "exc_tb": 1365, "exc_typ": 1365, "exc_val": 1365, "exce": [227, 338], "excel": [36, 40, 137, 143, 338, 840], "excelspreadsheetengin": 143, "except": [0, 209, 224, 231, 244, 247, 267, 289, 338, 633, 689, 713, 775, 828, 840, 856, 873, 889, 942, 948, 1011, 1119, 1144, 1218, 1268, 1292, 1309, 1318, 1337, 1364], "exclud": [168, 172, 229, 338, 408, 423, 426, 435, 514, 584, 735, 754, 824, 828, 868, 942, 948, 1042, 1125, 1337], "excluded_dtyp": [168, 169, 172], "exclus": [271, 338, 743, 749, 783, 784, 828], "execut": [39, 50, 59, 135, 140, 141, 246, 285, 338, 430, 540, 740, 807, 828, 845, 849, 855, 878, 887, 901, 917, 942, 1154, 1326, 1337, 1347, 1348, 1349, 1351, 1365, 1367], "execute_glob": 1365, "execute_opt": [140, 141], "exist": [1, 38, 39, 40, 51, 69, 99, 142, 150, 153, 157, 168, 209, 224, 263, 267, 302, 307, 312, 313, 338, 349, 391, 394, 397, 439, 461, 698, 699, 757, 828, 852, 856, 859, 889, 892, 909, 911, 912, 913, 942, 948, 1046, 1072, 1277, 1278, 1367], "existing_t": 1367, "existing_table_path": [39, 338], "exit": [50, 90, 192, 1352, 1365], "exp": [483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337, 1358], "exp_a": 1359, "expand": [135, 138, 150, 152, 157, 489, 582, 586, 631, 726, 828, 948, 1102, 1337], "expand_selector": 948, "expans": 723, "expect": [37, 39, 41, 45, 46, 47, 48, 49, 67, 69, 73, 104, 112, 120, 138, 140, 142, 148, 150, 152, 153, 155, 156, 157, 162, 164, 182, 338, 568, 577, 788, 828, 876, 878, 942], "expens": [138, 139, 148, 150, 152, 156, 157, 171, 173, 241, 248, 271, 272, 273, 302, 303, 338, 577, 828, 852, 854, 859, 892, 906, 911, 942, 1103, 1190, 1337, 1368], "experiment": [245, 300, 338, 787, 874, 912, 942], "expiri": [37, 39, 41, 45, 46, 47, 48, 49, 142, 148, 150, 152, 153, 155, 156, 157, 182, 338, 942], "explain": [57, 58, 197, 246, 338, 849, 850, 942, 1364], "explainformat": [860, 942], "explicit": [40, 98, 140, 152, 166, 285, 307, 338, 467, 802, 901, 909, 942, 1078], "explicitli": [69, 98, 141, 166, 168, 192, 224, 243, 338, 632, 810, 828, 839, 872, 942, 1365], "explod": [135, 338, 408, 495, 618, 634, 735, 828, 942, 1219, 1337, 1355], "explor": [207, 338, 854, 942], "expon": [623, 828, 1209, 1337, 1359], "exponenti": [483, 484, 485, 486, 488, 623, 828, 1097, 1098, 1099, 1100, 1101, 1337, 1359], "export": [40, 41, 42, 195, 241, 242, 272, 273, 290, 292, 295, 338, 824, 948, 951, 1312, 1337], "expos": 840, "expr": [1, 51, 52, 53, 54, 55, 133, 135, 216, 218, 219, 243, 244, 245, 259, 263, 271, 276, 277, 295, 300, 312, 313, 338, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 819, 820, 821, 823, 824, 828, 829, 830, 833, 834, 835, 836, 837, 861, 862, 863, 872, 873, 874, 888, 893, 894, 912, 913, 942, 948, 1035, 1068, 1093, 1094, 1098, 1105, 1106, 1111, 1113, 1115, 1142, 1154, 1160, 1176, 1180, 1189, 1201, 1202, 1254, 1259, 1266, 1285, 1337, 1363], "expr1": [1357, 1365], "expr2": [1357, 1365], "expr_unique_subset": [259, 338], "express": [0, 8, 46, 47, 48, 49, 57, 58, 133, 135, 165, 168, 172, 199, 216, 218, 220, 228, 234, 243, 244, 248, 259, 263, 271, 276, 277, 281, 284, 295, 300, 301, 312, 313, 315, 317, 324, 338, 347, 349, 350, 351, 352, 353, 355, 356, 357, 358, 359, 360, 363, 364, 368, 369, 370, 371, 372, 375, 386, 391, 392, 393, 394, 395, 396, 397, 408, 410, 412, 413, 414, 417, 418, 419, 420, 421, 427, 428, 429, 430, 432, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 481, 482, 484, 487, 489, 490, 492, 493, 497, 499, 500, 502, 503, 504, 505, 511, 514, 515, 516, 517, 518, 519, 520, 528, 529, 533, 534, 536, 537, 540, 541, 547, 549, 567, 568, 574, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 593, 595, 597, 599, 601, 602, 604, 606, 608, 609, 612, 613, 615, 617, 618, 622, 623, 624, 625, 627, 631, 632, 633, 634, 636, 637, 659, 660, 661, 664, 666, 667, 669, 671, 674, 675, 676, 677, 678, 679, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 692, 693, 694, 698, 699, 700, 702, 703, 704, 705, 713, 717, 727, 728, 731, 732, 735, 736, 737, 739, 740, 742, 743, 744, 745, 747, 749, 750, 751, 752, 753, 755, 756, 757, 758, 759, 760, 761, 763, 764, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 797, 800, 802, 803, 804, 805, 806, 808, 810, 812, 814, 815, 816, 818, 819, 824, 827, 840, 844, 849, 850, 860, 861, 864, 867, 872, 873, 887, 893, 894, 897, 898, 900, 905, 912, 913, 914, 916, 918, 925, 942, 948, 975, 1024, 1035, 1042, 1046, 1078, 1093, 1094, 1098, 1104, 1113, 1115, 1125, 1142, 1151, 1154, 1189, 1190, 1201, 1202, 1217, 1218, 1237, 1241, 1254, 1255, 1256, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1270, 1271, 1277, 1278, 1279, 1292, 1296, 1337, 1355, 1357, 1359, 1360, 1364], "exprmetanamespac": [581, 587], "ext": 140, "extend": [0, 126, 310, 338, 490, 828, 840, 946, 957, 1104, 1337], "extend_const": [828, 1337], "extens": [297, 338, 1319, 1337], "extern": [189, 914, 942], "external_shallow_clon": 189, "extra": [39, 135, 138, 139, 142, 144, 146, 150, 152, 153, 154, 157, 217, 229, 338, 828, 868, 942, 1103, 1337], "extract": [130, 197, 285, 338, 438, 441, 443, 446, 448, 449, 450, 451, 452, 453, 456, 458, 459, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 476, 477, 479, 622, 684, 685, 686, 691, 692, 702, 704, 828, 1045, 1048, 1049, 1050, 1053, 1055, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1070, 1074, 1076, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1087, 1088, 1090, 1263, 1264, 1265, 1270, 1271, 1281, 1358], "extract_mani": [688, 1267], "extract_numb": [622, 828], "extracted_nr": 684, "extrem": [490, 639, 828, 1104, 1223, 1337], "extrema": [663, 828, 1242, 1337], "f": [52, 139, 140, 220, 227, 242, 290, 296, 302, 306, 338, 347, 387, 396, 568, 663, 682, 712, 715, 757, 828, 864, 942, 948, 991, 1182, 1261, 1291, 1294, 1337, 1342, 1355], "f32": [1, 54, 200, 285, 294, 300, 338, 663, 807, 828, 846, 901, 942, 948, 1188, 1337, 1363], "f4": [296, 338], "f5ed2452": [40, 338], "f64": [7, 9, 10, 11, 15, 18, 19, 21, 22, 23, 24, 25, 27, 51, 53, 55, 59, 78, 124, 126, 147, 158, 165, 168, 200, 201, 202, 205, 207, 208, 209, 211, 213, 218, 219, 222, 226, 227, 228, 229, 234, 235, 243, 244, 250, 251, 252, 253, 257, 263, 264, 265, 283, 284, 286, 288, 300, 309, 312, 317, 320, 322, 325, 326, 327, 328, 330, 331, 338, 346, 349, 355, 356, 357, 358, 359, 360, 378, 384, 389, 396, 409, 415, 416, 418, 419, 420, 428, 429, 433, 434, 463, 480, 481, 482, 483, 484, 485, 486, 487, 488, 491, 492, 496, 497, 502, 504, 512, 513, 521, 522, 523, 524, 526, 528, 540, 551, 552, 564, 570, 571, 572, 573, 575, 578, 579, 580, 596, 599, 601, 610, 611, 612, 613, 619, 623, 625, 626, 627, 628, 632, 633, 639, 640, 642, 643, 644, 645, 646, 648, 649, 650, 651, 652, 653, 655, 656, 657, 658, 665, 666, 667, 668, 672, 673, 727, 731, 732, 736, 741, 750, 751, 755, 757, 759, 761, 774, 775, 787, 790, 793, 794, 795, 807, 809, 817, 824, 828, 846, 847, 854, 856, 857, 862, 863, 867, 868, 871, 872, 873, 880, 881, 888, 900, 902, 910, 912, 914, 918, 921, 923, 926, 927, 928, 929, 931, 932, 942, 948, 959, 960, 961, 962, 963, 964, 982, 988, 993, 999, 1020, 1021, 1026, 1027, 1028, 1036, 1037, 1040, 1041, 1074, 1097, 1098, 1099, 1100, 1101, 1105, 1110, 1120, 1123, 1124, 1154, 1165, 1166, 1178, 1184, 1185, 1186, 1187, 1206, 1209, 1211, 1213, 1218, 1223, 1225, 1226, 1228, 1229, 1230, 1232, 1233, 1234, 1245, 1246, 1247, 1251, 1310, 1311, 1325, 1337, 1346, 1354, 1355, 1359, 1362, 1365, 1368], "f_string": 778, "fa1e": [717, 1296], "face": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 338, 942], "facil": 140, "facilit": [203, 338], "factor": [483, 485, 486, 733, 828, 1097, 1099, 1100, 1320, 1337], "fail": [37, 38, 39, 41, 45, 46, 47, 48, 49, 124, 142, 144, 148, 150, 152, 153, 155, 156, 157, 182, 196, 296, 303, 338, 364, 465, 568, 712, 714, 715, 719, 828, 906, 942, 1190, 1291, 1293, 1294, 1298, 1318, 1337, 1363], "fall": [157, 428, 625, 828, 849, 917, 942, 1036, 1211, 1337, 1354], "fallback": 143, "fals": [5, 7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 28, 30, 33, 37, 39, 40, 45, 46, 47, 48, 49, 51, 57, 58, 59, 124, 125, 126, 128, 129, 130, 135, 138, 139, 140, 142, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 160, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 196, 199, 200, 201, 202, 207, 214, 222, 226, 227, 228, 229, 233, 234, 236, 237, 238, 241, 243, 244, 246, 251, 252, 258, 259, 261, 263, 264, 271, 272, 273, 274, 276, 279, 282, 284, 285, 288, 291, 293, 296, 297, 301, 302, 303, 307, 308, 310, 312, 320, 322, 325, 326, 328, 331, 338, 350, 351, 352, 363, 366, 367, 370, 374, 375, 383, 388, 391, 394, 397, 408, 409, 410, 414, 422, 423, 424, 425, 426, 427, 428, 435, 447, 463, 480, 481, 482, 483, 485, 486, 504, 505, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 536, 540, 543, 545, 547, 556, 563, 568, 569, 575, 576, 577, 581, 583, 584, 585, 587, 589, 592, 593, 612, 613, 615, 617, 618, 620, 621, 625, 628, 639, 640, 642, 644, 646, 648, 650, 651, 653, 655, 659, 661, 663, 668, 670, 671, 674, 675, 676, 677, 680, 686, 687, 688, 690, 691, 698, 699, 700, 703, 704, 706, 712, 714, 715, 717, 735, 737, 740, 743, 744, 745, 746, 747, 749, 752, 753, 754, 758, 759, 762, 763, 768, 769, 771, 772, 783, 784, 787, 788, 794, 800, 803, 806, 807, 810, 812, 815, 816, 818, 819, 828, 844, 846, 847, 848, 849, 850, 854, 860, 867, 868, 872, 873, 876, 878, 887, 893, 896, 898, 900, 901, 905, 906, 909, 912, 917, 921, 923, 926, 927, 929, 932, 942, 947, 948, 955, 956, 967, 970, 971, 974, 978, 979, 987, 992, 994, 995, 997, 1000, 1011, 1012, 1014, 1017, 1019, 1022, 1023, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1042, 1054, 1074, 1094, 1095, 1097, 1099, 1100, 1107, 1109, 1114, 1116, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1145, 1146, 1150, 1154, 1157, 1159, 1161, 1170, 1177, 1183, 1196, 1202, 1204, 1207, 1208, 1211, 1213, 1214, 1215, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1239, 1243, 1248, 1250, 1253, 1254, 1255, 1256, 1259, 1265, 1266, 1267, 1269, 1270, 1277, 1278, 1279, 1282, 1283, 1285, 1291, 1293, 1294, 1296, 1313, 1318, 1319, 1323, 1326, 1328, 1337, 1347, 1349, 1355, 1360, 1365], "far": [40, 338], "fashion": [243, 338, 860, 887, 898, 942], "fast": [45, 47, 49, 135, 171, 173, 338, 490, 661, 828, 942, 946, 1104, 1239, 1337, 1368], "fast_executemani": [38, 338], "faster": [46, 47, 48, 49, 57, 58, 140, 143, 217, 296, 306, 338, 577, 738, 828, 849, 850, 860, 887, 898, 942, 1103, 1190, 1337], "fastexcel": [143, 160], "favor": [38, 338], "fay": 134, "feat1": [295, 300, 338], "feat2": [295, 300, 338], "feather": [41, 144, 155, 338, 840], "featur": [1, 45, 56, 67, 69, 73, 295, 300, 338], "feature_0": [914, 942], "feature_0_train": [914, 942], "feature_1": [914, 942], "feature_nam": [300, 338], "feb": [160, 1360], "februari": 1360, "fed": 708, "feel": [676, 700, 1255, 1279], "fetch": [132, 849, 942], "fetch_california_h": [300, 338], "few": [227, 338], "fewer": [689, 713, 942, 1268, 1292], "ff": 1354, "ff00": [717, 1296], "fff": 1, "ffff00": [392, 393, 678, 995, 996, 1257], "ffffff": [40, 338], "ffi": [215, 338, 1096, 1337], "fgg": 948, "fghi": 1360, "fh": 139, "fiction": 1346, "field": [36, 37, 39, 46, 82, 116, 119, 126, 304, 338, 387, 568, 576, 577, 603, 605, 607, 636, 684, 685, 691, 704, 705, 725, 726, 727, 733, 740, 763, 764, 789, 810, 828, 907, 942, 991, 1182, 1190, 1221, 1264, 1283, 1284, 1305, 1307, 1320, 1337, 1361], "field_0": [387, 568, 991, 1182], "field_1": [387, 568, 991, 1182], "field_2": [991, 1182], "field_n": [387, 568, 991, 1182], "field_nam": [577, 828, 1190, 1337], "fiftyf": [510, 828], "figsiz": [592, 887, 898, 942], "figur": [592, 658, 828, 898, 942, 1234, 1337], "file": [2, 3, 5, 6, 32, 35, 36, 37, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 135, 136, 137, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 208, 217, 278, 338, 430, 499, 591, 595, 828, 855, 895, 942, 946, 1103, 1337], "file_cache_ttl": [148, 152, 155, 156], "filenam": 144, "filesourc": [143, 149, 150, 157], "filesystem": [39, 142, 153, 154, 338], "fill": [51, 59, 201, 218, 219, 281, 306, 338, 342, 390, 423, 426, 491, 492, 498, 512, 513, 640, 642, 644, 646, 648, 651, 653, 655, 662, 778, 800, 803, 819, 828, 862, 863, 897, 914, 942, 1105, 1106, 1123, 1124, 1203, 1224, 1225, 1227, 1230, 1231, 1232, 1241, 1337], "fill_char": [696, 697, 1275, 1276], "fill_nan": [219, 338, 492, 828, 863, 942, 1106, 1337], "fill_nul": [51, 218, 338, 491, 828, 862, 914, 942, 1105, 1337], "fill_valu": [281, 306, 338, 662, 828, 897, 942, 1241, 1337], "fillnullstrategi": [219, 338, 492, 828, 863, 942, 1106, 1337], "film": 1346, "filter": [1, 46, 47, 48, 49, 52, 57, 58, 133, 152, 153, 157, 158, 211, 212, 236, 237, 238, 263, 324, 338, 410, 414, 588, 590, 680, 706, 742, 767, 770, 777, 806, 807, 818, 828, 849, 850, 857, 858, 860, 870, 887, 898, 901, 925, 942, 948, 1238, 1337, 1353], "final": [13, 40, 51, 135, 157, 244, 246, 338, 483, 485, 486, 828, 854, 873, 942, 1097, 1099, 1100, 1337, 1366], "find": [59, 225, 338, 510, 660, 675, 676, 688, 828, 1122, 1237, 1255, 1267, 1277, 1337], "find_pat": 687, "fine": [849, 939, 942], "finish": [217, 338, 1103, 1337], "finit": [516, 736, 759, 828, 1128, 1337], "first": [45, 51, 138, 139, 143, 144, 146, 149, 150, 152, 157, 161, 162, 163, 164, 197, 227, 229, 231, 243, 244, 247, 248, 258, 262, 263, 270, 289, 293, 294, 302, 303, 308, 315, 321, 338, 363, 365, 374, 427, 431, 455, 457, 462, 478, 497, 507, 510, 517, 530, 538, 540, 545, 546, 568, 576, 577, 589, 598, 622, 623, 638, 660, 671, 675, 682, 683, 687, 689, 691, 692, 698, 699, 713, 720, 755, 756, 763, 777, 781, 818, 824, 828, 868, 869, 872, 873, 877, 886, 891, 906, 914, 916, 922, 942, 948, 967, 978, 1035, 1037, 1038, 1066, 1068, 1073, 1089, 1119, 1122, 1129, 1144, 1152, 1154, 1159, 1160, 1182, 1190, 1237, 1250, 1261, 1262, 1264, 1266, 1268, 1270, 1271, 1277, 1278, 1292, 1299, 1309, 1313, 1315, 1318, 1337, 1357, 1358, 1360, 1366, 1368], "first_column": [40, 338], "first_non_nul": [568, 1182], "first_part": [704, 705, 1283, 1284], "fisher": [526, 668, 828, 1140, 1248, 1337], "fit": [134, 241, 282, 306, 338, 663, 803, 828, 1242, 1243, 1337], "five": [299, 338, 1368], "fix": [10, 60, 69, 166, 478, 773, 1089], "flag": [56, 142, 153, 165, 279, 296, 338, 661, 675, 683, 684, 687, 698, 699, 828, 860, 878, 896, 942, 948, 1239, 1254, 1262, 1263, 1266, 1277, 1278, 1318, 1337, 1360], "flat": [134, 273, 338, 541, 634, 828, 1155, 1219, 1337], "flatten": 828, "flavour": [40, 140, 338], "flight": 140, "flight_sql": 140, "flightsql": 140, "float": [10, 11, 37, 40, 46, 71, 72, 138, 139, 152, 158, 161, 162, 163, 164, 165, 168, 172, 196, 207, 211, 215, 218, 244, 265, 274, 295, 296, 330, 338, 370, 416, 428, 433, 434, 463, 480, 481, 482, 483, 485, 486, 491, 496, 497, 502, 504, 512, 516, 519, 521, 522, 523, 524, 528, 536, 556, 571, 575, 578, 592, 596, 610, 611, 612, 613, 623, 625, 626, 639, 640, 642, 644, 646, 648, 649, 651, 653, 655, 657, 659, 665, 736, 801, 803, 828, 854, 857, 862, 873, 888, 898, 931, 942, 948, 974, 1011, 1021, 1036, 1037, 1039, 1040, 1041, 1074, 1092, 1096, 1097, 1099, 1100, 1105, 1110, 1120, 1140, 1150, 1170, 1185, 1199, 1200, 1209, 1210, 1211, 1212, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1235, 1238, 1245, 1248, 1252, 1308, 1318, 1327, 1337, 1365, 1368], "float16": [300, 338], "float32": [1, 10, 37, 46, 54, 200, 222, 294, 295, 296, 300, 338, 484, 828, 846, 942, 948, 1098, 1127, 1188, 1316, 1318, 1321, 1337], "float4": [285, 338, 807, 901, 942, 1363], "float64": [10, 37, 40, 46, 126, 138, 147, 165, 168, 203, 213, 215, 222, 275, 300, 312, 338, 355, 356, 357, 358, 359, 360, 396, 409, 418, 419, 420, 429, 463, 484, 487, 521, 522, 627, 666, 667, 731, 732, 775, 790, 800, 803, 819, 824, 828, 851, 859, 892, 912, 942, 947, 948, 1074, 1098, 1319, 1325, 1337], "float_list": 78, "float_precis": [9, 10, 27, 37, 40, 46, 338, 942], "float_scientif": [37, 46, 338, 942], "floatfmt": 11, "floor": [53, 497, 828, 1337, 1358], "floor_a": 1359, "floordiv": [736, 828], "fmt": [11, 244, 338, 511, 778, 828, 870, 873, 942], "fmt_number": [338, 342], "fmt_str_length": [12, 768, 769, 771, 772], "fmt_table_cell_list_len": 13, "fmt_titl": [40, 338], "fn": [763, 764, 777, 802], "foggi": [698, 699, 1277, 1278], "fold": [338, 589, 755, 763, 764, 802], "folder": 158, "follow": [40, 45, 56, 133, 138, 139, 140, 142, 143, 149, 152, 153, 154, 229, 244, 248, 262, 270, 296, 308, 338, 457, 462, 475, 484, 576, 622, 623, 628, 638, 641, 643, 645, 647, 649, 650, 652, 654, 656, 665, 725, 736, 751, 768, 769, 771, 772, 790, 815, 816, 818, 820, 821, 823, 828, 829, 830, 833, 835, 836, 837, 868, 873, 886, 891, 942, 948, 1068, 1073, 1086, 1098, 1209, 1213, 1236, 1238, 1245, 1318, 1329, 1331, 1333, 1337, 1338, 1343, 1344, 1345, 1363, 1368], "font": [40, 338], "font_color": [40, 338], "font_siz": [40, 338], "foo": [35, 37, 39, 41, 42, 43, 44, 45, 134, 147, 148, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 217, 220, 222, 224, 225, 226, 230, 231, 232, 233, 234, 235, 237, 243, 247, 248, 249, 250, 251, 252, 253, 256, 257, 260, 263, 265, 267, 268, 271, 274, 275, 276, 278, 280, 283, 286, 287, 288, 289, 290, 292, 293, 294, 296, 297, 298, 302, 303, 304, 309, 310, 311, 316, 338, 411, 428, 430, 457, 501, 507, 511, 530, 581, 583, 584, 585, 587, 588, 589, 590, 591, 592, 593, 594, 625, 634, 674, 677, 679, 682, 684, 685, 690, 701, 703, 705, 707, 708, 709, 710, 711, 718, 721, 730, 748, 759, 760, 761, 776, 780, 781, 782, 785, 786, 791, 793, 795, 796, 798, 799, 801, 806, 809, 813, 817, 818, 824, 828, 846, 851, 852, 856, 857, 858, 859, 864, 870, 871, 872, 885, 889, 892, 893, 906, 907, 911, 914, 942, 947, 948, 1013, 1036, 1068, 1161, 1209, 1211, 1219, 1256, 1258, 1261, 1263, 1264, 1280, 1284, 1289, 1290, 1297, 1300, 1337, 1351, 1353, 1354, 1355, 1357, 1360, 1363], "foo1": 1360, "foo11": [222, 338], "foo_": [586, 703, 778], "foo_1": [293, 338], "foo_2": [293, 338], "foo_3_4": 1360, "foo_a": [263, 338], "foo_a_bar_1": 778, "foo_at_1": 1355, "foo_b": [263, 338], "foo_b_bar_2": 778, "foo_bar": [581, 587, 703, 788, 1351], "foo_bar2": [581, 587], "foo_bar_baz": 703, "foo_c_bar_3": 778, "foo_low": [718, 1360], "foo_mean": 1355, "foo_q25": 1354, "foo_q50": 1354, "foo_q75": 1354, "foo_std": 1354, "foo_strip": 707, "foo_strip_end": 708, "foo_strip_start": 709, "foo_sum": [1354, 1355], "foo_uniqu": 1355, "foo_upp": [721, 1360], "foo_var": 1354, "foobar": [710, 711, 1289, 1290, 1360], "foobarbar": [711, 1290], "foofoobar": [710, 1289], "foral": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "forc": [244, 248, 296, 324, 338, 568, 872, 873, 925, 942, 1190, 1318, 1337], "force_parallel": [244, 338, 872, 873, 942], "foreign": 189, "form": [37, 46, 123, 125, 126, 127, 129, 147, 148, 156, 241, 272, 306, 338, 467, 619, 695, 720, 828, 942, 1078, 1206, 1274, 1299, 1337, 1360], "format": [7, 11, 15, 16, 20, 36, 37, 40, 41, 42, 45, 46, 94, 136, 138, 139, 140, 143, 144, 146, 149, 152, 158, 195, 208, 216, 227, 241, 254, 263, 272, 273, 278, 292, 305, 336, 338, 342, 430, 462, 464, 467, 591, 592, 593, 712, 714, 715, 719, 773, 828, 855, 860, 861, 882, 895, 908, 942, 946, 951, 1075, 1078, 1291, 1293, 1294, 1298, 1336, 1360, 1361], "formul": [211, 338, 857, 858, 942], "formula": [40, 338, 480, 828, 1092, 1337], "fortran": [295, 296, 338], "forward": [219, 244, 281, 338, 382, 435, 454, 492, 498, 561, 662, 828, 863, 873, 897, 942, 986, 1042, 1065, 1106, 1175, 1241, 1337], "forward_fil": [308, 338, 390, 423, 426, 662, 828], "found": [20, 37, 40, 46, 95, 116, 119, 126, 130, 143, 150, 157, 213, 285, 338, 510, 660, 687, 692, 710, 711, 712, 715, 828, 901, 942, 1122, 1237, 1266, 1271, 1289, 1290, 1291, 1294, 1337, 1349, 1365], "four": [299, 338, 1365], "fourth": [526, 828, 1140, 1337], "frac": [483, 484, 485, 486, 668, 828, 1097, 1098, 1099, 1100, 1248, 1337], "fraction": [37, 46, 161, 162, 163, 164, 274, 338, 463, 556, 619, 659, 712, 715, 828, 942, 1074, 1170, 1206, 1235, 1291, 1294, 1337], "fragment": 1365, "frame": [37, 38, 40, 46, 51, 58, 59, 126, 139, 143, 149, 161, 162, 200, 201, 207, 241, 242, 246, 248, 255, 259, 262, 271, 272, 273, 285, 300, 306, 307, 338, 467, 807, 846, 847, 854, 883, 886, 901, 909, 942, 948, 1023, 1078, 1337, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1364, 1368], "frame_data": [1348, 1351], "frameinittyp": [338, 942], "frametyp": [51, 1365], "framework": [263, 305, 338, 908, 942], "freedom": [286, 309, 338, 564, 570, 651, 652, 655, 656, 673, 741, 761, 804, 805, 809, 817, 828, 902, 910, 942, 1230, 1232, 1252, 1327, 1337], "freeli": [807, 901, 942, 948], "freez": [40, 338], "freeze_pan": [40, 338], "frequenc": [308, 338, 740, 828, 1326, 1337], "frequent": [1236, 1238, 1337], "fri": [338, 341], "fridai": [229, 338, 435, 464, 754, 868, 942, 1042, 1075, 1078], "friendship": 12, "from": [2, 3, 4, 5, 6, 10, 16, 28, 32, 36, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 69, 82, 94, 98, 114, 118, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 165, 166, 167, 168, 169, 171, 172, 173, 177, 182, 197, 200, 207, 208, 209, 215, 217, 220, 221, 227, 229, 241, 242, 243, 244, 245, 246, 254, 263, 267, 270, 271, 273, 274, 276, 277, 285, 293, 300, 302, 303, 305, 306, 307, 308, 314, 338, 341, 342, 387, 396, 428, 429, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 482, 484, 487, 497, 499, 512, 526, 544, 556, 568, 577, 585, 610, 611, 613, 618, 619, 622, 625, 627, 638, 639, 641, 643, 645, 647, 649, 652, 654, 656, 659, 671, 683, 684, 689, 691, 692, 702, 707, 708, 709, 710, 711, 712, 713, 714, 715, 719, 738, 750, 751, 754, 755, 767, 768, 769, 770, 771, 772, 773, 787, 788, 803, 807, 814, 815, 816, 824, 827, 828, 846, 854, 855, 856, 864, 868, 872, 873, 874, 882, 889, 891, 893, 894, 901, 906, 908, 909, 914, 915, 942, 946, 947, 948, 991, 999, 1036, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1094, 1096, 1098, 1103, 1140, 1158, 1170, 1182, 1199, 1200, 1202, 1203, 1206, 1211, 1223, 1235, 1262, 1263, 1268, 1270, 1281, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1298, 1313, 1328, 1337, 1346, 1347, 1348, 1349, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367, 1368], "from_arrai": 807, "from_arrow": 124, "from_json": 828, "from_panda": 124, "from_repr": [294, 338, 1315, 1337], "fromkei": [52, 54], "front": [229, 338, 868, 942], "fruit": [291, 338, 410, 414, 635, 680, 706, 713, 828, 1012, 1017, 1259, 1285, 1292], "fruits_revers": [635, 828], "fsspec": [138, 139, 144, 146, 153, 154, 160], "fsspecfileio": 154, "full": [11, 26, 45, 49, 51, 66, 94, 126, 129, 138, 139, 140, 142, 147, 148, 150, 152, 153, 154, 156, 157, 158, 243, 307, 338, 689, 691, 698, 699, 712, 713, 714, 715, 719, 768, 769, 872, 878, 909, 942, 946, 948, 1268, 1270, 1277, 1278, 1291, 1292, 1293, 1294, 1298, 1337, 1353, 1368], "full_sent": 758, "fulli": [170, 262, 274, 296, 338], "funcnam": [40, 338], "function": [0, 31, 32, 33, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 58, 67, 69, 73, 90, 91, 121, 124, 128, 130, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 170, 171, 172, 173, 175, 177, 178, 179, 180, 181, 182, 188, 192, 194, 196, 199, 205, 208, 215, 222, 245, 248, 254, 262, 263, 267, 285, 295, 296, 297, 300, 301, 302, 305, 307, 324, 338, 341, 342, 350, 387, 407, 408, 427, 428, 430, 483, 485, 486, 508, 568, 576, 577, 602, 603, 618, 622, 625, 637, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 665, 668, 688, 733, 734, 735, 744, 748, 756, 760, 762, 763, 764, 776, 777, 779, 781, 782, 785, 787, 789, 790, 793, 795, 798, 800, 802, 809, 813, 817, 819, 824, 828, 840, 844, 850, 855, 874, 878, 882, 886, 889, 901, 905, 908, 909, 916, 925, 942, 946, 950, 991, 1010, 1019, 1035, 1036, 1096, 1097, 1099, 1100, 1120, 1182, 1190, 1211, 1222, 1223, 1226, 1228, 1229, 1236, 1238, 1243, 1245, 1248, 1267, 1316, 1319, 1321, 1322, 1337, 1342, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1363, 1364, 1365, 1366, 1367, 1368], "function_nam": 135, "further": 824, "futur": [58, 196, 207, 243, 244, 279, 338, 850, 854, 872, 873, 896, 942], "g": [33, 37, 46, 134, 138, 142, 144, 146, 153, 158, 170, 196, 208, 240, 296, 306, 338, 347, 430, 484, 487, 577, 663, 775, 828, 855, 889, 942, 946, 1098, 1337, 1368], "g1": [493, 742, 828], "g2": [493, 742, 828], "g_1": [668, 828, 1248, 1337], "gag": 26, "gamma": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "gantt": [887, 942], "gather": [139, 223, 338, 363, 501, 544, 752, 828, 866, 942, 967, 1112, 1158, 1337], "gather_everi": [338, 828, 942, 1337], "gb": [215, 338, 396, 1096, 1337], "gbp": 1368, "gc": [39, 142, 153, 154, 338], "gca": 26, "gcaacgcatata": 26, "gcp": [34, 37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 154, 155, 156, 157, 182, 338, 942], "gdp": [244, 338, 873, 942], "gdp2": [244, 338, 873, 942], "gdp_date": [244, 338, 873, 942], "ge": [828, 1337], "gener": [1, 133, 134, 140, 141, 159, 165, 166, 167, 168, 169, 170, 172, 196, 203, 205, 263, 274, 293, 296, 302, 338, 556, 659, 664, 749, 768, 771, 783, 784, 786, 787, 803, 815, 816, 828, 942, 1011, 1170, 1235, 1244, 1313, 1337, 1368], "geq": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "germani": [244, 338, 873, 942], "get": [51, 58, 69, 135, 145, 151, 158, 188, 197, 199, 203, 204, 213, 221, 224, 226, 229, 231, 232, 236, 238, 239, 247, 250, 257, 258, 263, 270, 271, 275, 280, 283, 289, 297, 301, 311, 321, 332, 338, 348, 361, 362, 363, 365, 373, 376, 388, 396, 408, 411, 423, 424, 425, 426, 435, 445, 494, 500, 507, 510, 525, 527, 530, 542, 548, 569, 578, 579, 580, 588, 590, 596, 610, 611, 620, 621, 626, 637, 638, 669, 673, 682, 729, 730, 734, 735, 737, 741, 752, 754, 776, 781, 785, 790, 791, 792, 793, 795, 796, 797, 799, 809, 813, 817, 828, 844, 849, 850, 852, 859, 865, 868, 869, 875, 877, 891, 892, 899, 904, 905, 911, 922, 933, 942, 947, 952, 965, 966, 967, 968, 969, 977, 980, 992, 999, 1013, 1022, 1031, 1032, 1033, 1034, 1042, 1052, 1091, 1108, 1109, 1114, 1119, 1122, 1125, 1126, 1138, 1141, 1144, 1156, 1162, 1183, 1191, 1193, 1194, 1196, 1198, 1199, 1200, 1207, 1208, 1212, 1222, 1249, 1252, 1261, 1309, 1313, 1319, 1323, 1327, 1337], "get_chunk": 1337, "get_column": [196, 298, 338], "get_column_index": 338, "get_polars_schema": 190, "get_table_info": 190, "get_token": 33, "get_worksheet_by_nam": [40, 338], "gevent": [58, 160, 850, 942], "gh": 699, "gh45": 699, "gh45ij67kl": 699, "ghi": [347, 684, 828, 948, 1263], "gil": [577, 828, 946], "git": 56, "github": [141, 338], "give": [148, 155, 156, 244, 254, 303, 305, 338, 445, 497, 526, 631, 736, 740, 828, 840, 873, 882, 906, 908, 942, 1052, 1140, 1326, 1337, 1364], "given": [40, 51, 100, 105, 122, 123, 125, 126, 127, 129, 134, 138, 139, 140, 141, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 163, 164, 165, 166, 168, 170, 171, 172, 173, 194, 215, 216, 218, 229, 239, 248, 255, 261, 262, 271, 272, 273, 281, 284, 300, 307, 338, 370, 382, 387, 396, 408, 417, 436, 440, 464, 466, 467, 480, 484, 508, 514, 536, 561, 568, 571, 577, 618, 622, 628, 631, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 660, 662, 684, 685, 696, 697, 712, 715, 722, 725, 735, 775, 776, 785, 789, 790, 803, 804, 805, 828, 861, 868, 878, 883, 886, 897, 900, 909, 925, 942, 947, 948, 950, 974, 986, 991, 999, 1024, 1043, 1047, 1075, 1077, 1078, 1092, 1096, 1098, 1120, 1125, 1139, 1150, 1175, 1182, 1185, 1188, 1190, 1203, 1209, 1213, 1219, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1237, 1241, 1263, 1264, 1275, 1276, 1291, 1294, 1301, 1325, 1328, 1337, 1346, 1348, 1353, 1355, 1356, 1359, 1360, 1365, 1367, 1368], "glimps": [207, 231, 338], "glob": [138, 139, 143, 150, 152, 155, 156, 157], "global": [50, 90, 91, 143, 159, 168, 176, 285, 338, 632, 633, 807, 828, 901, 942, 1014, 1018, 1217, 1218, 1337, 1347, 1349, 1364], "gmt": [440, 444, 461, 1047, 1051, 1072], "go": [12, 138, 139, 152, 410, 680, 1012, 1259], "godfath": 1346, "goe": 12, "gonfruit": 1292, "good": [45, 47, 49, 241, 338, 942, 1359], "goodby": 1, "googl": [34, 142, 153, 154], "gpu": [295, 338, 849, 917, 939, 942, 1316, 1337], "gpu_devic": [295, 338], "gpudevic": [295, 338], "gpuengin": [849, 942], "grade": [1140, 1337], "grain": [849, 939, 942], "granular": 1365, "grape": 1360, "graph": [57, 140, 246, 338, 592, 849, 870, 914, 942], "graphviz": [246, 338, 592, 898, 942], "great": [338, 342], "great_tabl": [338, 342], "greater": [201, 244, 338, 502, 504, 514, 668, 696, 697, 705, 722, 828, 873, 942, 1125, 1248, 1275, 1276, 1284, 1301, 1337], "greatest": [1354, 1358], "greatli": [144, 155], "green": [50, 90, 91, 324, 740, 828, 925, 1326, 1337], "greenlet": [58, 850, 942], "greet": 1, "grid": [512, 828], "grid_point": [512, 828], "gridlin": [40, 338], "gross": 1346, "group": [9, 27, 45, 49, 135, 139, 157, 200, 228, 229, 242, 244, 259, 261, 263, 270, 273, 306, 308, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 348, 408, 427, 489, 495, 500, 503, 540, 576, 577, 588, 590, 618, 628, 637, 638, 670, 671, 675, 683, 684, 685, 687, 698, 699, 735, 740, 790, 828, 846, 867, 868, 873, 891, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 948, 1035, 1154, 1222, 1254, 1262, 1263, 1264, 1266, 1277, 1278, 1326, 1337, 1346, 1354, 1364, 1365], "group_bi": [229, 259, 263, 270, 308, 337, 338, 348, 398, 403, 406, 408, 493, 495, 500, 503, 576, 577, 618, 670, 671, 735, 742, 768, 771, 790, 828, 849, 850, 860, 868, 887, 891, 898, 940, 942, 948], "group_by_dynam": [270, 338, 891, 942], "group_by_partit": [887, 942], "group_col": [493, 742, 828], "group_df": [324, 925], "group_dtyp": [618, 828], "group_index": [683, 1262], "group_to_row": [618, 828], "groupbi": [228, 338, 577, 790, 828], "grouper": [398, 403, 406, 828], "grow": [310, 338], "grown": [233, 338], "gt": [338, 342, 828, 1337], "gte": [493, 742, 828], "guarante": [45, 49, 138, 139, 199, 207, 230, 255, 301, 303, 338, 407, 408, 506, 733, 734, 735, 828, 844, 854, 883, 905, 906, 942, 1010, 1118, 1320, 1322, 1337], "guid": [133, 135, 828, 946, 1368], "gzip": [45, 49, 338, 942], "h": [306, 338, 347, 464, 467, 663, 698, 699, 712, 715, 719, 828, 1277, 1278, 1291, 1294, 1298, 1360, 1361], "ha": [39, 40, 51, 58, 128, 140, 152, 175, 196, 308, 314, 319, 338, 407, 408, 427, 499, 576, 589, 595, 689, 713, 723, 734, 735, 759, 776, 785, 824, 828, 850, 915, 920, 925, 942, 1010, 1023, 1035, 1037, 1268, 1292, 1322, 1337], "half": [300, 338, 462, 483, 484, 485, 486, 828, 1073, 1097, 1098, 1099, 1100, 1337], "half_lif": [483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337], "ham": [35, 37, 39, 41, 42, 45, 200, 203, 204, 205, 209, 210, 211, 212, 213, 214, 220, 225, 230, 231, 233, 243, 247, 249, 251, 253, 256, 260, 265, 267, 268, 271, 274, 275, 276, 283, 286, 287, 289, 293, 294, 296, 297, 298, 303, 309, 310, 338, 411, 592, 593, 824, 846, 851, 852, 856, 857, 858, 859, 864, 872, 885, 889, 892, 893, 906, 914, 942, 1013, 1353, 1354], "ham_a": [293, 338], "ham_b": [293, 338], "ham_right": [243, 338, 872, 942], "hamburg": 824, "hand": [40, 138, 139, 152, 338, 557, 558, 559, 560, 1171, 1172, 1173, 1174], "handi": [435, 754, 1042], "handl": [39, 57, 58, 97, 130, 135, 138, 139, 152, 158, 220, 224, 338, 431, 538, 682, 722, 828, 849, 850, 864, 942, 1038, 1152, 1261, 1301, 1337], "handler": [136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 338, 430, 828, 855, 942], "happen": [140, 440, 625, 828, 1047, 1211, 1337], "hard": [152, 244, 338, 873, 878, 942], "harder": [229, 338, 868, 942], "hardwar": 1368, "has_head": [138, 139, 143, 149, 152], "has_nul": [828, 1117, 1337], "has_prefix": [414, 706], "has_suffix": [410, 680], "has_two": 1355, "has_valid": 1337, "hash": [230, 338, 828, 1337], "hash_row": 338, "hat": [698, 699, 1277, 1278], "have": [5, 14, 30, 33, 40, 50, 51, 59, 66, 91, 124, 135, 136, 138, 139, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 197, 208, 217, 241, 243, 244, 263, 266, 270, 272, 273, 292, 300, 315, 338, 427, 430, 483, 485, 486, 577, 589, 628, 632, 633, 638, 685, 700, 756, 828, 855, 872, 873, 882, 891, 915, 916, 942, 948, 1035, 1037, 1097, 1099, 1100, 1103, 1213, 1217, 1218, 1277, 1279, 1337, 1364, 1366, 1368], "haystack": [684, 1263], "he": 708, "head": [69, 152, 227, 247, 289, 338, 353, 530, 828, 877, 942, 1144, 1309, 1337], "header": [37, 40, 45, 46, 49, 130, 138, 139, 143, 149, 152, 213, 302, 338, 942], "header_format": [40, 338], "header_nam": [302, 338], "headerless": 152, "heap": [135, 215, 338, 828, 1096, 1337], "heatmap": [40, 338], "heavili": 157, "height": [40, 134, 168, 212, 338, 341, 1337, 1342], "hell": [707, 1286], "hello": [1, 20, 707, 708, 709, 948, 1161, 1286, 1287, 1288, 1348, 1351], "hello_": 778, "hello_data": 1351, "hello_world": 1351, "help": [40, 161, 162, 163, 164, 338, 942], "helper": [338, 342, 824], "henc": [698, 1278], "here": [37, 39, 40, 41, 45, 46, 47, 48, 49, 123, 125, 126, 127, 129, 140, 141, 142, 147, 148, 150, 152, 153, 154, 155, 156, 157, 166, 168, 172, 182, 197, 263, 338, 435, 576, 577, 592, 685, 692, 754, 828, 898, 942, 948, 1042, 1271], "hex": [392, 393, 678, 679, 717, 995, 996, 1257, 1258, 1296], "hexadecim": [995, 996], "hf": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 338, 942], "hf_token": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 338, 942], "hi": [1, 1360], "hidden": [40, 338], "hidden_column": [40, 338], "hide": [21, 22, 23, 24], "hide_gridlin": [40, 338], "hide_password": 140, "high": [273, 338, 342, 625, 828, 840, 1211, 1337], "higher": [45, 49, 207, 265, 330, 338, 626, 648, 649, 801, 828, 854, 888, 931, 942, 1037, 1212, 1228, 1337], "highest": [338, 342, 628, 739, 759, 828, 942, 1213, 1337], "highli": [135, 828], "hint": 133, "hippopotamu": [696, 697, 1275, 1276], "hist": [828, 1337, 1342], "histogram": [1337, 1342], "hit": [845, 942], "hive": [150, 155, 157], "hive_custom": 185, "hive_partit": [150, 155, 157], "hive_schema": [150, 155, 157], "hive_serd": 185, "hmm": 948, "hold": [282, 296, 338, 1318, 1337], "holidai": [435, 754, 1042], "home": [720, 1299], "horizont": [20, 59, 99, 222, 233, 250, 252, 257, 288, 306, 338, 745, 747, 756, 757, 758, 763, 764, 766, 774, 777, 792, 794, 797, 802, 812, 914, 942], "host": [56, 138, 144, 146, 157], "hour": [148, 152, 155, 156, 229, 244, 270, 308, 338, 449, 451, 452, 456, 457, 460, 462, 463, 467, 469, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 770, 771, 772, 773, 787, 814, 815, 816, 828, 868, 873, 891, 942, 948, 1068, 1071, 1073, 1080, 1086, 1098, 1337, 1361], "hours_diff": 469, "hous": [300, 338], "how": [11, 37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 59, 99, 135, 141, 148, 150, 152, 155, 156, 157, 182, 212, 220, 243, 244, 263, 306, 307, 338, 371, 431, 460, 461, 512, 537, 538, 618, 631, 650, 712, 715, 754, 770, 818, 828, 864, 872, 873, 909, 914, 942, 975, 1038, 1071, 1072, 1151, 1152, 1229, 1291, 1294, 1337], "howev": [1, 126, 140, 150, 157, 192, 215, 248, 296, 338, 618, 828, 849, 942, 1096, 1337], "hstack": [99, 338], "html": [32, 40, 41, 42, 124, 140, 144, 146, 194, 195, 196, 205, 338, 950, 951], "http": [20, 32, 40, 41, 42, 69, 124, 140, 141, 144, 146, 194, 195, 196, 205, 338, 592, 683, 685, 695, 898, 942, 950, 951, 1262, 1264, 1274], "httpmethod": 69, "hug": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 338, 942], "hut": [698, 699, 1277, 1278], "hvplot": [338, 341, 1337, 1342], "hyperbol": [356, 358, 360, 419, 667, 732, 828, 960, 962, 964, 1027, 1247, 1311, 1337], "hyperloglog": [198, 338, 354, 748, 828, 843, 942, 958, 1337], "hyphen": [674, 1253], "hypothesi": [166, 168, 171, 172, 1368], "i": [1, 12, 14, 17, 31, 32, 33, 34, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 56, 57, 58, 59, 60, 65, 66, 67, 68, 69, 73, 83, 91, 95, 97, 98, 99, 100, 101, 102, 104, 105, 110, 116, 119, 121, 122, 123, 124, 125, 126, 127, 128, 129, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 176, 177, 178, 179, 180, 181, 182, 186, 188, 192, 197, 198, 199, 200, 202, 203, 207, 208, 211, 212, 214, 215, 217, 220, 224, 228, 229, 230, 231, 234, 235, 239, 241, 242, 243, 244, 245, 246, 247, 248, 254, 255, 259, 261, 262, 263, 267, 268, 270, 271, 272, 273, 274, 277, 278, 279, 281, 283, 284, 285, 286, 289, 290, 295, 296, 297, 300, 301, 302, 303, 305, 307, 308, 309, 313, 315, 316, 324, 338, 341, 342, 347, 350, 352, 353, 354, 364, 367, 374, 375, 382, 387, 395, 407, 408, 409, 412, 413, 427, 428, 430, 433, 434, 435, 436, 439, 447, 454, 455, 457, 462, 464, 467, 475, 483, 484, 485, 486, 489, 493, 497, 506, 508, 511, 514, 526, 532, 539, 540, 543, 545, 547, 556, 561, 562, 564, 568, 570, 573, 576, 577, 581, 583, 584, 585, 587, 588, 589, 591, 600, 618, 623, 625, 628, 630, 631, 632, 633, 634, 637, 638, 639, 641, 643, 645, 647, 649, 650, 651, 652, 654, 655, 656, 659, 660, 661, 662, 664, 665, 668, 669, 670, 671, 673, 674, 675, 676, 677, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 696, 697, 698, 699, 700, 702, 705, 707, 708, 709, 712, 713, 714, 715, 717, 719, 720, 722, 727, 734, 735, 740, 741, 744, 745, 746, 747, 748, 753, 754, 756, 757, 758, 760, 761, 762, 763, 764, 768, 769, 771, 772, 777, 781, 782, 783, 784, 786, 787, 788, 790, 793, 795, 798, 800, 803, 804, 805, 806, 807, 809, 813, 815, 816, 817, 818, 819, 824, 828, 843, 844, 845, 848, 849, 850, 852, 854, 855, 857, 858, 859, 860, 864, 867, 868, 871, 872, 873, 874, 876, 878, 882, 883, 887, 889, 891, 892, 894, 895, 896, 897, 898, 899, 900, 901, 902, 905, 906, 908, 909, 910, 911, 913, 916, 917, 925, 935, 942, 946, 948, 955, 956, 957, 958, 971, 978, 979, 986, 991, 998, 1010, 1014, 1015, 1016, 1019, 1024, 1025, 1035, 1036, 1037, 1040, 1041, 1042, 1043, 1046, 1054, 1068, 1073, 1075, 1078, 1086, 1095, 1096, 1097, 1098, 1099, 1100, 1102, 1103, 1107, 1108, 1118, 1119, 1120, 1122, 1125, 1127, 1137, 1139, 1140, 1141, 1144, 1146, 1153, 1154, 1157, 1159, 1161, 1170, 1175, 1176, 1182, 1190, 1209, 1211, 1213, 1215, 1217, 1218, 1219, 1222, 1223, 1226, 1228, 1229, 1230, 1232, 1235, 1236, 1237, 1238, 1239, 1241, 1244, 1245, 1248, 1249, 1252, 1253, 1254, 1255, 1256, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1277, 1278, 1279, 1281, 1284, 1286, 1287, 1288, 1291, 1292, 1293, 1294, 1296, 1298, 1299, 1301, 1309, 1312, 1316, 1318, 1319, 1321, 1322, 1326, 1327, 1337, 1342, 1346, 1347, 1352, 1356, 1357, 1360, 1363, 1365, 1366, 1368], "i0e0": 1368, "i16": [1, 54, 443, 458, 477, 663, 828, 948, 1069, 1315, 1337, 1368], "i32": [1, 54, 123, 126, 130, 165, 167, 168, 276, 285, 338, 373, 374, 376, 395, 409, 438, 446, 448, 449, 450, 451, 452, 456, 479, 663, 754, 818, 828, 893, 942, 947, 977, 978, 980, 998, 1045, 1055, 1059, 1060, 1061, 1067, 1090, 1188, 1337, 1357, 1361, 1368], "i64": [1, 10, 13, 16, 17, 21, 27, 52, 53, 54, 55, 59, 60, 78, 98, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 140, 147, 148, 152, 197, 199, 200, 201, 202, 204, 208, 209, 212, 213, 216, 217, 219, 220, 223, 224, 226, 227, 228, 229, 231, 233, 234, 236, 238, 240, 243, 244, 245, 247, 248, 249, 255, 256, 261, 262, 263, 264, 267, 268, 269, 270, 274, 276, 278, 281, 283, 284, 285, 287, 289, 291, 298, 301, 302, 303, 304, 305, 306, 307, 308, 310, 312, 314, 315, 316, 317, 318, 320, 321, 322, 324, 325, 328, 331, 332, 338, 347, 349, 353, 363, 368, 369, 371, 372, 377, 379, 380, 381, 382, 383, 385, 388, 390, 398, 403, 406, 407, 408, 417, 423, 424, 425, 426, 427, 428, 431, 432, 445, 460, 466, 468, 469, 470, 471, 472, 473, 474, 484, 487, 489, 490, 492, 493, 494, 495, 497, 498, 500, 501, 503, 507, 509, 511, 512, 513, 514, 517, 518, 520, 521, 522, 523, 524, 527, 530, 533, 534, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 568, 569, 570, 574, 576, 577, 597, 598, 599, 601, 602, 604, 606, 608, 609, 614, 618, 619, 622, 623, 624, 625, 628, 629, 630, 632, 633, 634, 635, 636, 637, 638, 659, 661, 662, 663, 664, 669, 670, 671, 689, 698, 699, 713, 717, 722, 723, 725, 726, 727, 728, 729, 730, 734, 735, 736, 737, 739, 742, 749, 752, 755, 756, 757, 758, 763, 764, 765, 766, 767, 770, 773, 774, 775, 776, 777, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 794, 796, 797, 799, 802, 806, 807, 808, 811, 812, 813, 814, 818, 824, 828, 844, 846, 847, 849, 850, 855, 856, 858, 861, 863, 864, 865, 866, 867, 868, 869, 872, 873, 874, 875, 877, 878, 879, 883, 884, 886, 887, 889, 890, 891, 893, 895, 897, 899, 900, 901, 903, 904, 905, 906, 907, 908, 909, 912, 915, 916, 918, 919, 921, 922, 923, 925, 926, 929, 932, 933, 942, 948, 952, 953, 954, 957, 976, 981, 983, 985, 986, 987, 989, 992, 1010, 1024, 1025, 1031, 1032, 1033, 1034, 1035, 1036, 1052, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1102, 1103, 1104, 1106, 1107, 1111, 1112, 1114, 1119, 1121, 1130, 1144, 1152, 1153, 1155, 1156, 1157, 1158, 1159, 1160, 1162, 1164, 1167, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1179, 1180, 1182, 1183, 1190, 1195, 1203, 1209, 1211, 1214, 1215, 1216, 1217, 1218, 1219, 1221, 1224, 1227, 1231, 1235, 1236, 1238, 1241, 1242, 1244, 1249, 1250, 1296, 1302, 1307, 1309, 1314, 1322, 1323, 1328, 1337, 1346, 1347, 1349, 1353, 1354, 1355, 1356, 1357, 1359, 1362, 1363, 1365, 1366, 1368], "i8": [386, 387, 443, 446, 449, 451, 452, 453, 456, 458, 459, 463, 476, 477, 567, 663, 800, 803, 819, 828, 990, 991, 1038, 1050, 1053, 1063, 1064, 1070, 1074, 1087, 1088, 1181, 1220, 1242, 1325, 1337, 1361], "i_bitand_j": 1356, "i_bitand_op_j": 1356, "i_bitcount": 1356, "i_bitor_j": 1356, "i_bitor_op_j": 1356, "i_bitxor_j": 1356, "i_bitxor_op_j": 1356, "iceberg": [154, 840], "icon": [40, 338], "id": [26, 33, 40, 59, 134, 138, 143, 154, 245, 295, 302, 315, 324, 338, 637, 698, 699, 738, 828, 874, 916, 925, 942, 948, 1222, 1324, 1337, 1365, 1366, 1368], "id_char": 1368, "id_var": [254, 305, 338, 882, 908, 942], "ideal": [132, 133], "ident": [33, 130, 201, 202, 338, 464, 636, 637, 828, 847, 848, 942, 1023, 1025, 1075, 1221, 1222, 1337], "identif": [143, 149], "identifi": [130, 140, 254, 261, 303, 305, 316, 338, 882, 906, 908, 942], "idiograph": 948, "idiomat": [824, 852, 859, 892, 911, 925, 942], "idx": [152, 229, 242, 315, 338, 374, 387, 568, 868, 916, 942, 991, 1182, 1266], "idx_lit": 1266, "idx_rx": 1266, "ieee": [736, 828], "if_set": [5, 30], "if_table_exist": [38, 338], "ifnul": 1358, "ignor": [39, 140, 167, 168, 172, 252, 288, 307, 338, 350, 352, 375, 395, 431, 461, 483, 485, 486, 538, 547, 610, 611, 674, 690, 744, 746, 758, 794, 812, 828, 909, 942, 948, 955, 956, 979, 998, 1038, 1072, 1097, 1099, 1100, 1152, 1161, 1199, 1200, 1253, 1269, 1337], "ignore_error": [138, 139, 148, 152, 156], "ignore_nul": [252, 288, 338, 350, 352, 375, 483, 485, 486, 547, 674, 690, 744, 746, 758, 794, 812, 828, 955, 956, 979, 1097, 1099, 1100, 1161, 1253, 1269, 1337], "ignore_spac": 948, "ij": 699, "ij67": 699, "ijkl": 1360, "ilmsuxu": [675, 683, 684, 687, 698, 699, 1254, 1262, 1263, 1266, 1277, 1278], "imbal": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "imdb_scor": 1346, "immedi": [192, 628, 749, 753, 768, 769, 771, 772, 783, 784, 787, 800, 803, 806, 810, 815, 816, 819, 828, 1213, 1337, 1347], "immut": [296, 338, 1318, 1337], "impact": [229, 338, 868, 942, 1346, 1365], "impl": 154, "implement": [45, 124, 140, 196, 230, 248, 324, 338, 341, 342, 506, 577, 601, 602, 604, 606, 608, 609, 723, 733, 790, 828, 925, 1118, 1190, 1236, 1238, 1320, 1337, 1342], "implic": [430, 828, 855, 942], "implicit": [307, 338, 909, 942], "implicitli": [220, 338, 493, 818, 828, 864, 942, 1365], "implod": [828, 1337, 1355], "import": [10, 16, 28, 35, 37, 39, 40, 41, 42, 45, 51, 66, 69, 123, 124, 127, 128, 134, 138, 140, 141, 147, 148, 152, 158, 161, 162, 163, 164, 165, 166, 167, 168, 171, 172, 173, 174, 200, 207, 208, 209, 212, 227, 229, 242, 244, 261, 263, 278, 285, 293, 295, 300, 305, 306, 308, 338, 341, 342, 396, 429, 430, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 584, 585, 591, 618, 639, 641, 643, 645, 647, 649, 652, 654, 656, 754, 767, 768, 769, 770, 771, 772, 773, 787, 807, 815, 816, 824, 828, 840, 846, 850, 854, 855, 856, 858, 868, 873, 878, 895, 908, 942, 946, 999, 1026, 1028, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1098, 1128, 1131, 1133, 1134, 1223, 1246, 1310, 1337, 1342, 1347, 1362, 1365, 1368], "improv": [38, 49, 144, 155, 243, 338, 576, 828, 872, 942], "in_plac": [233, 282, 310, 338, 1214, 1243, 1250, 1337], "includ": [7, 20, 30, 37, 39, 40, 46, 56, 128, 140, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 168, 169, 192, 203, 207, 215, 220, 245, 261, 263, 273, 284, 300, 302, 306, 307, 338, 428, 463, 493, 497, 508, 514, 584, 625, 640, 642, 644, 646, 648, 650, 651, 653, 655, 698, 699, 703, 704, 707, 708, 754, 763, 804, 805, 828, 854, 864, 874, 900, 909, 942, 948, 1036, 1037, 1074, 1096, 1107, 1120, 1125, 1211, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1277, 1278, 1282, 1283, 1286, 1337, 1365], "include_bom": [37, 46, 338, 942], "include_boundari": [229, 338, 868, 942], "include_break": [428, 625, 828, 1036, 1211, 1337], "include_breakpoint": [508, 828, 1120, 1337], "include_categor": 948, "include_categori": [508, 828, 1120, 1337], "include_col": 168, "include_file_path": [143, 148, 149, 150, 152, 155, 156, 157], "include_head": [37, 40, 46, 139, 302, 338, 942], "include_index": 128, "include_init": 763, "include_kei": [261, 273, 338], "include_nul": [307, 338, 909, 942], "inclus": [197, 229, 270, 338, 467, 514, 638, 641, 643, 645, 647, 649, 652, 654, 656, 703, 704, 749, 768, 769, 771, 772, 783, 784, 787, 815, 816, 828, 868, 891, 942, 1078, 1125, 1282, 1283, 1337], "incom": 140, "incompat": 117, "incomplet": [633, 828, 1218, 1337], "incorpor": 1365, "incorrect": [279, 338, 478, 576, 577, 661, 828, 896, 925, 942, 1089, 1239, 1337], "incorrectli": [138, 568], "increas": [40, 51, 138, 143, 149, 150, 157, 338, 427, 637, 828, 1035, 1222, 1337], "independ": [57, 58, 165, 168, 172, 300, 338, 664, 828, 849, 850, 860, 887, 898, 942], "index": [40, 105, 124, 128, 131, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 160, 196, 223, 225, 229, 234, 239, 241, 263, 268, 270, 271, 272, 281, 283, 295, 296, 298, 305, 307, 308, 314, 315, 338, 348, 361, 362, 363, 365, 368, 369, 374, 382, 387, 484, 500, 501, 503, 510, 533, 534, 543, 544, 545, 561, 562, 568, 638, 641, 643, 645, 647, 649, 652, 654, 656, 660, 662, 669, 675, 683, 687, 689, 702, 713, 723, 752, 783, 786, 828, 866, 868, 891, 897, 899, 908, 909, 915, 916, 942, 948, 965, 966, 967, 968, 969, 972, 973, 978, 986, 991, 1098, 1111, 1112, 1122, 1139, 1147, 1148, 1157, 1158, 1159, 1175, 1176, 1182, 1203, 1236, 1237, 1241, 1249, 1262, 1266, 1268, 1281, 1292, 1337, 1342, 1355, 1360], "index_column": [229, 270, 338, 638, 828, 868, 891, 942], "index_of": [828, 1337], "indexord": [295, 296, 338], "indic": [37, 40, 41, 45, 46, 47, 48, 49, 65, 66, 68, 83, 98, 108, 135, 136, 138, 139, 140, 143, 144, 146, 148, 149, 150, 152, 155, 156, 157, 165, 166, 172, 182, 229, 270, 273, 281, 293, 338, 364, 382, 500, 508, 515, 516, 517, 519, 520, 521, 522, 523, 524, 543, 561, 581, 582, 583, 584, 585, 586, 587, 618, 638, 641, 643, 645, 647, 649, 652, 654, 656, 660, 662, 752, 753, 799, 828, 868, 891, 897, 942, 948, 986, 1019, 1111, 1120, 1128, 1129, 1131, 1132, 1133, 1134, 1135, 1136, 1157, 1175, 1236, 1237, 1241, 1313, 1337, 1368], "indistinguish": [37, 46, 338, 942], "individu": [40, 49, 133, 192, 270, 295, 296, 300, 338, 577, 684, 726, 828, 849, 891, 942, 948, 1022, 1263, 1337], "inequ": [612, 828], "inexact": [161, 162, 163, 164], "inf": [165, 168, 172, 360, 428, 516, 519, 625, 736, 828, 964, 1028, 1036, 1128, 1131, 1188, 1206, 1211, 1325, 1337, 1362], "infer": [37, 41, 45, 46, 47, 48, 49, 67, 82, 98, 123, 125, 126, 127, 128, 129, 138, 139, 140, 143, 147, 148, 149, 150, 152, 155, 156, 157, 182, 248, 338, 576, 577, 634, 691, 712, 714, 715, 716, 719, 773, 788, 803, 828, 942, 1190, 1219, 1270, 1291, 1293, 1294, 1295, 1298, 1337], "infer_schema": [138, 152], "infer_schema_length": [126, 129, 134, 138, 139, 140, 143, 147, 148, 149, 152, 156, 338, 691, 942, 1270], "inference_length": [716, 1295], "inference_s": [248, 338], "infin": [720, 736, 828, 1299], "infinit": [519, 736, 828, 1131, 1337], "influenc": [143, 878, 942], "influxdb": 140, "info": [142, 153, 154, 160], "inform": [19, 23, 37, 38, 41, 45, 46, 47, 48, 49, 56, 133, 135, 142, 148, 150, 152, 153, 154, 155, 156, 157, 161, 163, 182, 183, 184, 186, 187, 194, 205, 207, 338, 342, 526, 577, 668, 675, 683, 684, 687, 698, 699, 828, 849, 854, 887, 942, 946, 950, 1018, 1140, 1248, 1254, 1262, 1263, 1266, 1277, 1278, 1337], "inherit": [271, 338, 430, 828, 855, 942], "init": [192, 1346], "initcap": 1358, "initi": [32, 33, 34, 40, 82, 133, 177, 192, 338, 763, 777, 818, 1365], "initialis": [69, 140, 192, 942], "inject": [40, 51, 338], "inlin": [24, 273, 338, 675, 683, 684, 687, 698, 699, 1254, 1262, 1263, 1266, 1277, 1278, 1355], "inner": [60, 78, 167, 243, 245, 307, 338, 375, 386, 432, 547, 567, 577, 631, 733, 807, 828, 872, 874, 909, 942, 979, 990, 1039, 1161, 1181, 1190, 1320, 1337, 1353, 1365], "inner_dtyp": [167, 170], "innermost": [167, 170], "innter": 978, "inprocessqueri": [849, 942], "input": [0, 51, 57, 98, 126, 128, 135, 138, 139, 199, 209, 228, 245, 248, 252, 261, 263, 267, 276, 277, 281, 284, 288, 301, 312, 313, 317, 338, 347, 408, 410, 414, 417, 484, 487, 499, 514, 572, 576, 577, 589, 618, 632, 633, 665, 671, 689, 700, 702, 708, 709, 710, 711, 713, 715, 727, 735, 743, 745, 747, 749, 752, 755, 756, 757, 758, 766, 773, 775, 783, 784, 788, 789, 790, 792, 794, 797, 806, 810, 812, 818, 824, 828, 840, 844, 856, 867, 874, 889, 893, 894, 897, 900, 905, 912, 913, 918, 942, 1024, 1098, 1125, 1186, 1187, 1190, 1209, 1217, 1218, 1241, 1245, 1268, 1281, 1292, 1294, 1337, 1359, 1360, 1362], "input_wildcard_expans": [135, 828], "insensit": [676, 684, 686, 688, 698, 699, 700, 948, 1254, 1255, 1263, 1265, 1266, 1267, 1277, 1278, 1279], "insensitive_match": [675, 687], "insert": [38, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 234, 302, 304, 338, 660, 674, 690, 722, 828, 907, 942, 1237, 1253, 1269, 1301, 1337], "insert_aft": [40, 338], "insert_befor": [40, 338], "insert_chart": [40, 338], "insert_column": 338, "insid": [58, 576, 828, 850, 942], "inspect": [828, 942], "instal": [32, 33, 34, 102, 128, 138, 139, 141, 144, 146, 205, 297, 338, 435, 592, 754, 898, 942, 1042, 1319, 1337], "instanc": [37, 41, 45, 46, 47, 48, 49, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 155, 156, 157, 168, 172, 182, 217, 222, 338, 589, 763, 777, 824, 840, 846, 878, 915, 916, 942, 1103, 1337], "instanti": [33, 38, 40, 140, 170, 276, 294, 295, 312, 338, 893, 912, 942, 947, 1315, 1316, 1337], "instantli": [58, 850, 942], "instead": [37, 39, 43, 44, 51, 58, 60, 125, 126, 129, 138, 139, 140, 143, 149, 150, 152, 157, 158, 165, 166, 167, 168, 172, 198, 199, 227, 240, 241, 244, 248, 254, 259, 261, 271, 272, 273, 276, 277, 278, 281, 295, 296, 297, 301, 313, 314, 338, 341, 342, 363, 382, 408, 409, 412, 413, 428, 442, 467, 484, 487, 497, 561, 591, 625, 632, 662, 674, 682, 693, 694, 707, 708, 709, 710, 711, 722, 735, 742, 749, 751, 753, 760, 768, 769, 771, 772, 773, 783, 784, 787, 800, 803, 806, 807, 810, 815, 816, 819, 828, 843, 844, 850, 860, 873, 882, 893, 894, 895, 897, 905, 913, 914, 915, 917, 942, 948, 967, 986, 995, 1011, 1015, 1016, 1036, 1049, 1057, 1058, 1078, 1098, 1117, 1175, 1211, 1217, 1236, 1238, 1241, 1250, 1253, 1261, 1272, 1273, 1286, 1287, 1288, 1301, 1318, 1319, 1337, 1342, 1346, 1347, 1351, 1365, 1366], "int": [10, 12, 13, 14, 17, 25, 26, 37, 38, 40, 41, 45, 46, 47, 48, 49, 53, 60, 67, 126, 129, 132, 133, 134, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 182, 184, 199, 201, 207, 215, 218, 219, 223, 225, 227, 230, 231, 232, 234, 239, 241, 242, 244, 247, 248, 258, 259, 268, 270, 271, 274, 280, 281, 283, 286, 289, 294, 298, 301, 306, 309, 311, 314, 315, 321, 332, 338, 347, 370, 374, 382, 384, 387, 389, 390, 407, 408, 427, 431, 435, 460, 483, 485, 486, 490, 491, 492, 498, 500, 501, 503, 506, 507, 508, 530, 536, 538, 543, 544, 545, 546, 556, 561, 562, 564, 566, 567, 568, 570, 617, 619, 622, 623, 625, 628, 631, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 669, 673, 683, 689, 691, 696, 697, 698, 702, 704, 705, 713, 716, 717, 722, 730, 734, 735, 741, 743, 749, 759, 761, 767, 770, 773, 779, 781, 783, 784, 787, 799, 800, 803, 804, 805, 809, 810, 813, 814, 817, 819, 828, 844, 847, 854, 862, 863, 866, 869, 873, 877, 887, 897, 899, 902, 904, 905, 910, 911, 915, 916, 917, 922, 933, 942, 947, 948, 965, 966, 974, 978, 986, 988, 991, 993, 1010, 1011, 1022, 1023, 1029, 1035, 1038, 1039, 1042, 1071, 1096, 1097, 1099, 1100, 1104, 1105, 1106, 1111, 1112, 1118, 1119, 1120, 1122, 1139, 1143, 1144, 1150, 1152, 1157, 1158, 1159, 1160, 1170, 1175, 1176, 1178, 1180, 1181, 1182, 1184, 1196, 1197, 1199, 1200, 1203, 1205, 1206, 1209, 1210, 1211, 1213, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1240, 1241, 1244, 1249, 1252, 1262, 1268, 1270, 1275, 1276, 1277, 1281, 1283, 1284, 1292, 1295, 1296, 1301, 1308, 1309, 1315, 1322, 1327, 1337, 1349, 1352, 1365, 1368], "int16": [1, 54, 300, 338, 425, 426, 458, 729, 828, 948, 1033, 1034, 1069, 1308, 1315, 1337], "int32": [1, 40, 54, 59, 123, 126, 165, 167, 168, 229, 242, 270, 295, 338, 373, 374, 376, 395, 409, 438, 448, 449, 450, 451, 456, 479, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 733, 803, 828, 868, 891, 942, 947, 948, 974, 977, 978, 980, 998, 1045, 1055, 1059, 1060, 1061, 1067, 1090, 1098, 1188, 1320, 1321, 1337], "int64": [1, 39, 40, 53, 54, 59, 60, 82, 100, 138, 147, 203, 213, 222, 229, 262, 270, 275, 276, 290, 297, 338, 368, 369, 371, 372, 377, 378, 379, 380, 381, 382, 383, 384, 385, 388, 389, 425, 426, 468, 469, 470, 471, 472, 473, 474, 478, 484, 487, 576, 577, 603, 605, 607, 622, 630, 638, 641, 643, 645, 647, 649, 652, 654, 656, 691, 717, 729, 733, 749, 756, 775, 783, 784, 788, 803, 810, 824, 828, 851, 859, 868, 886, 891, 892, 893, 942, 948, 972, 973, 975, 976, 981, 982, 983, 984, 985, 986, 987, 988, 989, 992, 993, 1033, 1034, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1089, 1091, 1098, 1190, 1215, 1296, 1308, 1318, 1319, 1320, 1321, 1337], "int64arrai": [1312, 1337], "int8": [1, 54, 82, 222, 338, 386, 387, 425, 426, 443, 446, 452, 453, 459, 463, 476, 477, 567, 729, 800, 803, 819, 828, 947, 990, 991, 1033, 1034, 1038, 1050, 1053, 1063, 1064, 1070, 1074, 1087, 1088, 1181, 1220, 1308, 1318, 1325, 1337], "int_rang": [229, 306, 315, 324, 338, 749, 786, 806, 868, 878, 916, 925, 942], "integ": [37, 40, 46, 65, 66, 68, 73, 74, 75, 76, 77, 83, 84, 85, 86, 87, 159, 166, 168, 171, 173, 212, 229, 270, 293, 296, 338, 351, 416, 463, 496, 497, 617, 623, 625, 630, 637, 638, 650, 689, 713, 717, 743, 749, 779, 783, 784, 803, 828, 858, 868, 891, 942, 948, 1021, 1074, 1110, 1209, 1211, 1215, 1222, 1229, 1236, 1268, 1292, 1296, 1318, 1337, 1359, 1365, 1368], "integer_list": 78, "integr": [40, 300, 338, 641, 643, 645, 647, 649, 652, 654, 656, 828, 1368], "intend": [1, 161, 162, 163, 164, 722, 1301], "intens": [248, 324, 338, 618, 828, 1190, 1337], "interact": [168, 172, 207, 338, 341, 854, 942, 1337, 1342], "interchang": [124, 196], "interest": [139, 464, 467, 1075, 1078], "interfac": [0, 113, 114, 190, 191, 195, 840, 951, 1365], "interfer": 946, "interleav": 1360, "intermedi": [235, 338, 871, 942, 1368], "intern": [41, 42, 140, 159, 241, 290, 338, 497, 828, 1312, 1337, 1347], "interoper": [194, 950], "interpol": [207, 265, 330, 338, 492, 513, 580, 626, 648, 649, 801, 828, 854, 888, 931, 942, 1037, 1124, 1212, 1228, 1337, 1354], "interpolate_bi": [828, 1337], "interpolationmethod": [512, 828, 1123, 1337], "interpret": [127, 129, 138, 139, 152, 338, 395, 942, 998], "intersect": [40, 338, 558, 948, 1172, 1364], "interv": [229, 270, 308, 338, 428, 462, 475, 508, 514, 625, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 787, 815, 816, 828, 868, 891, 942, 1036, 1050, 1052, 1053, 1059, 1061, 1063, 1064, 1067, 1069, 1070, 1073, 1077, 1086, 1087, 1120, 1125, 1211, 1337, 1354], "intoexpr": [135, 199, 228, 229, 270, 276, 277, 281, 284, 301, 312, 313, 317, 338, 353, 371, 391, 394, 397, 408, 435, 460, 484, 490, 500, 508, 510, 513, 514, 537, 557, 558, 559, 560, 618, 632, 633, 641, 643, 645, 647, 649, 652, 654, 656, 660, 662, 671, 676, 686, 688, 700, 703, 704, 705, 707, 708, 709, 710, 711, 727, 735, 745, 747, 752, 755, 756, 757, 758, 759, 761, 763, 766, 770, 777, 787, 792, 794, 797, 803, 806, 810, 812, 828, 844, 867, 868, 891, 893, 894, 897, 900, 905, 912, 913, 918, 942, 975, 994, 997, 1000, 1042, 1098, 1104, 1122, 1124, 1125, 1151, 1217, 1218, 1237, 1241, 1267, 1282, 1283, 1284, 1286, 1287, 1288, 1289, 1290, 1337], "intoexprcolumn": [220, 234, 338, 370, 374, 375, 382, 407, 408, 417, 462, 490, 493, 536, 544, 547, 556, 561, 619, 623, 659, 662, 683, 689, 692, 702, 713, 717, 722, 734, 735, 749, 754, 768, 769, 771, 772, 783, 784, 815, 816, 818, 828, 864, 897, 942, 974, 978, 979, 986, 1024, 1073, 1086, 1104, 1150, 1158, 1161, 1170, 1175, 1206, 1262, 1268, 1271, 1281, 1292, 1301, 1337], "introduc": [50, 91, 712, 714, 715, 1291, 1293, 1294], "introduct": 1364, "intuit": [497, 828, 948], "invalid": [37, 46, 114, 138, 139, 152, 200, 338, 409, 691, 692, 717, 736, 828, 942, 995, 1011, 1270, 1271, 1296, 1337], "invalid_valu": 995, "invalidoperationerror": [633, 828, 1218, 1337, 1363], "invari": [878, 942], "invers": [355, 356, 357, 358, 359, 360, 828, 959, 960, 961, 962, 963, 964, 1318, 1337, 1362], "invert": 948, "invok": [192, 576, 828], "involv": [220, 338, 864, 942], "io": [35, 37, 40, 41, 42, 45, 136, 138, 144, 145, 146, 147, 148, 151, 152, 154, 155, 156, 208, 278, 338, 430, 499, 591, 828, 855, 895, 942], "iobas": [43, 44, 147, 148, 208, 278, 338, 430, 591, 595, 828, 855, 895, 942], "ipc": [41, 42, 47, 144, 145, 146, 155, 158, 338, 840, 942], "ipccompress": [41, 42, 338], "is_between": [828, 1337], "is_dupl": [338, 828, 1337], "is_elementwis": [135, 576, 828], "is_empti": [338, 1337], "is_finit": [828, 1337], "is_first_distinct": [828, 1337], "is_in": [100, 220, 338, 828, 1337], "is_infinit": [828, 1337], "is_last_distinct": [828, 1337], "is_nan": [211, 338, 828, 857, 942, 1337], "is_not_nan": [828, 1337], "is_not_nul": [828, 1337], "is_nul": [212, 338, 828, 858, 942, 1337], "is_numer": 1368, "is_odd": [276, 338, 893, 942, 948], "is_selector": 948, "is_sort": 1337, "is_uniqu": [338, 828, 1337], "isn": 818, "iso": [448, 467, 476, 477, 1055, 1078, 1087, 1088, 1360], "iso8601": [138, 139, 152, 467, 1078], "iso_lang": 1360, "iso_year": 479, "isodow": 1361, "isoweek": 1361, "isoyear": 1361, "issu": [93, 94, 97, 98, 101, 108, 110, 121, 138, 139, 140, 152, 338, 425, 426, 729, 828, 1033, 1034, 1308, 1337, 1365], "ital": [40, 338], "item": [13, 59, 139, 227, 271, 274, 338, 370, 374, 375, 431, 489, 536, 538, 545, 547, 556, 659, 705, 828, 974, 978, 979, 1038, 1102, 1150, 1152, 1159, 1161, 1170, 1235, 1284, 1337], "iter": [57, 58, 59, 69, 123, 126, 133, 135, 140, 171, 173, 199, 209, 220, 228, 229, 240, 241, 242, 245, 270, 271, 272, 273, 276, 277, 284, 301, 302, 312, 313, 316, 317, 338, 408, 427, 435, 493, 618, 671, 727, 735, 745, 747, 752, 754, 755, 756, 757, 758, 766, 792, 794, 797, 806, 810, 812, 818, 824, 828, 844, 856, 864, 867, 868, 874, 891, 893, 894, 900, 905, 912, 913, 918, 942, 947, 948, 1035, 1042, 1107, 1236, 1337, 1368], "iter_batch": 140, "iter_column": 338, "iter_row": [242, 271, 272, 273, 338], "iter_slic": 338, "its": [70, 92, 130, 160, 215, 296, 338, 439, 462, 475, 484, 576, 636, 671, 726, 818, 828, 852, 859, 911, 942, 946, 1018, 1046, 1073, 1086, 1096, 1098, 1221, 1318, 1337, 1367], "itself": [166, 338, 341, 342, 577, 640, 642, 644, 646, 648, 650, 651, 653, 655, 804, 805, 828, 876, 942, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1337, 1342, 1346, 1347, 1365], "ix": [263, 338], "j": [302, 338, 1356], "jax": [295, 338, 1316, 1337], "jax_enable_x64": [295, 338], "jaxexporttyp": [295, 338], "jjk": 948, "jkl": [684, 1263], "jklmn": 1360, "job": [845, 942], "join": [46, 47, 48, 49, 50, 51, 57, 58, 59, 91, 220, 244, 245, 307, 338, 493, 512, 618, 674, 807, 828, 849, 850, 860, 864, 873, 874, 887, 898, 909, 914, 942, 1253, 1347, 1349, 1355, 1364, 1365], "join_asof": [243, 338, 872, 942], "join_nul": [243, 338, 872, 942], "join_wher": [338, 942], "joinstrategi": [51, 243, 338, 872, 942], "joinvalid": [243, 338, 872, 942], "jpy": 1368, "json": [2, 3, 5, 6, 43, 44, 134, 135, 147, 148, 154, 156, 185, 208, 278, 338, 430, 499, 591, 595, 691, 692, 724, 828, 840, 855, 895, 942, 1270, 1271, 1304], "json_path": [692, 1271], "json_path_match": [691, 1270], "json_stat": 5, "json_str": [147, 148], "json_val": [692, 1271], "jsonencod": 134, "jsonpath": [691, 692, 1270, 1271], "jst": [130, 948], "jul": [712, 1291, 1360], "juli": [1078, 1360, 1361], "just": [40, 128, 140, 152, 254, 305, 338, 882, 908, 942, 948], "k": [199, 273, 301, 302, 338, 407, 408, 422, 526, 734, 735, 828, 844, 905, 942, 1010, 1030, 1140, 1322, 1337], "k_2": [668, 828, 1248, 1337], "k_3": [668, 828, 1248, 1337], "kadokawa": [695, 1274], "kanji": 948, "karen": [263, 338], "kathmandu": [1048, 1049, 1076], "kb": [215, 338, 396, 999, 1096, 1337], "kde": [1337, 1342], "keep": [51, 138, 139, 148, 152, 155, 156, 220, 303, 307, 308, 338, 499, 576, 594, 602, 632, 755, 828, 864, 906, 909, 942, 1217, 1337], "kei": [37, 39, 40, 41, 45, 46, 47, 48, 49, 51, 56, 59, 142, 148, 150, 152, 153, 154, 155, 156, 157, 182, 197, 229, 241, 243, 244, 255, 261, 267, 269, 272, 273, 307, 338, 493, 577, 632, 633, 700, 768, 771, 810, 828, 868, 872, 873, 883, 889, 890, 909, 942, 948, 952, 1217, 1218, 1279, 1337, 1353], "kept": [303, 338, 906, 942], "keyerror": 16, "keystrok": 824, "keyword": [39, 142, 150, 153, 168, 172, 182, 205, 228, 262, 271, 276, 277, 297, 312, 313, 317, 338, 493, 622, 727, 806, 810, 818, 828, 867, 886, 893, 894, 912, 913, 918, 942, 1319, 1337, 1350], "kl": 699, "kleen": [350, 352, 744, 745, 746, 747, 828, 955, 956, 1337], "klmnoopqrstuvwxyz": [242, 338], "knight": 1346, "know": [51, 140, 263, 305, 338, 568, 576, 828, 908, 942], "known": [144, 186, 387, 568, 925, 991, 1182], "kurtosi": [828, 1337], "kuzu_db_conn": 140, "kwarg": [31, 32, 36, 50, 61, 62, 64, 65, 71, 72, 73, 74, 75, 76, 77, 79, 80, 81, 83, 84, 85, 86, 87, 88, 135, 137, 140, 141, 168, 170, 172, 185, 189, 205, 220, 262, 297, 338, 341, 622, 828, 864, 886, 917, 942, 1319, 1337, 1342, 1350, 1365], "k\u00f9zudb": 140, "l": 787, "l1": 59, "l2": 59, "label": [229, 295, 300, 338, 341, 342, 428, 625, 639, 640, 642, 644, 646, 648, 651, 653, 655, 828, 868, 887, 942, 1036, 1211, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1337, 1342], "label_column": [300, 338], "labelangl": [338, 341, 1337, 1342], "lag": [281, 338, 382, 561, 662, 757, 828, 897, 942, 986, 1175, 1241, 1337], "lake": [39, 142, 153, 338, 840], "lambda": [152, 222, 248, 262, 263, 267, 324, 338, 387, 485, 486, 568, 576, 577, 602, 603, 763, 764, 777, 789, 790, 802, 828, 878, 886, 889, 925, 942, 991, 1099, 1100, 1182, 1190, 1337], "land": [435, 1042], "languag": [152, 229, 244, 270, 308, 338, 457, 462, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086, 1098, 1337], "larg": [10, 11, 14, 51, 140, 143, 149, 157], "large_str": [242, 290, 297, 338], "larger": [10, 46, 47, 48, 49, 57, 58, 497, 759, 828, 849, 850, 942], "largest": [199, 301, 338, 408, 734, 735, 828, 844, 905, 942, 1322, 1337], "last": [39, 148, 152, 155, 156, 161, 162, 163, 164, 231, 244, 247, 263, 273, 284, 289, 296, 303, 332, 338, 363, 374, 383, 427, 443, 454, 458, 476, 498, 520, 545, 563, 566, 568, 601, 602, 604, 606, 608, 609, 618, 633, 670, 671, 689, 705, 713, 730, 752, 813, 824, 828, 873, 900, 904, 906, 933, 942, 948, 967, 978, 987, 1035, 1050, 1065, 1069, 1087, 1119, 1132, 1144, 1159, 1177, 1180, 1218, 1250, 1268, 1284, 1292, 1309, 1318, 1337, 1358, 1360], "last_column": [40, 338], "later": [244, 278, 338, 591, 873, 895, 942], "latest": [32, 124, 142, 153, 196, 460, 461, 589, 712, 715, 770, 1071, 1072, 1291, 1294], "latt": 948, "latter": [40, 217, 338, 1103, 1337], "lazi": [1, 59, 152, 168, 244, 262, 263, 285, 338, 577, 779, 800, 803, 819, 828, 854, 872, 873, 914, 918, 919, 921, 923, 925, 926, 927, 928, 929, 930, 931, 932, 942, 948, 1346, 1347, 1348, 1349, 1350, 1352, 1365, 1368], "lazili": [138, 139, 152, 153, 154, 155, 156, 157, 850, 942], "lazy_fram": [57, 58], "lazyfram": [0, 1, 51, 52, 53, 54, 55, 57, 58, 59, 133, 152, 153, 154, 155, 156, 157, 158, 161, 162, 168, 182, 203, 208, 246, 262, 263, 278, 285, 338, 430, 493, 568, 591, 806, 807, 828, 840, 939, 940, 941, 947, 948, 1346, 1347, 1350, 1352, 1365, 1366, 1368], "lazygroupbi": [867, 868, 891, 942], "lbl": [295, 300, 338], "ldf": [1, 918, 919, 921, 923, 926, 927, 928, 929, 930, 931, 932], "ldot": [484, 828, 1098, 1337], "le": [680, 828, 1337], "lead": [14, 45, 130, 158, 252, 279, 281, 288, 338, 382, 500, 503, 561, 568, 576, 577, 661, 662, 707, 709, 759, 794, 812, 828, 878, 896, 897, 925, 942, 986, 1175, 1190, 1239, 1241, 1286, 1288, 1337], "leap": [447, 457, 1054, 1068], "leap_year": 447, "learn": [300, 338], "least": [59, 104, 263, 338, 404, 405, 619, 683, 685, 828, 1007, 1008, 1206, 1262, 1264, 1337, 1358], "leav": [6, 254, 305, 338, 568, 882, 908, 942], "left": [15, 16, 40, 51, 161, 162, 163, 164, 229, 243, 244, 270, 307, 338, 428, 483, 484, 485, 486, 512, 514, 625, 638, 641, 643, 645, 647, 649, 652, 654, 656, 660, 733, 755, 763, 764, 768, 769, 771, 772, 777, 787, 802, 815, 816, 818, 828, 868, 872, 873, 891, 909, 942, 1036, 1097, 1098, 1099, 1100, 1125, 1211, 1237, 1320, 1337, 1349, 1353, 1358], "left_clos": [428, 625, 828, 1036, 1211, 1337], "left_on": [243, 244, 307, 338, 872, 873, 909, 942], "left_right": [243, 338, 872, 942], "leftmost": [660, 828, 1237, 1337, 1360], "len": [12, 168, 172, 203, 242, 263, 315, 319, 324, 338, 421, 577, 588, 590, 636, 760, 783, 787, 828, 851, 911, 916, 920, 925, 942, 947, 1029, 1221, 1337], "len_byt": [12, 413, 694, 695, 1016, 1273], "len_char": [412, 693, 1015, 1272], "length": [59, 60, 78, 135, 143, 149, 152, 166, 170, 227, 229, 270, 283, 338, 341, 412, 427, 462, 475, 562, 568, 589, 632, 633, 636, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 669, 689, 693, 694, 696, 697, 700, 702, 713, 722, 756, 787, 800, 803, 804, 805, 819, 828, 868, 887, 891, 899, 942, 1015, 1022, 1035, 1046, 1073, 1086, 1176, 1182, 1203, 1217, 1218, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1249, 1268, 1272, 1273, 1275, 1276, 1279, 1281, 1292, 1301, 1337, 1354, 1355, 1358], "leq": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "less": [152, 244, 338, 497, 528, 575, 576, 705, 828, 873, 942, 1284, 1368], "letter": [216, 321, 332, 338, 487, 676, 684, 686, 688, 700, 720, 775, 828, 861, 922, 933, 942, 948, 1255, 1263, 1265, 1267, 1279, 1299, 1360], "level": [10, 40, 41, 42, 45, 49, 134, 152, 155, 156, 157, 222, 248, 259, 285, 290, 338, 342, 493, 828, 840, 901, 942, 1312, 1337, 1365], "lexic": [63, 948, 1019], "lf": [46, 47, 48, 49, 54, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 875, 876, 877, 878, 879, 880, 881, 884, 885, 886, 887, 888, 889, 890, 892, 893, 895, 897, 898, 899, 900, 902, 903, 904, 905, 906, 908, 909, 910, 911, 912, 914, 915, 916, 920, 924, 942, 1354, 1365, 1368], "lf1": [807, 901, 942, 1350, 1352, 1366], "lf2": [807, 901, 942, 1350, 1352, 1366], "lf3": [942, 1350], "lf4": [942, 1350], "lf5": 942, "lf6": 942, "lf_other": [914, 942], "lib": [828, 1312, 1337], "librari": [1, 106, 135, 140, 143, 576, 828, 946, 1368], "life": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "lifetim": [192, 839, 1352], "light": [40, 338], "like": [35, 37, 39, 41, 42, 43, 44, 45, 58, 124, 135, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 208, 229, 236, 238, 243, 273, 278, 295, 296, 338, 341, 430, 436, 499, 540, 576, 594, 628, 683, 708, 709, 740, 824, 828, 845, 850, 855, 868, 942, 1043, 1154, 1213, 1262, 1326, 1337, 1342], "limit": [10, 11, 49, 140, 141, 174, 219, 338, 390, 492, 498, 828, 863, 942, 1106, 1337, 1355, 1364], "line": [10, 20, 40, 138, 139, 143, 152, 227, 236, 238, 338, 341, 683, 1262, 1337, 1342], "line_termin": [37, 46, 338, 942], "linear": [207, 235, 265, 330, 338, 512, 513, 535, 580, 626, 648, 649, 757, 758, 801, 828, 854, 871, 888, 931, 942, 1037, 1123, 1124, 1149, 1212, 1228, 1337], "lineitem": [132, 139, 141], "link": 946, "list": [1, 13, 33, 39, 40, 51, 52, 54, 57, 58, 60, 66, 82, 98, 123, 125, 126, 127, 129, 130, 132, 133, 136, 138, 139, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 166, 167, 168, 172, 179, 180, 181, 187, 204, 209, 213, 215, 216, 220, 226, 228, 229, 233, 241, 258, 261, 270, 271, 272, 273, 276, 284, 291, 292, 300, 302, 303, 304, 306, 312, 317, 318, 338, 348, 375, 386, 387, 388, 428, 435, 489, 495, 500, 509, 518, 576, 577, 589, 590, 618, 625, 631, 634, 639, 640, 642, 644, 646, 648, 651, 653, 655, 670, 671, 682, 684, 686, 688, 703, 723, 725, 726, 733, 752, 754, 757, 768, 769, 771, 772, 774, 782, 784, 788, 790, 808, 810, 816, 824, 828, 852, 859, 861, 864, 867, 868, 893, 900, 906, 907, 912, 914, 918, 919, 942, 947, 948, 979, 990, 991, 992, 1022, 1036, 1042, 1096, 1102, 1111, 1114, 1120, 1121, 1130, 1190, 1211, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1255, 1261, 1263, 1265, 1267, 1279, 1282, 1317, 1320, 1337, 1346, 1351, 1355, 1357, 1367, 1368], "list_catalog": 190, "list_namespac": 190, "list_of_seri": 790, "list_tabl": 190, "listtostructwidthstrategi": [568, 1182], "lit": [1, 349, 391, 514, 585, 601, 687, 756, 757, 763, 777, 800, 803, 819, 828, 1106, 1337], "liter": [15, 16, 20, 37, 39, 41, 45, 46, 47, 48, 49, 140, 142, 148, 150, 152, 153, 155, 156, 157, 171, 172, 173, 182, 185, 189, 258, 276, 277, 281, 307, 312, 313, 338, 349, 391, 410, 414, 417, 439, 460, 481, 482, 490, 497, 502, 504, 514, 528, 575, 585, 597, 599, 612, 613, 623, 632, 633, 675, 676, 677, 686, 687, 688, 698, 699, 700, 727, 728, 736, 745, 747, 749, 755, 756, 757, 758, 766, 767, 770, 783, 787, 788, 792, 794, 797, 806, 810, 812, 814, 828, 863, 893, 894, 897, 909, 912, 913, 942, 948, 994, 1024, 1046, 1071, 1094, 1104, 1125, 1202, 1217, 1218, 1236, 1238, 1241, 1254, 1255, 1256, 1265, 1266, 1267, 1277, 1278, 1279, 1337, 1360], "littl": [272, 338, 395, 998], "lmn": 948, "ln": [483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337, 1358], "ln_a": 1359, "load": [3, 5, 6, 126, 128, 135, 140, 142, 143, 149, 153, 154, 171, 173, 338, 828, 840, 942, 1368], "load_from_fil": [2, 5, 6], "load_sheet_by_nam": 143, "load_tabl": 143, "load_workbook": 143, "loader": [300, 338], "lobster": [687, 1266], "loc": [338, 342], "local": [4, 39, 140, 142, 153, 154, 157, 338, 475, 620, 621, 828, 1014, 1018, 1048, 1049, 1073, 1076, 1086, 1207, 1208, 1337, 1347], "localhost": 140, "localis": [462, 475, 1086], "locat": [40, 150, 152, 155, 157, 217, 268, 298, 304, 338, 660, 828, 907, 942, 1103, 1111, 1236, 1237, 1337], "lock": 174, "log": [29, 53, 408, 480, 573, 599, 623, 735, 828, 1092, 1337, 1358], "log10": [828, 1337, 1358], "log10_a": 1359, "log16_a": 1359, "log1p": [828, 1337, 1358], "log1p_a": 1359, "log2": 1358, "logarithm": [571, 572, 573, 828, 1185, 1186, 1187, 1337, 1359], "logic": [59, 248, 324, 338, 341, 342, 350, 352, 430, 577, 733, 744, 745, 746, 747, 790, 828, 855, 860, 872, 895, 925, 942, 955, 956, 1190, 1318, 1320, 1337, 1342], "london": [440, 444, 461, 1047, 1051, 1072], "london_timezon": [461, 1072], "london_to_amsterdam": [461, 1072], "long": [216, 254, 263, 305, 306, 338, 395, 861, 882, 908, 942, 998], "longer": [138, 139, 152], "longest": 568, "look": [10, 229, 338, 391, 568, 868, 942, 994], "lookup": 824, "loop": [140, 577, 828], "lose": [437, 1044], "lossi": [138, 139, 152], "love": [676, 700, 1255, 1279], "low": [17, 140, 417, 625, 828, 1211, 1337], "low_memori": [138, 139, 148, 150, 152, 156, 157], "lower": [152, 207, 229, 265, 330, 338, 417, 514, 574, 602, 626, 630, 648, 649, 749, 768, 769, 771, 772, 787, 801, 815, 816, 828, 854, 868, 888, 931, 942, 1024, 1037, 1125, 1188, 1212, 1215, 1228, 1325, 1337, 1355, 1358], "lower_bound": [229, 338, 417, 514, 828, 868, 942, 1024, 1125, 1325, 1337], "lowercas": [608, 718, 720, 1297, 1299, 1360], "lowest": [574, 828], "lru_cach": [248, 338, 577, 828, 1190, 1337], "lst": 167, "lt": [160, 493, 742, 828, 1337], "ltrim": 1358, "lyric": [676, 700, 1255, 1279], "lz4": [41, 42, 45, 47, 49, 338, 942], "lzo": [45, 49, 338, 942], "m": [66, 68, 243, 338, 436, 437, 439, 444, 445, 464, 466, 467, 478, 683, 712, 714, 715, 719, 770, 771, 772, 773, 779, 787, 872, 942, 948, 1043, 1044, 1046, 1051, 1052, 1075, 1077, 1078, 1089, 1262, 1291, 1293, 1294, 1298, 1350, 1360, 1361], "m_2": [668, 828, 1248, 1337], "m_3": [668, 828, 1248, 1337], "m_i": [668, 828, 1248, 1337], "machin": 1368, "maco": 160, "made": [40, 140, 338, 467, 1078], "mai": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 59, 67, 69, 73, 123, 125, 126, 127, 129, 133, 134, 136, 138, 139, 140, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 161, 163, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 192, 207, 208, 215, 217, 229, 243, 244, 245, 248, 270, 278, 285, 295, 297, 300, 307, 308, 338, 341, 342, 412, 427, 428, 430, 435, 436, 437, 448, 457, 462, 464, 475, 487, 508, 543, 568, 576, 577, 588, 591, 625, 638, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 686, 688, 691, 693, 699, 754, 756, 763, 764, 768, 769, 771, 772, 777, 787, 802, 815, 816, 828, 849, 850, 854, 855, 860, 868, 872, 873, 874, 878, 891, 895, 901, 909, 915, 916, 925, 942, 1015, 1018, 1019, 1035, 1036, 1037, 1042, 1043, 1044, 1055, 1068, 1073, 1075, 1086, 1096, 1103, 1120, 1157, 1190, 1211, 1223, 1226, 1228, 1229, 1265, 1267, 1270, 1272, 1316, 1319, 1321, 1337, 1342, 1368], "main": [160, 850, 942], "maintain": [46, 47, 48, 49, 284, 338, 388, 569, 660, 671, 737, 752, 828, 854, 900, 942, 992, 1183, 1237, 1323, 1337], "maintain_ord": [46, 47, 48, 49, 228, 243, 261, 263, 284, 303, 308, 318, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 348, 388, 398, 403, 406, 408, 500, 503, 569, 577, 671, 735, 737, 752, 828, 850, 860, 867, 872, 887, 898, 900, 906, 919, 921, 923, 926, 927, 928, 929, 930, 931, 932, 942, 992, 1183, 1323, 1337], "maintainorderjoin": [243, 338, 872, 942], "major": [143, 295, 338], "make": [40, 59, 82, 123, 128, 135, 138, 139, 142, 143, 144, 146, 150, 153, 255, 259, 266, 296, 308, 338, 341, 485, 486, 508, 608, 609, 618, 631, 704, 828, 883, 942, 1099, 1100, 1120, 1283, 1318, 1337], "man": [701, 1280], "manag": [50, 90, 91, 189, 839, 840, 1352, 1365], "managed_shallow_clon": 189, "mandatori": [40, 338], "mango": [410, 414, 680, 706, 1012, 1017, 1259, 1285], "mani": [140, 141, 157, 217, 338, 686, 688, 700, 1103, 1265, 1279, 1337, 1341], "manner": 140, "many_to_mani": [243, 338, 872, 942], "many_to_on": [243, 338, 872, 942], "map": [82, 125, 126, 138, 139, 140, 141, 144, 145, 150, 151, 152, 155, 168, 200, 203, 221, 241, 248, 267, 271, 272, 273, 275, 291, 338, 349, 462, 475, 576, 577, 601, 603, 604, 606, 608, 609, 632, 633, 700, 740, 789, 828, 846, 889, 892, 942, 947, 948, 1037, 1073, 1086, 1190, 1217, 1218, 1279, 1326, 1337, 1347, 1349, 1350, 1365], "map_": 110, "map_batch": [828, 942], "map_el": [101, 248, 338, 576, 743, 828, 1337], "map_field": [605, 607], "map_row": 338, "mapelementsstrategi": [577, 828], "mapping_strategi": [618, 828], "march": [464, 1075], "mariadb": 141, "mark": [40, 134, 338, 409, 828, 1011, 1337], "mark_area": [1337, 1342], "mark_attr": [338, 341, 1337, 1342], "mark_bar": [338, 341, 1337, 1342], "mark_lin": [338, 341], "mark_point": [338, 341], "markdown": [7, 20, 192], "marker": [40, 338], "mask": [157, 168, 172, 236, 238, 338, 392, 515, 517, 520, 525, 620, 621, 675, 678, 687, 828, 995, 1107, 1125, 1126, 1129, 1132, 1138, 1207, 1208, 1238, 1254, 1257, 1266, 1328, 1337], "mass": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "massag": [254, 305, 338, 882, 908, 942], "match": [39, 40, 59, 66, 112, 123, 125, 126, 127, 129, 138, 140, 147, 148, 150, 156, 157, 161, 162, 163, 164, 200, 219, 243, 244, 271, 307, 338, 410, 414, 584, 585, 586, 632, 633, 650, 675, 676, 677, 680, 683, 684, 686, 687, 688, 691, 692, 698, 699, 700, 706, 712, 714, 715, 818, 824, 828, 846, 863, 872, 873, 909, 942, 948, 1012, 1017, 1095, 1217, 1218, 1229, 1254, 1255, 1256, 1259, 1262, 1263, 1265, 1266, 1267, 1270, 1271, 1277, 1278, 1279, 1285, 1291, 1293, 1294, 1337, 1360], "matches_overlap": [686, 688, 1267], "matches_supertyp": [219, 338, 863, 942], "materi": [133, 248, 273, 324, 338, 849, 887, 925, 935, 942, 948, 1190, 1337], "materialis": [241, 242, 271, 272, 338], "materialized_view": 189, "math": [1, 10, 55, 263, 338, 429, 828, 1026, 1028, 1246, 1310, 1337, 1358, 1362, 1364], "mathemat": [736, 774, 828, 1358], "mathshortcut": [1, 55], "matplotlib": [160, 592, 887, 898, 942], "matter": [229, 241, 270, 272, 273, 292, 338, 638, 708, 709, 828, 868, 891, 942], "max": [25, 40, 45, 49, 134, 207, 219, 228, 250, 263, 270, 338, 342, 423, 492, 568, 576, 618, 628, 632, 633, 638, 640, 641, 661, 705, 756, 768, 771, 792, 808, 828, 854, 863, 867, 891, 942, 1031, 1037, 1106, 1182, 1213, 1224, 1239, 1284, 1337, 1346, 1355, 1358], "max_a": [270, 338, 638, 828, 891, 942], "max_binary_s": 140, "max_col": [166, 168], "max_colname_length": [227, 338], "max_color": [40, 338], "max_data_s": 172, "max_elem": 1355, "max_horizont": [338, 791], "max_items_per_column": [227, 338], "max_level": 134, "max_siz": [167, 168, 170, 172, 1368], "max_text_s": 140, "max_valu": 1368, "max_width": [568, 1182], "maxim": [325, 361, 828, 926, 965, 1337], "maximum": [10, 26, 37, 45, 46, 49, 67, 126, 129, 138, 139, 140, 143, 147, 148, 149, 152, 156, 158, 166, 167, 168, 170, 172, 227, 229, 249, 250, 338, 368, 413, 533, 578, 610, 620, 628, 689, 691, 694, 702, 713, 791, 792, 828, 868, 879, 942, 972, 1016, 1056, 1147, 1191, 1199, 1207, 1213, 1268, 1270, 1273, 1281, 1292, 1337, 1354], "mb": [215, 338, 396, 1096, 1337], "me": [676, 700, 720, 1255, 1279, 1299], "mean": [45, 49, 138, 139, 144, 150, 152, 155, 192, 207, 219, 228, 229, 244, 252, 263, 270, 308, 317, 338, 457, 462, 475, 489, 492, 497, 638, 641, 642, 643, 645, 647, 649, 652, 654, 656, 668, 674, 683, 690, 768, 769, 771, 772, 773, 794, 815, 816, 818, 828, 854, 863, 867, 868, 873, 878, 891, 918, 942, 1037, 1068, 1073, 1086, 1102, 1106, 1225, 1248, 1253, 1262, 1269, 1337, 1354, 1355], "mean_horizont": [338, 793], "measur": [254, 305, 338, 342, 882, 908, 942], "measure_a": [338, 342], "measure_b": [338, 342], "median": [207, 263, 338, 492, 644, 645, 828, 854, 914, 942, 1037, 1226, 1337, 1358], "mediat": 1365, "medium": [40, 338], "megan": [255, 338, 883, 942], "melt": [305, 338, 908, 942], "member": [229, 338, 868, 942, 1130, 1337], "membership": [370, 536, 974, 1150], "memori": [14, 45, 49, 57, 58, 59, 123, 124, 127, 128, 129, 138, 139, 140, 142, 143, 144, 148, 150, 152, 153, 155, 156, 157, 196, 217, 248, 272, 273, 282, 296, 324, 338, 618, 629, 663, 828, 849, 850, 917, 942, 1103, 1190, 1214, 1242, 1243, 1318, 1337], "memory_map": [144, 150, 155], "memory_resourc": 917, "merg": [39, 243, 244, 255, 338, 872, 873, 883, 942], "merge_sort": [338, 942], "messi": [683, 685, 1262, 1264], "met": 818, "meta": [92, 430, 681, 828, 1260], "metadata": [0, 154, 178, 182, 840], "metastor": 183, "method": [4, 31, 32, 33, 34, 35, 38, 39, 40, 41, 42, 50, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 122, 124, 136, 138, 139, 140, 141, 143, 144, 145, 146, 147, 148, 149, 150, 151, 158, 165, 168, 172, 177, 183, 184, 186, 187, 192, 194, 203, 207, 208, 211, 212, 217, 224, 228, 235, 241, 248, 259, 265, 271, 272, 273, 281, 303, 312, 319, 324, 330, 338, 347, 350, 351, 382, 417, 430, 464, 467, 481, 482, 490, 497, 499, 502, 504, 512, 528, 561, 575, 577, 595, 597, 599, 601, 602, 604, 606, 608, 609, 612, 613, 614, 617, 623, 626, 628, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 662, 676, 686, 688, 700, 708, 709, 710, 711, 716, 722, 728, 736, 738, 743, 759, 790, 801, 820, 821, 823, 824, 828, 829, 830, 833, 834, 835, 836, 837, 840, 850, 854, 855, 857, 858, 871, 888, 897, 906, 912, 917, 920, 925, 931, 942, 947, 950, 957, 986, 1024, 1037, 1075, 1078, 1093, 1094, 1103, 1104, 1113, 1115, 1123, 1142, 1175, 1189, 1190, 1201, 1202, 1212, 1213, 1228, 1241, 1255, 1265, 1267, 1279, 1295, 1301, 1320, 1329, 1331, 1333, 1337, 1338, 1341, 1343, 1344, 1345, 1347, 1351], "metric": 140, "micro": [463, 1074], "microsecond": [66, 68, 229, 241, 244, 270, 272, 273, 292, 308, 338, 457, 460, 462, 467, 470, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 770, 771, 772, 773, 814, 815, 816, 828, 868, 873, 887, 891, 942, 948, 1068, 1071, 1073, 1081, 1086, 1098, 1337, 1361], "microsoft": [33, 40, 338], "mid_color": [40, 338], "midnight": 83, "midpoint": [207, 265, 330, 338, 626, 648, 649, 801, 828, 854, 888, 931, 942, 1037, 1212, 1228, 1337], "might": [138, 139, 152, 174, 243, 244, 263, 296, 305, 338, 577, 738, 828, 872, 873, 900, 908, 942], "millennia": 1361, "millennium": 1361, "milli": [463, 1074], "millisecond": [229, 244, 270, 308, 338, 446, 452, 457, 462, 471, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 771, 772, 773, 787, 815, 816, 828, 868, 873, 891, 942, 948, 1068, 1073, 1082, 1086, 1098, 1337, 1361], "milliseconds_diff": [470, 471, 473], "mimic": 757, "min": [40, 45, 49, 135, 207, 219, 257, 263, 270, 338, 424, 492, 577, 618, 628, 638, 646, 647, 768, 771, 797, 806, 828, 854, 863, 891, 942, 1032, 1037, 1106, 1213, 1227, 1337, 1355, 1358, 1361, 1368], "min_a": [270, 338, 638, 828, 891, 942], "min_col": [166, 168], "min_color": [40, 338], "min_elem": 1355, "min_horizont": [338, 796, 806], "min_sampl": [427, 483, 485, 486, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 804, 805, 828, 1035, 1097, 1099, 1100, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1337], "min_siz": [167, 168, 170, 172, 1368], "min_valu": 1368, "mincol": 166, "minim": [328, 362, 369, 534, 663, 671, 828, 929, 966, 973, 1148, 1194, 1242, 1337], "minimum": [45, 49, 166, 167, 168, 170, 172, 222, 256, 257, 338, 483, 485, 486, 596, 611, 621, 628, 796, 797, 828, 884, 942, 1062, 1097, 1099, 1100, 1200, 1208, 1213, 1337, 1354, 1368], "minu": [457, 614, 828, 1068], "minut": [229, 244, 270, 308, 338, 446, 449, 451, 456, 457, 460, 462, 463, 472, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 770, 771, 772, 773, 814, 815, 816, 828, 868, 873, 891, 942, 948, 1068, 1071, 1073, 1083, 1086, 1098, 1337, 1361], "minutes_diff": 472, "misc": 1352, "miscellan": 840, "mismatch": [59, 115, 148, 156, 161, 163], "miss": [59, 138, 139, 152, 218, 224, 338, 390, 483, 485, 486, 491, 498, 521, 522, 568, 828, 862, 942, 1097, 1099, 1100, 1105, 1337], "missing_utf8_is_empty_str": [138, 139, 152], "mix": [11, 244, 296, 338, 756, 807, 873, 901, 942, 948, 1037, 1337], "mixin": 1, "mlnm": 450, "mm": [40, 338], "mn": 1360, "mno": [16, 20], "mnop": 1360, "mo": 773, "mocha": 948, "mod": [828, 1358], "mode": [38, 39, 40, 46, 47, 48, 49, 57, 58, 161, 163, 263, 285, 338, 684, 800, 803, 819, 828, 849, 850, 860, 942, 1263, 1337, 1346, 1347, 1365], "model": [300, 338], "modifi": [138, 139, 152, 174, 192, 217, 233, 240, 241, 310, 338, 364, 461, 478, 675, 683, 684, 687, 698, 699, 718, 720, 721, 828, 957, 1072, 1089, 1103, 1254, 1262, 1263, 1266, 1277, 1278, 1297, 1299, 1300, 1337], "modul": [94, 102, 143, 827, 946, 948, 1368], "modulu": [597, 828], "moment": [45, 205, 338, 526, 668, 828, 1140, 1248, 1337], "mon": [338, 341, 1361], "mondai": [229, 338, 435, 475, 477, 754, 868, 942, 1042, 1086, 1088], "monkei": [696, 697, 1275, 1276], "month": [229, 244, 270, 308, 338, 443, 454, 455, 457, 460, 462, 464, 467, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 767, 768, 769, 770, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 1050, 1065, 1066, 1068, 1071, 1073, 1075, 1078, 1086, 1098, 1337, 1361], "month_nam": [464, 467], "monthbegin": [455, 1066], "monthend": [454, 1065], "moos": 948, "more": [20, 40, 45, 49, 51, 59, 90, 91, 120, 123, 124, 125, 126, 127, 128, 129, 133, 135, 140, 141, 142, 143, 147, 148, 149, 150, 153, 154, 156, 161, 163, 168, 192, 194, 205, 207, 211, 220, 240, 241, 248, 254, 259, 271, 272, 274, 285, 295, 296, 300, 303, 305, 324, 338, 342, 351, 388, 412, 493, 497, 505, 526, 556, 569, 573, 576, 577, 617, 618, 659, 668, 684, 693, 712, 714, 715, 737, 748, 760, 776, 782, 785, 793, 795, 798, 799, 808, 818, 824, 828, 854, 857, 858, 864, 882, 901, 906, 908, 917, 942, 946, 948, 950, 992, 1015, 1018, 1037, 1116, 1117, 1140, 1170, 1183, 1190, 1235, 1248, 1263, 1272, 1291, 1293, 1294, 1316, 1318, 1323, 1337, 1352, 1353, 1363, 1366, 1367, 1368], "more_bi": [261, 284, 338, 671, 828, 900, 942], "more_column": [216, 304, 338, 487, 775, 828, 861, 907, 942, 948], "more_expr": [618, 752, 755, 756, 757, 758, 828], "more_nam": [723, 824], "most": [40, 123, 138, 139, 141, 152, 161, 162, 163, 164, 296, 338, 401, 402, 589, 598, 619, 633, 705, 828, 1004, 1005, 1195, 1206, 1218, 1284, 1318, 1337, 1349, 1365], "mostli": [290, 338, 493, 828], "move": [263, 273, 338, 435, 483, 484, 485, 486, 640, 642, 646, 653, 828, 1042, 1097, 1098, 1099, 1100, 1224, 1225, 1227, 1231, 1337], "mr": 917, "mssql": [38, 338], "much": [248, 306, 324, 338, 412, 413, 427, 543, 577, 693, 694, 790, 828, 925, 1015, 1016, 1035, 1157, 1190, 1272, 1273, 1337], "mul": 828, "multi": [8, 40, 138, 139, 300, 338, 487, 683, 828, 1262], "multi_fram": [40, 338], "multicolselector": 197, "multiindexselector": [197, 952], "multipl": [40, 57, 58, 59, 107, 138, 139, 143, 149, 152, 155, 156, 157, 166, 168, 172, 209, 215, 217, 220, 228, 229, 233, 242, 245, 261, 263, 273, 276, 284, 307, 312, 317, 338, 408, 543, 576, 582, 589, 598, 599, 618, 632, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 671, 723, 735, 752, 760, 777, 789, 791, 796, 802, 808, 811, 818, 824, 828, 840, 849, 850, 856, 864, 867, 868, 874, 893, 900, 909, 912, 918, 925, 942, 957, 987, 1096, 1103, 1157, 1177, 1195, 1217, 1219, 1250, 1337, 1350, 1355], "multipli": [576, 639, 640, 642, 644, 646, 648, 651, 653, 655, 727, 828, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1337], "multithread": [284, 338, 671, 752, 828, 900, 942, 987, 1177, 1250, 1337], "must": [33, 40, 69, 124, 125, 133, 135, 138, 142, 150, 153, 154, 157, 158, 207, 216, 229, 244, 245, 255, 263, 270, 271, 338, 428, 568, 577, 592, 625, 632, 633, 638, 700, 756, 768, 769, 818, 828, 854, 861, 868, 873, 874, 878, 883, 891, 898, 917, 942, 1036, 1037, 1211, 1217, 1218, 1279, 1337], "mutual": [271, 338], "my": [154, 158, 338, 341, 1337, 1342], "my_column": 925, "my_column_": [302, 338], "my_column_0": [302, 338], "my_column_1": [302, 338], "my_column_2": [302, 338], "my_custom_aggreg": 790, "my_fil": 144, "my_holidai": [435, 754, 1042], "my_larger_than_ram_fil": [46, 47, 48, 49, 942], "my_long_fil": 152, "my_struct": 810, "mydf": 152, "myrol": 141, "mysql": 141, "n": [1, 12, 13, 17, 25, 26, 37, 44, 46, 52, 53, 54, 55, 66, 68, 132, 133, 138, 139, 143, 148, 152, 168, 201, 217, 223, 229, 231, 241, 242, 247, 248, 272, 273, 274, 281, 286, 289, 292, 294, 309, 321, 323, 332, 338, 354, 382, 387, 396, 398, 403, 406, 407, 408, 412, 413, 427, 431, 435, 437, 439, 445, 466, 478, 484, 490, 493, 501, 507, 530, 538, 544, 546, 556, 557, 561, 564, 566, 568, 570, 619, 622, 631, 651, 652, 655, 656, 659, 662, 668, 673, 689, 693, 694, 698, 699, 704, 705, 707, 708, 713, 715, 730, 734, 735, 736, 740, 741, 743, 761, 770, 771, 772, 773, 779, 781, 800, 803, 804, 805, 806, 809, 813, 817, 819, 828, 847, 866, 868, 869, 877, 897, 902, 904, 910, 922, 924, 933, 942, 948, 986, 991, 999, 1010, 1015, 1016, 1023, 1035, 1038, 1042, 1044, 1046, 1052, 1077, 1089, 1098, 1103, 1104, 1112, 1119, 1144, 1152, 1158, 1160, 1170, 1171, 1175, 1180, 1182, 1206, 1230, 1232, 1235, 1241, 1248, 1252, 1268, 1272, 1273, 1277, 1278, 1283, 1284, 1292, 1294, 1309, 1315, 1322, 1326, 1327, 1337, 1349, 1350, 1357, 1360, 1361, 1363, 1365, 1368], "n0": [387, 568], "n00": [991, 1182], "n01": [991, 1182], "n02": [991, 1182], "n1": [387, 568], "n2": [1, 387], "n3": 1, "n_1": [493, 828], "n_2": [493, 828], "n_3": [493, 828], "n_bar": 1354, "n_bit": 1360, "n_byte": [396, 412, 413, 693, 694, 1360], "n_char": [412, 413, 693, 694, 1360], "n_chunk": [338, 957, 1103, 1214, 1337], "n_elem": 1355, "n_even": 948, "n_field_strategi": [568, 1182], "n_film": 1346, "n_foo_uniqu": 1354, "n_kilobyt": 396, "n_row": [133, 136, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 242, 338, 942], "n_thread": [138, 139], "n_uniqu": [338, 354, 828, 1337], "na": [297, 338, 706, 1319, 1337], "naiv": [439, 440, 715, 1046, 1047, 1294], "name": [1, 18, 22, 24, 32, 35, 37, 38, 40, 46, 52, 53, 54, 55, 70, 82, 99, 123, 125, 126, 127, 128, 129, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 154, 155, 156, 157, 163, 164, 165, 166, 168, 171, 172, 173, 178, 180, 181, 182, 183, 184, 186, 187, 199, 200, 203, 204, 209, 210, 211, 212, 216, 220, 221, 224, 225, 227, 228, 239, 240, 241, 243, 244, 245, 248, 250, 252, 254, 255, 257, 261, 263, 267, 271, 272, 273, 275, 276, 277, 284, 285, 288, 291, 293, 295, 296, 299, 300, 301, 302, 303, 304, 305, 306, 307, 312, 313, 314, 315, 316, 317, 323, 338, 342, 349, 387, 391, 392, 394, 397, 408, 417, 428, 464, 467, 487, 493, 514, 521, 522, 523, 524, 568, 577, 582, 586, 588, 590, 594, 618, 625, 635, 671, 684, 685, 698, 699, 700, 723, 725, 727, 735, 740, 744, 745, 746, 747, 748, 750, 751, 752, 755, 756, 757, 758, 759, 760, 761, 762, 765, 766, 775, 776, 781, 782, 785, 791, 792, 793, 794, 795, 796, 797, 798, 801, 804, 805, 806, 807, 809, 810, 811, 812, 813, 817, 818, 824, 828, 844, 846, 851, 852, 856, 857, 858, 861, 864, 867, 872, 873, 874, 882, 883, 889, 892, 893, 894, 900, 901, 905, 906, 907, 908, 909, 912, 913, 914, 915, 916, 918, 924, 942, 947, 948, 954, 991, 1023, 1036, 1075, 1078, 1095, 1182, 1211, 1216, 1262, 1263, 1264, 1277, 1278, 1302, 1305, 1313, 1314, 1319, 1326, 1337, 1342, 1347, 1348, 1349, 1350, 1351, 1352, 1364, 1365, 1368], "name_gener": [302, 338], "named_agg": [317, 918], "named_bi": [228, 338, 867, 942], "named_expr": [276, 277, 312, 313, 338, 727, 806, 810, 893, 894, 912, 913, 942], "named_fram": [1350, 1365], "nameless": 128, "namespac": [1, 140, 178, 180, 181, 182, 186, 337, 338, 341, 723, 807, 827, 840, 940, 941, 946, 1337, 1342, 1368], "namespaceinfo": [180, 190], "nan": [128, 168, 196, 211, 218, 296, 297, 338, 433, 434, 481, 482, 491, 502, 504, 512, 521, 522, 523, 524, 528, 575, 578, 596, 610, 611, 612, 613, 639, 665, 736, 759, 828, 857, 862, 942, 960, 964, 1040, 1041, 1105, 1133, 1134, 1199, 1200, 1223, 1245, 1318, 1319, 1337, 1368], "nan_as_nul": 196, "nan_max": [828, 1337], "nan_min": [828, 1337], "nan_to_nul": [128, 338, 942, 1337], "nana": 1360, "nanmax": [610, 611, 828, 1199, 1200, 1337], "nanosecond": [83, 229, 244, 270, 308, 338, 457, 462, 463, 473, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1074, 1084, 1086, 1098, 1337, 1361], "nansum": [639, 828, 1223, 1337], "nativ": [10, 38, 138, 140, 143, 144, 146, 150, 188, 241, 248, 272, 273, 292, 296, 324, 338, 577, 790, 807, 828, 834, 901, 925, 942, 946, 1190, 1318, 1337, 1341, 1365, 1368], "natur": [573, 828, 1187, 1337, 1353, 1359], "ndarrai": [127, 194, 220, 296, 338, 500, 660, 828, 864, 942, 950, 1111, 1236, 1237, 1318, 1337], "ndjson": [48, 942], "ne": [613, 828, 1202, 1337], "ne_miss": [220, 338, 828, 864, 942, 1094, 1337], "nearest": [53, 207, 244, 265, 330, 338, 416, 496, 512, 626, 648, 649, 801, 828, 854, 873, 888, 931, 942, 1021, 1037, 1110, 1123, 1212, 1228, 1337, 1359], "nearest_pow2": 53, "necessari": [37, 38, 46, 50, 91, 143, 296, 338, 942, 1318, 1337], "need": [59, 93, 102, 130, 138, 139, 141, 150, 152, 155, 157, 192, 229, 270, 273, 282, 338, 341, 568, 638, 663, 698, 699, 700, 716, 773, 800, 803, 819, 828, 868, 891, 942, 1242, 1277, 1278, 1279, 1295, 1337, 1342, 1368], "neg": [13, 65, 66, 67, 68, 138, 139, 144, 146, 150, 159, 231, 247, 270, 281, 283, 289, 315, 338, 382, 561, 562, 622, 623, 638, 662, 669, 689, 702, 713, 828, 891, 897, 899, 915, 916, 942, 948, 986, 1119, 1144, 1175, 1176, 1209, 1241, 1249, 1268, 1281, 1292, 1309, 1337], "negat": [615, 828, 1204, 1337], "neither": [130, 143, 149, 274, 338, 387, 568, 991, 1182], "nest": [50, 130, 134, 169, 170, 215, 338, 840, 1096, 1337, 1365, 1368], "nesting_level": 169, "net": [684, 1263], "netherland": [244, 338, 873, 942], "netsuite_format": 185, "never": [37, 46, 140, 243, 244, 271, 338, 872, 873, 942], "new": [38, 39, 40, 152, 192, 197, 223, 233, 234, 248, 259, 260, 263, 267, 302, 304, 306, 307, 312, 313, 338, 349, 439, 489, 499, 501, 512, 602, 603, 618, 632, 633, 637, 695, 698, 699, 704, 705, 723, 725, 824, 828, 840, 866, 889, 907, 909, 912, 913, 925, 942, 952, 954, 1046, 1102, 1112, 1203, 1216, 1217, 1218, 1222, 1277, 1278, 1283, 1284, 1302, 1305, 1314, 1337, 1365, 1367], "new_column": [138, 139, 143, 152], "new_dai": 460, "new_dat": 457, "new_df": [307, 338, 909, 942], "new_fil": [35, 37, 41, 42, 45, 338], "new_from_index": 1337, "new_id": [302, 338], "new_lf": [909, 942], "new_tabl": 1367, "new_valu": [763, 764, 777, 802], "new_york": 771, "newli": 51, "newlin": [44, 138, 148, 152, 156, 338], "next": [18, 53, 229, 244, 270, 308, 338, 390, 435, 457, 462, 475, 628, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1042, 1068, 1073, 1086, 1213, 1337], "next_batch": 139, "next_pow2": 53, "nfc": [695, 1274, 1360], "nfd": [695, 1274, 1360], "nfkc": [695, 1274, 1360], "nfkd": [695, 1274, 1360], "nfruit": 713, "nl": [435, 754, 1042], "nnel_id": 130, "no1": 948, "no_default": [224, 338, 632, 633, 700, 828, 1217, 1218, 1279, 1337], "no_optim": [46, 47, 48, 49, 57, 58, 849, 850, 878, 887, 942], "nodataerror": [138, 139, 143, 149, 152], "nodd": [683, 1262], "node": [845, 849, 870, 878, 882, 887, 889, 942], "nodefault": [224, 338, 632, 633, 700, 828, 1217, 1218, 1279, 1337], "non": [4, 5, 37, 39, 40, 46, 51, 66, 67, 128, 135, 159, 199, 206, 242, 254, 270, 276, 277, 281, 301, 302, 305, 307, 312, 313, 338, 390, 407, 408, 412, 417, 421, 422, 435, 461, 498, 514, 568, 576, 577, 583, 618, 619, 632, 633, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 677, 684, 693, 698, 699, 700, 720, 722, 727, 734, 735, 745, 747, 755, 756, 757, 758, 760, 762, 766, 773, 792, 794, 797, 804, 805, 806, 810, 812, 828, 844, 853, 882, 891, 893, 894, 897, 905, 908, 909, 912, 913, 942, 948, 1010, 1015, 1024, 1029, 1030, 1037, 1042, 1072, 1125, 1182, 1190, 1206, 1217, 1218, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1241, 1256, 1263, 1272, 1277, 1278, 1299, 1301, 1318, 1322, 1337, 1357, 1365], "non_exist": [461, 1072], "non_numer": [37, 46, 338, 942], "none": [1, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 58, 60, 63, 66, 67, 68, 69, 70, 78, 82, 91, 123, 125, 126, 127, 128, 129, 132, 133, 134, 135, 136, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 182, 183, 184, 186, 187, 188, 192, 194, 195, 201, 206, 207, 211, 212, 218, 219, 220, 222, 224, 227, 229, 230, 235, 239, 243, 244, 246, 248, 251, 254, 259, 260, 263, 270, 271, 274, 278, 281, 283, 284, 290, 291, 293, 295, 296, 297, 300, 302, 303, 304, 305, 306, 307, 308, 319, 323, 338, 350, 352, 353, 365, 366, 367, 374, 375, 387, 390, 410, 412, 413, 414, 417, 421, 422, 423, 426, 428, 433, 434, 442, 457, 460, 461, 467, 482, 483, 484, 485, 486, 487, 490, 491, 492, 498, 505, 506, 508, 510, 512, 513, 514, 521, 522, 523, 524, 529, 531, 532, 539, 545, 547, 549, 556, 557, 558, 559, 560, 562, 568, 576, 577, 588, 591, 592, 593, 595, 600, 613, 614, 615, 616, 618, 619, 625, 628, 629, 632, 633, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 662, 663, 664, 665, 669, 670, 674, 675, 677, 679, 680, 681, 684, 687, 689, 690, 691, 692, 693, 694, 696, 697, 702, 704, 705, 706, 707, 708, 709, 712, 713, 714, 715, 717, 719, 722, 723, 724, 725, 726, 733, 740, 745, 746, 747, 749, 755, 756, 757, 758, 759, 760, 762, 766, 768, 769, 770, 771, 772, 773, 775, 776, 783, 784, 785, 786, 787, 788, 789, 790, 792, 794, 797, 803, 804, 805, 810, 812, 814, 815, 816, 818, 828, 847, 848, 850, 853, 854, 857, 858, 860, 862, 863, 864, 868, 871, 872, 873, 876, 878, 882, 885, 891, 895, 897, 898, 899, 900, 906, 907, 908, 909, 914, 917, 920, 924, 925, 934, 935, 942, 947, 948, 950, 951, 955, 956, 958, 965, 966, 970, 971, 978, 979, 991, 1001, 1006, 1009, 1012, 1015, 1016, 1017, 1023, 1024, 1029, 1030, 1036, 1037, 1039, 1040, 1041, 1049, 1056, 1057, 1058, 1062, 1071, 1072, 1078, 1092, 1094, 1097, 1098, 1099, 1100, 1104, 1105, 1106, 1108, 1116, 1118, 1120, 1122, 1123, 1124, 1125, 1135, 1136, 1139, 1140, 1141, 1143, 1145, 1146, 1149, 1153, 1159, 1161, 1163, 1170, 1171, 1172, 1173, 1174, 1176, 1182, 1190, 1191, 1192, 1193, 1194, 1202, 1205, 1211, 1212, 1213, 1217, 1218, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1241, 1244, 1245, 1248, 1249, 1252, 1253, 1254, 1256, 1258, 1259, 1260, 1263, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1291, 1292, 1293, 1294, 1296, 1298, 1301, 1304, 1312, 1314, 1315, 1316, 1318, 1319, 1320, 1326, 1327, 1337, 1346, 1348, 1349, 1350, 1352, 1355, 1357, 1361, 1365], "nonexist": [461, 1072], "nor": [143, 149, 274, 338], "normal": [39, 134, 229, 338, 480, 526, 668, 740, 828, 868, 942, 1092, 1140, 1248, 1326, 1337, 1358], "normalised_scor": 140, "norowsreturnederror": [271, 338], "north": 69, "not_": [312, 338, 828, 912, 942, 948, 1337], "not_c": [312, 338, 912, 942], "notabl": 140, "notat": [11, 40, 338], "note": [4, 10, 20, 39, 40, 45, 50, 51, 58, 59, 65, 66, 68, 83, 90, 91, 123, 124, 125, 127, 129, 130, 134, 138, 140, 141, 142, 143, 147, 148, 149, 152, 153, 154, 156, 158, 161, 163, 166, 168, 172, 174, 192, 196, 203, 205, 207, 208, 211, 218, 220, 229, 230, 239, 240, 241, 243, 244, 248, 255, 259, 262, 263, 267, 270, 271, 272, 273, 278, 281, 285, 292, 295, 297, 300, 302, 303, 305, 307, 308, 312, 314, 315, 338, 382, 395, 410, 412, 413, 414, 417, 425, 426, 430, 433, 434, 440, 454, 455, 457, 462, 467, 475, 484, 491, 497, 499, 506, 514, 521, 522, 540, 543, 561, 568, 577, 591, 592, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 632, 633, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 662, 664, 668, 674, 675, 676, 682, 683, 684, 685, 686, 687, 688, 689, 693, 694, 698, 699, 700, 702, 707, 708, 709, 712, 713, 720, 722, 723, 729, 736, 745, 747, 754, 763, 768, 769, 771, 772, 773, 777, 787, 788, 800, 802, 803, 807, 815, 816, 818, 819, 824, 828, 839, 850, 854, 855, 857, 862, 864, 868, 873, 883, 889, 891, 895, 897, 898, 900, 901, 906, 908, 909, 912, 915, 916, 942, 946, 948, 986, 998, 1015, 1016, 1024, 1033, 1034, 1037, 1040, 1041, 1047, 1065, 1066, 1068, 1073, 1078, 1086, 1098, 1105, 1118, 1125, 1154, 1157, 1175, 1190, 1217, 1218, 1222, 1229, 1236, 1238, 1241, 1243, 1248, 1253, 1254, 1255, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1272, 1273, 1277, 1278, 1279, 1281, 1286, 1287, 1288, 1291, 1292, 1299, 1301, 1308, 1319, 1321, 1337, 1346, 1347, 1351, 1352, 1363, 1365], "noth": [20, 683, 692, 1262, 1271], "notic": [140, 220, 338, 864, 942, 1337], "notimplementederror": 196, "now": [51, 143, 270, 296, 338, 585, 891, 942, 1318, 1337], "np": [127, 194, 220, 296, 338, 500, 576, 660, 828, 864, 942, 950, 1111, 1128, 1131, 1133, 1134, 1236, 1237, 1337], "npt": [194, 950], "nr": [321, 332, 922, 933], "nth": [223, 338, 501, 705, 824, 828, 866, 942, 1112, 1284, 1337], "nthe": [683, 1262], "nthose": [683, 1262], "nu": 680, "null": [16, 37, 39, 45, 46, 49, 51, 59, 66, 125, 126, 129, 134, 138, 139, 148, 150, 152, 156, 157, 158, 165, 168, 172, 196, 199, 200, 201, 206, 207, 211, 212, 214, 219, 220, 222, 235, 243, 251, 252, 253, 260, 263, 265, 281, 284, 286, 287, 288, 291, 296, 297, 301, 304, 307, 309, 312, 319, 338, 350, 352, 353, 363, 366, 367, 374, 375, 382, 383, 390, 392, 395, 407, 408, 409, 410, 412, 413, 414, 417, 421, 422, 423, 426, 431, 433, 434, 457, 460, 461, 468, 469, 470, 471, 472, 473, 474, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 498, 505, 510, 512, 513, 521, 522, 523, 524, 529, 531, 532, 538, 539, 542, 543, 545, 547, 548, 549, 557, 558, 559, 560, 561, 563, 568, 576, 577, 600, 613, 614, 615, 616, 618, 619, 629, 633, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 662, 663, 665, 670, 671, 674, 675, 677, 678, 679, 680, 681, 682, 683, 684, 685, 687, 689, 690, 691, 692, 693, 694, 696, 697, 702, 704, 705, 706, 712, 713, 715, 717, 722, 723, 724, 725, 726, 733, 734, 735, 744, 745, 746, 747, 752, 755, 756, 757, 758, 760, 762, 766, 770, 775, 786, 788, 792, 794, 797, 804, 805, 810, 812, 818, 828, 844, 847, 853, 854, 857, 858, 863, 864, 871, 872, 885, 897, 900, 905, 907, 909, 912, 914, 920, 942, 948, 955, 956, 967, 970, 971, 978, 979, 986, 987, 995, 998, 1010, 1011, 1012, 1015, 1016, 1017, 1023, 1024, 1029, 1030, 1038, 1040, 1041, 1071, 1072, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1094, 1095, 1097, 1098, 1099, 1100, 1104, 1106, 1107, 1116, 1117, 1122, 1123, 1124, 1135, 1136, 1137, 1143, 1145, 1146, 1149, 1152, 1153, 1156, 1157, 1159, 1161, 1162, 1163, 1172, 1174, 1175, 1177, 1182, 1190, 1202, 1205, 1206, 1218, 1221, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1241, 1245, 1250, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1266, 1268, 1269, 1270, 1271, 1272, 1273, 1275, 1276, 1281, 1283, 1284, 1285, 1291, 1292, 1294, 1296, 1301, 1304, 1315, 1318, 1319, 1320, 1322, 1337, 1349, 1353, 1355, 1357, 1361, 1363, 1365, 1366, 1368], "null_behavior": [431, 538, 828, 1038, 1152, 1337], "null_count": [45, 49, 207, 212, 338, 427, 828, 854, 942, 1035, 1037, 1337], "null_equ": [214, 338, 1095, 1337], "null_on_oob": [374, 543, 545, 978, 1157, 1159], "null_prob": [165, 168, 172], "null_valu": [37, 46, 138, 139, 152, 338, 942], "nullabl": [39, 338], "nullbehavior": [431, 538, 828, 1038, 1152, 1337], "nullif": 1358, "nulls_last": [284, 338, 363, 383, 563, 618, 670, 671, 752, 828, 900, 942, 967, 987, 1137, 1177, 1250, 1337], "num": [13, 40, 299, 338, 514, 828, 1125, 1337], "num_row": 196, "num_sampl": 787, "number": [10, 11, 12, 13, 14, 17, 25, 37, 38, 40, 41, 45, 46, 47, 48, 49, 50, 51, 65, 66, 67, 83, 91, 112, 123, 125, 126, 127, 129, 132, 134, 138, 139, 140, 141, 143, 147, 148, 149, 150, 152, 155, 156, 157, 159, 166, 168, 171, 173, 174, 175, 182, 199, 201, 206, 215, 216, 218, 219, 227, 231, 232, 241, 242, 247, 258, 259, 270, 274, 281, 286, 289, 301, 306, 309, 311, 319, 321, 323, 332, 338, 364, 380, 382, 387, 390, 399, 400, 401, 402, 404, 405, 407, 408, 413, 421, 427, 428, 431, 435, 438, 446, 448, 450, 452, 453, 463, 476, 477, 479, 483, 484, 485, 486, 490, 491, 492, 498, 507, 521, 522, 529, 530, 538, 546, 549, 554, 556, 561, 564, 566, 568, 570, 618, 622, 625, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 657, 658, 659, 662, 664, 673, 689, 691, 693, 694, 698, 702, 704, 705, 713, 716, 730, 734, 735, 741, 754, 759, 760, 761, 773, 781, 786, 787, 804, 805, 809, 813, 817, 828, 844, 847, 853, 861, 862, 863, 869, 877, 887, 897, 902, 904, 905, 910, 911, 920, 922, 924, 933, 942, 947, 984, 986, 991, 1002, 1003, 1004, 1005, 1007, 1008, 1010, 1016, 1023, 1029, 1035, 1036, 1038, 1042, 1045, 1053, 1055, 1060, 1063, 1064, 1074, 1087, 1088, 1090, 1096, 1097, 1098, 1099, 1100, 1104, 1105, 1106, 1119, 1143, 1144, 1152, 1160, 1163, 1168, 1170, 1175, 1180, 1182, 1196, 1197, 1211, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1233, 1234, 1235, 1241, 1244, 1252, 1268, 1270, 1272, 1273, 1277, 1281, 1283, 1284, 1292, 1295, 1309, 1322, 1327, 1337, 1353, 1356, 1359, 1368], "number_of_two": [371, 537], "numbers_decim": 716, "numer": [10, 16, 37, 40, 46, 142, 153, 200, 209, 244, 296, 297, 305, 306, 338, 347, 395, 409, 417, 497, 514, 573, 597, 599, 623, 631, 663, 665, 685, 722, 728, 736, 787, 828, 840, 846, 856, 873, 908, 942, 948, 998, 1011, 1024, 1037, 1125, 1242, 1245, 1264, 1301, 1318, 1337, 1359, 1368], "numeric_dtyp": 1368, "numericliter": [417, 787, 828, 1024, 1337], "numpi": [97, 127, 160, 194, 205, 241, 272, 273, 292, 296, 297, 338, 576, 610, 611, 639, 828, 942, 950, 1128, 1131, 1133, 1134, 1199, 1200, 1223, 1318, 1319, 1337], "nworld": 707, "o": [144, 155, 396, 407, 408, 427, 682, 734, 735, 828, 999, 1010, 1035, 1261, 1286, 1322, 1337, 1350], "oauth": 154, "obj": 948, "object": [35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 59, 82, 100, 124, 125, 130, 134, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 153, 154, 166, 168, 169, 195, 196, 203, 208, 228, 229, 244, 246, 261, 270, 273, 278, 285, 295, 296, 297, 338, 430, 591, 768, 769, 771, 772, 788, 807, 815, 816, 828, 840, 849, 855, 868, 873, 876, 891, 901, 939, 942, 948, 951, 1312, 1337, 1347, 1349, 1352, 1365, 1367], "observ": [243, 338, 428, 483, 484, 485, 486, 625, 828, 872, 942, 1036, 1097, 1098, 1099, 1100, 1211, 1337], "obtain": 568, "obvious": 725, "occur": [40, 57, 58, 98, 107, 113, 245, 338, 371, 537, 598, 628, 828, 849, 850, 860, 874, 887, 898, 942, 975, 1151, 1195, 1213, 1318, 1337], "occurr": [508, 510, 517, 520, 740, 828, 1120, 1122, 1129, 1132, 1326, 1337], "oct": 1360, "octet_length": 1358, "octob": [467, 1078, 1360], "od": [149, 840], "odbc": [38, 140, 338], "odd": 683, "odi": [686, 688, 1267], "off": [46, 47, 48, 49, 57, 58, 138, 139, 152, 243, 244, 338, 435, 754, 849, 850, 860, 872, 873, 878, 887, 942, 1042], "offer": [262, 338, 622, 828, 886, 942, 1361, 1365], "offic": [40, 338], "offset": [68, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 223, 229, 270, 283, 314, 315, 338, 435, 436, 444, 454, 455, 457, 462, 475, 501, 544, 562, 638, 669, 687, 688, 702, 715, 828, 866, 868, 891, 899, 915, 916, 942, 1042, 1043, 1051, 1065, 1066, 1068, 1073, 1086, 1112, 1158, 1176, 1249, 1266, 1267, 1281, 1294, 1337, 1364], "offset_bi": 773, "often": [141, 192, 229, 270, 338, 371, 537, 631, 638, 828, 868, 891, 942, 975, 1151, 1352, 1365], "ok": 568, "old": [39, 267, 338, 632, 633, 828, 889, 942, 1217, 1218, 1337], "old_tabl": 1367, "older": [45, 49, 338, 942], "oldw": 708, "omit": [27, 126, 130, 143, 149, 166, 192, 259, 273, 295, 300, 338, 768, 771, 783, 784, 815, 816, 948, 1366], "onc": [138, 139, 174, 248, 272, 274, 317, 338, 556, 576, 577, 659, 710, 711, 828, 845, 918, 942, 1170, 1190, 1235, 1289, 1290, 1337, 1350], "one": [20, 37, 38, 40, 46, 51, 59, 104, 123, 125, 126, 127, 128, 129, 138, 139, 143, 147, 148, 149, 152, 156, 171, 173, 192, 200, 208, 211, 219, 220, 227, 228, 229, 241, 245, 246, 254, 263, 270, 271, 272, 278, 281, 296, 299, 305, 318, 338, 348, 382, 428, 430, 492, 493, 497, 500, 503, 505, 561, 568, 573, 591, 601, 602, 604, 606, 608, 609, 618, 637, 638, 662, 670, 683, 684, 685, 700, 723, 768, 771, 790, 808, 818, 824, 828, 846, 855, 857, 858, 863, 864, 867, 868, 874, 882, 891, 895, 897, 908, 914, 919, 942, 957, 986, 991, 1036, 1106, 1116, 1117, 1175, 1182, 1187, 1211, 1222, 1241, 1262, 1263, 1264, 1279, 1302, 1318, 1337, 1352, 1353, 1355, 1359, 1360, 1367], "one_to_mani": [243, 338, 872, 942], "one_to_on": [243, 338, 872, 942], "oneormoredatatyp": [40, 166, 338], "ones": [641, 643, 645, 647, 649, 652, 654, 656, 828, 948], "onf": [702, 1281], "onli": [1, 5, 10, 13, 20, 30, 37, 38, 40, 46, 50, 51, 56, 59, 91, 133, 135, 138, 139, 140, 143, 144, 146, 148, 150, 152, 155, 156, 157, 158, 161, 162, 163, 164, 168, 172, 182, 192, 211, 212, 217, 229, 230, 241, 244, 245, 248, 263, 270, 272, 273, 292, 294, 295, 296, 307, 308, 324, 338, 348, 350, 352, 364, 416, 417, 430, 435, 457, 465, 467, 487, 496, 506, 576, 577, 584, 585, 601, 602, 603, 604, 605, 606, 607, 608, 609, 618, 630, 676, 686, 688, 700, 738, 754, 790, 828, 852, 855, 857, 858, 859, 868, 873, 874, 891, 892, 909, 911, 925, 942, 948, 955, 956, 957, 1021, 1024, 1042, 1068, 1078, 1103, 1110, 1118, 1190, 1215, 1255, 1265, 1267, 1279, 1312, 1315, 1318, 1337, 1346, 1349, 1365, 1366, 1368], "onlin": [217, 338, 1103, 1337], "ont": [686, 688, 1265, 1267], "onto": 168, "oof": [701, 1280, 1355, 1360], "op": [20, 138, 139, 172, 267, 338, 584, 631, 828, 876, 889, 942, 1337], "opac": [338, 341, 1337, 1342], "opaqu": 925, "open": [40, 136, 138, 139, 140, 143, 144, 145, 146, 147, 148, 149, 150, 151, 208, 338, 430, 828, 855, 942], "openoffic": 149, "openpyxl": [143, 160], "oper": [4, 40, 50, 59, 91, 100, 103, 110, 117, 123, 125, 126, 127, 128, 129, 135, 138, 140, 202, 217, 220, 222, 228, 234, 246, 248, 255, 259, 261, 262, 263, 266, 268, 270, 273, 274, 279, 281, 290, 296, 297, 302, 305, 306, 316, 317, 338, 347, 348, 351, 382, 422, 423, 424, 425, 426, 427, 481, 482, 497, 499, 502, 504, 528, 556, 557, 558, 559, 560, 561, 568, 575, 594, 597, 599, 600, 601, 602, 604, 606, 608, 609, 612, 613, 614, 617, 618, 623, 630, 659, 662, 728, 736, 743, 744, 746, 757, 758, 762, 774, 807, 818, 828, 840, 848, 852, 854, 859, 864, 867, 872, 882, 883, 892, 896, 897, 901, 908, 911, 918, 942, 986, 1025, 1030, 1031, 1032, 1033, 1034, 1035, 1093, 1094, 1103, 1113, 1115, 1142, 1170, 1171, 1172, 1173, 1174, 1175, 1189, 1201, 1202, 1215, 1235, 1241, 1277, 1312, 1317, 1318, 1319, 1337, 1356, 1364, 1365], "operand": [736, 828], "opp": 948, "oppos": 754, "opposit": [281, 338, 382, 561, 662, 828, 897, 942, 986, 1175, 1241, 1337], "opt": [300, 338], "optim": [46, 47, 48, 49, 57, 58, 150, 152, 155, 156, 157, 241, 246, 262, 266, 272, 303, 338, 845, 849, 850, 860, 878, 887, 898, 906, 915, 916, 925, 942, 1020, 1236, 1337], "optimis": [140, 248, 273, 324, 338, 942, 946, 1190, 1238, 1337, 1368], "optimist": 14, "option": [2, 3, 4, 5, 6, 7, 30, 33, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 51, 67, 69, 138, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 158, 160, 165, 166, 167, 168, 171, 172, 173, 182, 183, 208, 224, 229, 239, 244, 254, 278, 285, 291, 302, 305, 307, 338, 395, 430, 435, 526, 584, 585, 591, 618, 639, 640, 642, 644, 646, 648, 651, 653, 655, 668, 676, 686, 688, 700, 702, 740, 810, 818, 828, 840, 849, 855, 868, 872, 873, 882, 895, 901, 908, 909, 917, 942, 948, 998, 1042, 1140, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1248, 1255, 1265, 1267, 1279, 1281, 1314, 1326, 1337, 1355, 1360], "optional_memb": [518, 828, 1130, 1337], "or_": 828, "oracl": 141, "orang": [204, 319, 320, 322, 323, 325, 326, 328, 330, 331, 338, 408, 735, 828, 920, 921, 923, 924, 926, 927, 929, 931, 932, 1360], "orc": 185, "order": [10, 40, 46, 47, 48, 49, 51, 57, 63, 126, 138, 140, 159, 161, 162, 163, 164, 199, 203, 204, 211, 212, 213, 220, 228, 229, 243, 245, 255, 261, 262, 263, 270, 272, 274, 275, 279, 284, 295, 296, 301, 303, 308, 338, 363, 383, 388, 407, 408, 433, 434, 493, 539, 556, 563, 569, 618, 623, 628, 638, 659, 660, 661, 670, 671, 701, 708, 709, 710, 711, 725, 734, 735, 737, 738, 740, 752, 807, 818, 828, 839, 844, 852, 857, 858, 859, 864, 867, 868, 872, 874, 882, 883, 891, 892, 896, 900, 901, 905, 906, 942, 946, 947, 948, 967, 987, 992, 1010, 1019, 1040, 1041, 1107, 1137, 1153, 1170, 1177, 1183, 1209, 1213, 1220, 1235, 1237, 1239, 1250, 1280, 1305, 1322, 1323, 1324, 1326, 1337, 1346, 1349, 1355, 1364, 1365, 1368], "order_bi": [618, 828], "ordin": [458, 628, 828, 1069, 1213, 1337, 1366], "ordinal_dai": [443, 477], "org": [20, 41, 42, 124, 140, 141, 144, 146, 194, 195, 196, 205, 338, 592, 695, 898, 942, 950, 951, 1274], "orient": [52, 54, 98, 127, 129, 259, 338, 942, 1346], "origin": [51, 138, 139, 152, 211, 212, 220, 303, 338, 433, 434, 461, 462, 475, 493, 539, 577, 601, 618, 630, 631, 632, 633, 634, 636, 677, 683, 692, 750, 751, 828, 857, 858, 864, 906, 942, 1040, 1041, 1072, 1073, 1086, 1107, 1153, 1217, 1218, 1219, 1221, 1256, 1262, 1271, 1337], "orjson": 134, "orld": 1287, "orson": 134, "other": [1, 20, 36, 40, 45, 58, 59, 137, 138, 139, 140, 143, 152, 157, 161, 162, 163, 164, 212, 214, 217, 220, 243, 244, 245, 254, 255, 263, 271, 273, 276, 277, 300, 305, 307, 310, 312, 313, 336, 338, 341, 347, 351, 353, 363, 364, 417, 432, 467, 481, 482, 493, 497, 502, 504, 514, 518, 528, 535, 557, 558, 559, 560, 575, 581, 587, 597, 599, 612, 613, 617, 632, 633, 664, 671, 700, 727, 728, 733, 736, 743, 745, 747, 752, 755, 756, 757, 758, 766, 773, 792, 794, 797, 806, 810, 812, 828, 840, 850, 864, 872, 873, 874, 882, 883, 893, 894, 908, 909, 912, 913, 914, 942, 948, 957, 1024, 1039, 1078, 1093, 1094, 1095, 1103, 1113, 1115, 1130, 1142, 1149, 1171, 1172, 1173, 1174, 1189, 1201, 1202, 1217, 1218, 1320, 1328, 1336, 1337, 1342, 1352, 1365], "other_df": [243, 338], "other_lf": [872, 942], "otherwis": [38, 140, 143, 150, 155, 167, 170, 174, 224, 248, 255, 273, 276, 295, 300, 324, 338, 387, 392, 413, 417, 428, 483, 484, 485, 486, 568, 577, 588, 618, 622, 623, 625, 630, 665, 675, 678, 682, 687, 689, 694, 698, 699, 702, 713, 740, 744, 773, 776, 785, 790, 818, 828, 883, 893, 925, 942, 947, 991, 995, 1016, 1024, 1036, 1097, 1098, 1099, 1100, 1182, 1190, 1209, 1211, 1215, 1236, 1238, 1245, 1254, 1257, 1261, 1266, 1268, 1273, 1277, 1278, 1281, 1292, 1326, 1337, 1357], "our": 197, "out": [8, 14, 38, 46, 47, 48, 49, 105, 130, 157, 160, 168, 172, 220, 270, 273, 338, 374, 392, 543, 545, 675, 678, 687, 818, 864, 891, 942, 978, 995, 1157, 1159, 1254, 1257, 1266, 1363], "outcom": [618, 828], "outer": [51, 307, 338, 909, 942], "outermost": 50, "outlin": 7, "output": [0, 8, 30, 37, 40, 41, 42, 43, 44, 45, 46, 199, 207, 241, 248, 252, 255, 261, 263, 272, 276, 278, 288, 301, 308, 312, 338, 350, 352, 375, 407, 408, 413, 428, 467, 547, 568, 576, 577, 588, 591, 602, 625, 632, 674, 690, 694, 734, 735, 740, 744, 745, 746, 747, 757, 758, 759, 787, 789, 790, 794, 812, 828, 840, 844, 854, 860, 878, 882, 883, 893, 895, 905, 912, 925, 942, 955, 956, 979, 1010, 1016, 1036, 1078, 1161, 1190, 1211, 1253, 1269, 1273, 1322, 1326, 1337], "output_path": [592, 898, 942], "outsid": [417, 828, 1024, 1337], "over": [59, 132, 133, 138, 139, 140, 143, 149, 152, 157, 168, 169, 199, 217, 240, 241, 242, 248, 255, 271, 272, 273, 285, 301, 302, 316, 324, 338, 342, 407, 408, 427, 430, 484, 492, 576, 577, 588, 590, 591, 592, 593, 594, 602, 603, 628, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 734, 735, 763, 764, 777, 789, 790, 802, 807, 828, 844, 849, 883, 901, 905, 917, 925, 939, 942, 948, 1010, 1035, 1098, 1103, 1190, 1224, 1225, 1227, 1231, 1322, 1337, 1365], "overflow": [409, 425, 426, 717, 729, 828, 846, 942, 1011, 1033, 1034, 1296, 1308, 1337], "overhead": [50, 91, 152, 155, 156, 157], "overlap": [677, 684, 686, 688, 1256, 1263, 1265, 1267], "overrid": [1, 40, 123, 125, 126, 127, 128, 129, 138, 140, 141, 143, 147, 148, 149, 156, 165, 166, 172, 174, 338, 942], "overridden": [40, 123, 125, 127, 129, 147, 148, 156, 174, 338, 942], "overview": [338, 828, 840, 942, 1337, 1364, 1368], "overwrit": [14, 38, 39, 123, 125, 126, 127, 129, 134, 138, 139, 147, 148, 152, 156, 196, 307, 338, 349, 727, 828, 909, 942], "overwrite_schema": [39, 338], "ow": 707, "own": [818, 1318, 1337, 1368], "p": [53, 262, 338, 622, 810, 828, 886, 942, 948, 1266, 1268, 1350], "p13dt14h0": 467, "p1dt42": 467, "pa": [39, 123, 158, 338, 807], "pa_tabl": 807, "pacif": [436, 1043], "pack": [259, 338], "packag": [32, 33, 34, 135, 140, 338, 342, 435, 754, 1042], "pad": [696, 697, 722, 1275, 1276, 1301], "pad_end": [697, 1276], "pad_start": [696, 722, 1275, 1301], "page": [45, 49, 144, 150, 155, 157, 338, 828, 840, 942, 1337, 1364], "pair": [123, 125, 126, 127, 129, 147, 148, 156, 267, 338, 889, 942, 1368], "pairwis": [205, 338], "panda": [38, 124, 128, 134, 160, 220, 229, 297, 303, 305, 338, 454, 455, 733, 807, 828, 864, 868, 906, 908, 942, 1065, 1066, 1319, 1320, 1337, 1347, 1349, 1365], "pandas_df": 1365, "pane": [40, 338], "panic": 106, "pap": 1268, "papa": 689, "papai": [689, 1268], "papaya": [689, 702, 713, 1268, 1281, 1292], "parallel": [57, 59, 132, 141, 150, 157, 229, 244, 246, 262, 277, 313, 338, 427, 540, 740, 818, 828, 840, 868, 872, 873, 894, 913, 925, 942, 1035, 1154, 1326, 1337], "parallelis": [248, 324, 338, 1190, 1337], "parallelstrategi": [150, 157], "param": [40, 123, 125, 126, 127, 129, 138, 139, 147, 148, 152, 156, 167, 168, 172, 271, 338, 942], "paramet": [2, 3, 5, 6, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 25, 26, 27, 28, 30, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 57, 58, 59, 60, 63, 66, 67, 68, 69, 70, 78, 82, 92, 98, 107, 123, 124, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 177, 178, 180, 181, 182, 196, 197, 199, 200, 201, 205, 207, 208, 209, 210, 211, 212, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 227, 228, 229, 230, 231, 233, 234, 239, 241, 242, 243, 244, 245, 247, 248, 252, 254, 255, 258, 259, 261, 262, 263, 265, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 283, 284, 285, 286, 288, 289, 290, 291, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 317, 321, 323, 324, 330, 332, 338, 347, 349, 350, 351, 352, 353, 363, 370, 371, 374, 375, 382, 383, 387, 388, 390, 391, 392, 393, 394, 395, 396, 397, 407, 408, 409, 410, 414, 417, 422, 423, 424, 425, 426, 427, 428, 430, 431, 432, 435, 437, 439, 440, 445, 457, 460, 461, 462, 463, 464, 466, 467, 475, 478, 480, 481, 482, 483, 484, 485, 486, 487, 490, 491, 492, 493, 497, 498, 499, 500, 501, 502, 503, 504, 506, 507, 508, 510, 512, 513, 514, 518, 526, 528, 530, 535, 536, 537, 538, 540, 543, 544, 545, 546, 547, 556, 557, 558, 559, 560, 561, 562, 563, 564, 566, 567, 568, 569, 570, 571, 575, 576, 577, 584, 585, 591, 592, 593, 597, 599, 602, 603, 604, 605, 606, 607, 612, 613, 617, 618, 619, 622, 623, 625, 626, 628, 630, 631, 632, 633, 634, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 664, 668, 669, 670, 671, 673, 674, 675, 676, 677, 678, 679, 680, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 695, 696, 697, 698, 699, 700, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 719, 722, 723, 725, 727, 728, 730, 734, 735, 736, 737, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 844, 846, 847, 849, 850, 854, 855, 856, 857, 858, 860, 861, 862, 863, 864, 866, 867, 868, 869, 872, 873, 874, 877, 878, 882, 883, 886, 887, 888, 889, 891, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 904, 905, 906, 907, 908, 909, 910, 912, 913, 914, 915, 916, 917, 918, 922, 924, 925, 931, 933, 942, 947, 948, 952, 954, 955, 956, 957, 967, 974, 975, 978, 979, 986, 987, 991, 992, 994, 995, 996, 997, 998, 1000, 1010, 1011, 1012, 1017, 1023, 1024, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1042, 1044, 1046, 1047, 1052, 1068, 1071, 1072, 1073, 1074, 1075, 1077, 1078, 1086, 1089, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1107, 1111, 1112, 1118, 1119, 1120, 1122, 1123, 1124, 1125, 1137, 1140, 1144, 1149, 1150, 1151, 1152, 1154, 1157, 1158, 1159, 1160, 1161, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1180, 1181, 1182, 1183, 1190, 1202, 1206, 1209, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1241, 1244, 1248, 1249, 1250, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1274, 1275, 1276, 1277, 1278, 1279, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1298, 1301, 1302, 1305, 1309, 1312, 1313, 1314, 1315, 1316, 1318, 1319, 1322, 1323, 1326, 1327, 1328, 1337, 1346, 1347, 1348, 1349, 1350, 1352, 1357, 1360, 1365], "parameteris": 140, "parametr": 840, "paramount": [878, 942], "parent": [40, 70, 222, 338], "parenthes": 18, "parquet": [45, 49, 150, 151, 157, 185, 338, 840, 942], "parquetcompress": [45, 338], "pars": [37, 46, 137, 138, 139, 141, 143, 148, 149, 150, 152, 155, 156, 157, 199, 228, 276, 277, 281, 284, 301, 312, 313, 317, 338, 408, 417, 514, 618, 632, 633, 671, 691, 700, 716, 717, 727, 735, 745, 747, 752, 755, 756, 757, 758, 766, 779, 792, 794, 797, 806, 808, 810, 812, 818, 828, 844, 867, 893, 894, 897, 900, 905, 912, 913, 918, 942, 1024, 1125, 1217, 1218, 1241, 1270, 1295, 1296, 1337, 1346], "parseerror": [717, 1296], "parser": [138, 143], "part": [123, 143, 192, 197, 295, 300, 338, 618, 684, 704, 705, 828, 860, 887, 898, 914, 942, 952, 1263, 1283, 1284, 1361], "parti": [576, 828], "partial": [126, 138, 152, 338, 942], "particip": [40, 338], "particular": [39, 138, 143, 144, 146, 199, 215, 301, 338, 407, 408, 734, 735, 828, 844, 905, 942, 1010, 1096, 1322, 1337], "partit": [45, 141, 150, 153, 155, 157, 158, 242, 261, 338, 618, 828], "partition_bi": [45, 139, 242, 338, 618, 828], "partition_chunk_size_byt": [45, 338], "partition_col": [45, 141, 338], "partition_df": 139, "partition_index": 184, "partition_num": 141, "partition_on": 141, "partition_rang": 141, "partitioned_object": [45, 338], "pass": [32, 33, 34, 36, 38, 39, 40, 45, 51, 98, 125, 134, 135, 137, 140, 141, 143, 150, 152, 155, 158, 161, 163, 166, 168, 170, 172, 199, 205, 209, 228, 229, 231, 244, 247, 261, 262, 263, 267, 270, 276, 281, 284, 289, 297, 300, 301, 308, 312, 317, 338, 382, 408, 435, 445, 457, 461, 467, 490, 511, 561, 576, 577, 592, 618, 622, 632, 633, 638, 662, 671, 700, 707, 708, 709, 735, 744, 752, 754, 779, 810, 818, 824, 828, 844, 856, 867, 868, 870, 873, 878, 886, 889, 891, 893, 897, 898, 900, 905, 912, 917, 918, 925, 942, 947, 986, 1042, 1052, 1072, 1078, 1104, 1119, 1144, 1175, 1190, 1217, 1218, 1241, 1279, 1286, 1287, 1288, 1309, 1319, 1337, 1350, 1365], "pass_nam": [577, 828], "pass_name_to_appli": [135, 828], "password": [138, 141, 144, 146], "past": [36, 338, 878, 942], "pat": [687, 1266], "patch": 69, "path": [3, 6, 35, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 135, 136, 138, 139, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 208, 278, 338, 430, 591, 592, 595, 661, 828, 855, 895, 898, 942, 946, 1239, 1271, 1337, 1368], "pathlib": [35, 37, 41, 42, 45, 152, 338], "pattern": [94, 138, 139, 143, 152, 155, 156, 157, 241, 338, 410, 414, 586, 675, 676, 677, 680, 683, 684, 685, 686, 687, 688, 698, 699, 700, 706, 925, 948, 1012, 1017, 1236, 1238, 1254, 1255, 1256, 1259, 1262, 1263, 1264, 1265, 1266, 1267, 1277, 1278, 1279, 1285, 1337, 1360], "paya": 713, "pct": 168, "pct_chang": [828, 1337], "pd": [124, 128, 733, 807, 828, 1319, 1320, 1337, 1347, 1365], "pd_df": 128, "pd_frame": 807, "pd_seri": 128, "pdsh": [132, 139], "pea": 689, "peak": [272, 338, 620, 621, 828, 1207, 1208, 1337], "peak_max": [828, 1337], "peak_min": [828, 1337], "pear": [689, 702, 713, 1268, 1281, 1292], "pearson": [205, 338, 526, 668, 759, 828, 1140, 1248, 1337], "penalti": [712, 714, 715, 1291, 1293, 1294], "per": [14, 37, 40, 46, 135, 143, 166, 168, 199, 227, 259, 260, 263, 277, 284, 301, 313, 327, 329, 330, 338, 374, 408, 540, 543, 545, 576, 577, 601, 602, 604, 606, 608, 609, 671, 735, 740, 752, 828, 844, 894, 900, 905, 913, 928, 930, 931, 942, 978, 1154, 1157, 1159, 1326, 1337], "percent": [619, 828, 1206, 1337], "percentag": [165, 168, 172, 619, 828, 1206, 1337], "percentil": [207, 338, 854, 942, 1037, 1337], "perform": [38, 45, 47, 49, 51, 96, 101, 103, 108, 110, 117, 124, 138, 139, 140, 144, 148, 150, 152, 155, 156, 157, 196, 220, 228, 229, 243, 244, 245, 248, 266, 270, 272, 273, 296, 324, 338, 398, 403, 406, 412, 413, 497, 568, 576, 577, 618, 638, 676, 686, 688, 693, 694, 700, 712, 714, 715, 828, 864, 868, 872, 873, 874, 891, 900, 915, 916, 942, 1001, 1006, 1009, 1015, 1016, 1190, 1255, 1265, 1267, 1272, 1273, 1279, 1291, 1293, 1294, 1318, 1337], "perhap": [302, 338], "period": [138, 139, 152, 229, 270, 338, 462, 475, 483, 485, 486, 619, 638, 768, 769, 771, 772, 815, 816, 828, 868, 891, 942, 1073, 1086, 1097, 1099, 1100, 1206, 1337], "persist": 1352, "phase": [38, 306, 338], "philadelphia": [698, 699], "phone": [720, 1299], "physic": [50, 63, 91, 138, 139, 244, 263, 338, 733, 828, 845, 872, 873, 942, 1018, 1320, 1337], "pi": [10, 429, 828, 1026, 1028, 1246, 1310, 1337, 1358, 1362], "pick": [169, 818], "pickl": [430, 828, 855, 942], "pip": [435, 754, 1042], "pipe": [338, 828, 942], "pipelin": [143, 300, 338], "pitfal": 108, "pivot": [306, 338, 948], "pivot_long": [305, 338, 908, 942], "pivot_wid": [263, 338], "pivotagg": [263, 338], "pixel": [40, 338], "pk": [480, 828, 1092, 1337], "pl": [1, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 60, 69, 78, 82, 90, 91, 95, 98, 99, 100, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 134, 138, 139, 140, 141, 142, 143, 144, 147, 148, 149, 152, 153, 154, 157, 158, 160, 161, 162, 163, 164, 165, 166, 167, 168, 172, 174, 192, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 278, 280, 281, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 843, 844, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 895, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 952, 953, 954, 955, 956, 957, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1109, 1110, 1111, 1112, 1114, 1116, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337, 1342, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1366, 1368], "pl_frame": 807, "place": [10, 11, 37, 46, 192, 210, 217, 233, 234, 263, 268, 273, 284, 310, 338, 342, 363, 375, 383, 547, 563, 670, 671, 752, 828, 900, 942, 957, 967, 979, 987, 1103, 1161, 1177, 1214, 1250, 1337], "placehold": 778, "plai": [12, 758], "plain": [860, 942], "plan": [244, 246, 338, 430, 828, 845, 849, 855, 860, 872, 873, 895, 898, 942, 1367], "plane": [750, 751], "platform": 160, "ple": 1360, "pleas": [128, 140, 141, 220, 229, 254, 338, 342, 484, 760, 773, 828, 864, 868, 882, 942, 1098, 1337], "plenti": 948, "plot": [338, 887, 898, 942, 1337], "plu": [428, 573, 828, 1036, 1187, 1211, 1337, 1359], "plugin": [0, 828, 840], "plugin_path": 135, "point": [10, 11, 31, 32, 33, 34, 37, 39, 40, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 71, 72, 73, 133, 134, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 211, 218, 229, 245, 246, 285, 295, 300, 307, 338, 341, 342, 416, 427, 428, 433, 462, 463, 491, 496, 497, 508, 521, 522, 556, 577, 625, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 657, 659, 756, 787, 828, 849, 850, 857, 860, 862, 868, 874, 878, 889, 901, 909, 942, 1019, 1021, 1035, 1036, 1040, 1073, 1074, 1105, 1110, 1120, 1170, 1211, 1223, 1226, 1228, 1229, 1233, 1235, 1316, 1321, 1337, 1342, 1365], "poison": [610, 611, 828, 1199, 1200, 1337], "pola": 338, "polar": [1, 190, 338, 341, 342, 827, 828, 834, 840, 942, 946, 947, 948, 1337, 1341, 1342, 1364, 1365, 1367], "polars_df": 1365, "polars_file_cache_ttl": [148, 152, 155, 156], "polars_hypothesis_profil": [171, 173], "polars_max_thread": 174, "polars_seri": 1365, "polars_verbos": [849, 942], "polarsdatafram": 196, "polarsdataset": [300, 338], "polarsdatatyp": [60, 70, 78, 138, 139, 152, 165, 166, 167, 168, 169, 172, 200, 248, 295, 300, 338, 395, 409, 487, 576, 577, 632, 633, 691, 775, 788, 789, 790, 800, 803, 819, 824, 828, 846, 942, 948, 998, 1011, 1190, 1217, 1218, 1270, 1337], "polarsintegertyp": [749, 783, 784], "polarstemporaltyp": [712, 1291], "polarstyp": 59, "pool": [14, 58, 174, 175, 850, 942], "poor": 140, "pop2": [244, 338, 873, 942], "popul": [244, 338, 873, 942], "port": [38, 138, 140, 141, 144, 146, 338], "portion": 1360, "pos_a": 1360, "posit": [40, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 184, 197, 209, 216, 228, 261, 276, 277, 281, 284, 304, 312, 313, 317, 338, 382, 483, 485, 486, 487, 561, 618, 623, 625, 662, 671, 685, 698, 699, 717, 727, 750, 751, 752, 755, 756, 757, 758, 775, 806, 810, 824, 828, 856, 861, 867, 893, 894, 897, 900, 907, 912, 913, 918, 942, 948, 986, 1097, 1099, 1100, 1175, 1209, 1211, 1241, 1264, 1296, 1337, 1366], "position": 1337, "possibl": [40, 45, 49, 98, 100, 125, 126, 129, 138, 143, 165, 168, 172, 228, 241, 248, 272, 303, 324, 338, 574, 577, 588, 639, 705, 739, 828, 849, 867, 900, 906, 942, 1190, 1223, 1284, 1337], "post": [51, 69], "postgresql": [38, 140, 141, 338, 618, 828, 1363], "potenti": [108, 110, 135, 152, 155, 156, 241, 271, 273, 338, 601, 698, 699, 852, 854, 859, 892, 911, 942, 1277, 1278], "pow": [828, 1337, 1358], "pow_n": 53, "power": [808, 1209, 1337, 1359], "powersofn": 53, "pre": [568, 577, 625, 800, 803, 819, 828, 1211, 1337], "preced": [168, 948], "precis": [10, 11, 37, 40, 46, 67, 140, 241, 272, 273, 292, 295, 300, 338, 437, 716, 787, 942, 948, 1044, 1295], "predefin": [263, 338], "predic": [39, 46, 47, 48, 49, 57, 58, 133, 152, 155, 156, 157, 158, 200, 220, 239, 244, 245, 271, 338, 409, 493, 742, 777, 818, 828, 849, 850, 860, 864, 873, 874, 878, 887, 889, 898, 915, 916, 942, 1107, 1236, 1238, 1337], "predicate_pushdown": [46, 47, 48, 49, 57, 58, 849, 850, 860, 878, 887, 898, 942], "predict": [266, 308, 338], "prefer": [138, 139, 143, 152, 173, 199, 217, 241, 248, 271, 272, 301, 324, 338, 407, 408, 487, 577, 734, 735, 828, 844, 905, 942, 946, 1010, 1103, 1190, 1322, 1337, 1347, 1368], "prefilt": 157, "prefix": [39, 138, 139, 152, 192, 338, 349, 397, 414, 467, 586, 602, 605, 606, 608, 609, 706, 709, 710, 722, 828, 948, 1000, 1017, 1285, 1289, 1301], "prefix_": 605, "prefix_a": 605, "prefix_b": 605, "prefix_field": [603, 607], "presenc": [776, 785, 948], "present": [126, 168, 224, 338, 518, 592, 708, 709, 828, 898, 942], "preserv": [211, 212, 220, 228, 243, 245, 248, 296, 297, 338, 433, 434, 435, 454, 455, 493, 539, 618, 632, 665, 682, 828, 857, 858, 864, 872, 874, 942, 1040, 1041, 1042, 1107, 1153, 1217, 1245, 1261, 1319, 1337], "pressur": [49, 138, 139, 148, 150, 152, 156, 157, 663, 828, 942, 1242, 1337], "presum": [576, 828], "prev_pow2": 53, "prevent": [296, 338, 349, 425, 426, 601, 729, 828, 942, 1033, 1034, 1308, 1337], "preview": [227, 338], "previou": [53, 192, 338, 341, 435, 601, 602, 604, 606, 608, 609, 619, 725, 828, 1042, 1206, 1337, 1342], "previous": [2, 3], "price": [338, 341, 1368], "primari": [143, 946, 1365, 1368], "primarili": 1, "primit": [39, 338, 518, 828], "print": [9, 10, 11, 12, 13, 15, 16, 17, 19, 20, 25, 27, 28, 139, 160, 161, 163, 213, 227, 228, 242, 246, 294, 316, 338, 511, 593, 768, 771, 828, 849, 870, 942, 948, 1130, 1315, 1337, 1368], "prior": [128, 338, 341, 1337, 1342], "prioriti": 169, "probabl": [480, 625, 828, 1092, 1211, 1337], "process": [14, 37, 46, 47, 48, 49, 57, 58, 138, 139, 140, 152, 174, 272, 338, 849, 850, 942], "process_index": [295, 338], "produc": [2, 3, 133, 168, 172, 200, 243, 338, 371, 409, 537, 588, 787, 789, 828, 872, 878, 942, 975, 1151], "product": [51, 205, 243, 338, 425, 432, 828, 872, 942, 1033, 1039, 1337], "profil": [32, 171, 173, 849, 942], "profile_nam": 32, "programmat": [207, 338, 854, 942], "progress": [67, 69, 73], "project": [46, 47, 48, 49, 57, 58, 133, 152, 154, 155, 156, 157, 670, 671, 828, 849, 850, 860, 878, 887, 889, 898, 942], "projection_pushdown": [46, 47, 48, 49, 57, 58, 849, 850, 860, 878, 887, 898, 942], "prompt": 130, "propag": [375, 482, 547, 610, 611, 613, 674, 690, 757, 758, 828, 979, 1094, 1161, 1199, 1200, 1202, 1253, 1269, 1337], "propagate_nan": 759, "proper": [245, 338, 874, 942], "properti": [39, 40, 183, 186, 187, 196, 203, 204, 213, 221, 232, 275, 280, 311, 315, 338, 341, 342, 851, 852, 859, 892, 911, 916, 942, 947, 948, 1091, 1109, 1198, 1240, 1337, 1342, 1368], "proport": [740, 828, 1326, 1337], "protocol": [39, 124, 140, 141, 196, 338], "prototyp": 824, "provid": [31, 32, 33, 34, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 138, 139, 141, 142, 143, 148, 150, 152, 153, 154, 155, 156, 157, 168, 172, 182, 220, 224, 239, 285, 295, 338, 341, 392, 393, 467, 487, 508, 568, 576, 577, 678, 679, 683, 691, 692, 708, 709, 710, 711, 779, 810, 828, 840, 849, 864, 901, 917, 939, 942, 995, 996, 1078, 1120, 1139, 1190, 1257, 1258, 1262, 1270, 1271, 1316, 1337, 1350, 1357, 1360, 1365, 1368], "provis": 841, "prune": [150, 155, 157, 878, 942], "pt0": 467, "public": [141, 338, 828, 840, 942, 1337, 1364], "pulp": 1346, "pure": [40, 338], "purpos": [600, 828, 942], "push": [152, 155, 156, 157, 158, 200, 338, 409, 828], "pushdown": [46, 47, 48, 49, 57, 58, 133, 849, 850, 860, 878, 887, 889, 898, 915, 916, 942, 1236, 1238, 1337], "put": [37, 46, 69, 338, 342, 942], "pwd": 140, "py": 154, "pyarrow": [39, 45, 123, 128, 138, 141, 142, 144, 146, 150, 153, 158, 160, 290, 296, 297, 338, 807, 840, 1312, 1318, 1319, 1337, 1347, 1349, 1365], "pyarrow_opt": [45, 142, 150, 153, 338], "pyarrow_t": 1365, "pycapsul": [195, 951], "pycapsuleinterfac": [195, 951], "pydant": 160, "pyiceberg": [154, 160], "pyodbc": [38, 338], "pyodbc_uri": [38, 338], "pyspark": 174, "pytest": [161, 163], "python": [0, 32, 33, 34, 41, 42, 69, 80, 94, 124, 138, 139, 144, 146, 160, 161, 163, 196, 241, 248, 272, 273, 292, 324, 338, 430, 435, 439, 497, 576, 577, 685, 754, 768, 769, 771, 772, 815, 816, 818, 828, 834, 855, 925, 942, 946, 947, 1042, 1046, 1056, 1057, 1058, 1062, 1190, 1264, 1317, 1337, 1341, 1364], "pythondatatyp": [60, 78, 200, 338, 824, 846, 942, 948], "pythonliter": [958, 1001, 1006, 1009, 1108, 1141, 1191, 1192, 1193, 1194, 1236, 1337], "pytorch": [300, 338, 1321, 1337], "q": [273, 338, 810, 1337, 1342, 1350], "q1": [40, 338], "q2": [40, 338], "q3": [40, 338], "q4": [40, 338], "qcut": [428, 828, 1036, 1337], "qhoo": 1368, "qmark": 140, "qqr": 948, "quad": [484, 828, 1098, 1337], "qualifi": [38, 338], "quantifi": [684, 1263], "quantil": [338, 625, 648, 649, 828, 942, 1211, 1228, 1337, 1354], "quantile_cont": 1358, "quantile_disc": 1358, "quarter": [229, 244, 270, 308, 338, 457, 462, 475, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086, 1361], "queri": [46, 47, 48, 49, 57, 58, 140, 141, 144, 152, 155, 156, 157, 217, 246, 262, 285, 338, 568, 576, 577, 692, 807, 828, 849, 850, 860, 887, 898, 901, 915, 916, 917, 925, 934, 942, 1103, 1190, 1271, 1337, 1346, 1347, 1349, 1353, 1364, 1366, 1367], "quick": [824, 1037, 1337, 1368], "quit": [244, 338, 873, 942], "quot": [37, 38, 46, 138, 139, 141, 152, 338, 720, 942, 1299], "quota_project_id": 34, "quote_char": [37, 46, 138, 139, 152, 338, 942], "quote_plu": 141, "quote_styl": [37, 46, 338, 942], "quotes_titl": 720, "quotient": 1359, "r": [138, 139, 152, 338, 583, 622, 677, 682, 683, 684, 685, 698, 699, 828, 948, 1256, 1261, 1262, 1263, 1264, 1277, 1278, 1292, 1350, 1360], "r1": 59, "r2": 59, "r3": 59, "rab": [675, 701, 1254, 1280, 1355], "rad": 1362, "radian": [429, 750, 828, 1358], "radix": [717, 1296], "rai": [750, 751], "raini": [698, 699, 1277, 1278], "rais": [1, 15, 16, 20, 39, 59, 95, 96, 99, 100, 102, 103, 104, 105, 106, 107, 112, 113, 114, 115, 116, 117, 118, 119, 120, 122, 138, 139, 143, 149, 150, 152, 157, 161, 163, 196, 200, 224, 244, 263, 271, 296, 338, 374, 392, 409, 435, 460, 461, 543, 545, 588, 623, 625, 633, 675, 678, 687, 712, 714, 715, 717, 719, 770, 788, 828, 873, 917, 942, 978, 995, 1042, 1071, 1072, 1157, 1159, 1209, 1211, 1218, 1254, 1257, 1266, 1291, 1293, 1294, 1296, 1298, 1318, 1337], "raise_if_empti": [138, 139, 143, 149, 152], "raise_if_undetermin": 588, "raise_on_fail": 917, "raker": 134, "ram": [46, 47, 48, 49, 942], "ran": [135, 828], "random": [40, 41, 144, 159, 166, 230, 274, 338, 506, 556, 628, 659, 664, 740, 828, 840, 1118, 1170, 1213, 1235, 1244, 1326, 1337], "randomli": 167, "rang": [17, 40, 140, 141, 207, 215, 229, 242, 338, 354, 429, 435, 443, 453, 458, 459, 460, 462, 475, 476, 512, 749, 754, 757, 767, 768, 769, 770, 771, 772, 783, 784, 787, 814, 815, 816, 828, 854, 868, 942, 948, 1037, 1042, 1050, 1064, 1069, 1070, 1071, 1073, 1086, 1087, 1096, 1206, 1337, 1360], "rank": [363, 540, 752, 759, 774, 828, 967, 1154, 1337], "rankmethod": [628, 828, 1213, 1337], "rare": [436, 1043], "rather": [244, 338, 499, 576, 593, 625, 637, 722, 828, 873, 942, 1211, 1222, 1301, 1337], "raw": 141, "raw_output": [592, 898, 942], "re": [224, 229, 240, 303, 305, 338, 454, 455, 464, 467, 868, 906, 908, 942, 1065, 1066, 1075, 1078, 1365], "reach": [696, 697, 722, 1275, 1276, 1301], "read": [36, 132, 133, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 182, 208, 217, 338, 341, 430, 499, 818, 828, 855, 942, 1103, 1337, 1342], "read_arrow_batches_from_odbc": 140, "read_clipboard": [36, 338], "read_csv": [137, 143, 152], "read_csv_batch": 132, "read_databas": 141, "read_database_uri": 140, "read_excel": 149, "read_ndjson": 147, "read_od": 143, "read_opt": 143, "read_parquet": 157, "read_tabl": 150, "readabl": 824, "reader": [45, 49, 132, 133, 138, 139, 144, 146, 150, 338, 942], "readi": 935, "readthedoc": [40, 338], "real": [684, 1263], "realli": [427, 676, 700, 828, 1035, 1255, 1279, 1337], "realloc": [148, 152, 155, 156, 217, 338, 1103, 1337], "rearrang": [248, 338], "reason": [174, 207, 338, 568, 576, 828, 854, 942], "receiv": [51, 140, 152, 248, 262, 324, 338, 577, 622, 828, 886, 942, 1368], "recent": [161, 162, 163, 164, 296, 338, 619, 633, 828, 1206, 1218, 1318, 1337, 1349, 1365], "rechunk": [59, 123, 128, 138, 139, 142, 144, 146, 148, 150, 152, 153, 155, 156, 157, 217, 338, 828, 1022, 1103, 1114, 1196, 1337], "recognis": [15, 16, 20, 948], "recommend": [40, 174, 207, 241, 246, 262, 338, 568, 845, 854, 942, 948], "record": [37, 42, 46, 134, 146, 158, 338, 942], "record_batch": [242, 338], "recordbatch": [123, 242, 338, 807, 1347, 1349, 1365], "recurs": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "red": [50, 90, 91, 324, 740, 828, 925, 1326, 1337], "redempt": 1346, "redshift": 141, "redshift_format": 185, "reduc": [49, 138, 139, 148, 150, 152, 155, 156, 157, 272, 325, 326, 328, 331, 338, 663, 764, 777, 828, 926, 927, 929, 932, 942, 1192, 1210, 1242, 1308, 1337], "reduct": [222, 338, 577, 828], "ref": [683, 685, 1262, 1264], "refer": [0, 32, 40, 94, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 205, 208, 338, 342, 430, 464, 467, 628, 683, 698, 699, 712, 714, 715, 719, 828, 855, 942, 1075, 1078, 1213, 1277, 1278, 1291, 1293, 1294, 1298, 1337], "referenc": [40, 338, 576, 698, 699, 725, 828, 1277, 1278, 1347, 1365], "reg": 134, "regard": [138, 759], "regardless": [128, 199, 228, 244, 301, 338, 408, 440, 692, 735, 818, 828, 844, 873, 905, 942, 1047, 1271], "regex": [92, 487, 583, 584, 586, 675, 677, 683, 684, 685, 687, 698, 699, 723, 775, 828, 948, 1254, 1256, 1262, 1263, 1264, 1266, 1277, 1278], "regexp_lik": 1358, "region": [40, 154, 338], "region_nam": 32, "regist": [1, 52, 53, 54, 55, 133, 135, 171, 173, 285, 338, 828, 901, 942, 946, 1346, 1347, 1349, 1350, 1351, 1352, 1365, 1367], "register_dataframe_namespac": [1, 53, 54, 55], "register_expr_namespac": [1, 52, 54, 55], "register_glob": [1348, 1350, 1352, 1365], "register_io_sourc": 946, "register_lazyframe_namespac": [1, 52, 53, 55], "register_mani": [1348, 1349, 1352], "register_plugin": 828, "register_plugin_funct": 828, "register_series_namespac": [1, 52, 53, 54], "registr": [285, 338, 807, 840, 901, 942, 1352, 1365], "regrid": [512, 828], "regular": [131, 241, 271, 272, 308, 315, 338, 487, 675, 676, 677, 681, 683, 684, 685, 686, 687, 688, 698, 699, 700, 754, 775, 824, 828, 916, 942, 948, 1254, 1255, 1256, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1277, 1278, 1279, 1363], "reinterpret": [828, 1337], "rel": [40, 141, 142, 153, 154, 161, 162, 163, 164, 338, 457, 483, 485, 486, 740, 828, 1068, 1097, 1099, 1100, 1326, 1337], "relat": [140, 192, 698, 699, 948, 1277, 1278, 1353], "releas": [58, 243, 338, 577, 828, 850, 872, 942, 1368], "release_year": 1346, "relev": 59, "reli": [243, 338, 872, 942], "reliabl": [90, 91], "remain": [138, 139, 152, 211, 212, 215, 220, 263, 338, 433, 434, 493, 539, 632, 704, 705, 828, 857, 858, 864, 878, 942, 1040, 1041, 1096, 1107, 1153, 1217, 1283, 1284, 1337, 1352], "remaind": [395, 705, 998, 1284, 1359], "remap": 93, "remot": [138, 139, 144, 146], "remov": [4, 138, 139, 152, 196, 209, 293, 338, 487, 602, 707, 708, 709, 710, 711, 775, 828, 856, 942, 1286, 1287, 1288, 1289, 1290, 1313, 1337, 1367], "removes_pronoun": 700, "renam": [1, 126, 138, 139, 175, 228, 276, 277, 312, 313, 317, 319, 338, 349, 499, 594, 595, 601, 602, 603, 604, 606, 608, 609, 725, 727, 806, 810, 828, 867, 893, 894, 912, 913, 918, 920, 942, 954, 1266, 1305, 1314, 1337, 1365], "rename_field": [704, 705, 1283, 1284], "render": [592, 898, 942], "render_as_str": 140, "reoconstruct": [273, 338], "repeat": [144, 155, 629, 631, 800, 819, 828], "repeat_bi": 828, "replac": [38, 39, 138, 139, 152, 218, 219, 268, 302, 305, 312, 313, 338, 341, 439, 461, 491, 576, 577, 633, 699, 700, 715, 828, 862, 908, 912, 913, 942, 1046, 1072, 1105, 1218, 1236, 1238, 1278, 1279, 1294, 1337, 1342, 1358], "replace_al": [633, 698, 828, 1217, 1218, 1277, 1337], "replace_column": 338, "replace_strict": [632, 828, 1217, 1337], "replace_time_zon": [436, 442, 444, 1048, 1049, 1076], "replace_with": [700, 1279], "replic": [733, 828, 1320, 1337], "report": [140, 695, 1274], "repr": [130, 410, 414, 467, 1012, 1017, 1078], "repres": [37, 40, 46, 65, 66, 68, 79, 83, 88, 123, 125, 127, 128, 129, 140, 263, 285, 286, 295, 296, 309, 316, 338, 413, 497, 521, 522, 564, 570, 576, 673, 689, 694, 698, 699, 702, 713, 741, 744, 761, 773, 775, 788, 789, 790, 799, 804, 805, 809, 817, 824, 828, 901, 902, 910, 942, 948, 1016, 1236, 1252, 1268, 1273, 1277, 1278, 1281, 1292, 1318, 1327, 1337, 1365], "represent": [10, 43, 44, 65, 66, 68, 83, 130, 278, 294, 338, 410, 412, 413, 414, 438, 443, 446, 448, 449, 450, 451, 452, 453, 456, 458, 459, 463, 476, 477, 479, 591, 733, 828, 860, 876, 895, 942, 1012, 1015, 1016, 1017, 1018, 1045, 1050, 1053, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1070, 1074, 1087, 1088, 1090, 1315, 1320, 1337, 1356], "request": 34, "requested_schema": [195, 951], "requir": [1, 32, 33, 34, 39, 40, 51, 59, 128, 140, 141, 161, 162, 163, 164, 205, 211, 271, 295, 296, 297, 300, 338, 388, 410, 414, 483, 485, 486, 569, 577, 618, 641, 643, 645, 647, 649, 652, 654, 656, 663, 712, 714, 715, 737, 803, 828, 852, 857, 858, 859, 900, 911, 942, 992, 1095, 1097, 1099, 1100, 1183, 1242, 1277, 1291, 1293, 1294, 1318, 1319, 1323, 1337], "require_al": 948, "rerais": [58, 850, 942], "rerun": [217, 338, 1103, 1337], "resampl": [229, 338, 868, 942], "reset": [4, 192], "reset_index": [128, 229, 338, 868, 942], "reshap": [263, 296, 338, 541, 756, 828, 1155, 1337], "resolv": [439, 568, 851, 852, 859, 892, 911, 942], "resourc": [917, 946], "respect": [40, 138, 152, 338, 676, 686, 688, 700, 948, 1255, 1265, 1267, 1279, 1321, 1337], "respons": [141, 255, 338, 883, 942], "rest": [720, 1299], "restor": [192, 338, 341, 1337, 1342], "restore_default": 192, "restrict": [30, 705, 1284], "result": [13, 37, 43, 44, 45, 46, 47, 48, 49, 51, 59, 127, 128, 129, 140, 141, 143, 152, 155, 157, 158, 172, 217, 220, 229, 230, 243, 244, 245, 259, 263, 270, 273, 278, 279, 281, 295, 296, 297, 308, 315, 317, 323, 338, 435, 462, 464, 467, 475, 483, 484, 485, 486, 490, 497, 506, 514, 526, 567, 568, 576, 577, 591, 618, 623, 625, 632, 633, 634, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 661, 662, 682, 699, 703, 704, 715, 736, 740, 763, 764, 768, 770, 771, 772, 773, 788, 789, 800, 803, 804, 805, 807, 819, 828, 845, 849, 854, 864, 868, 872, 873, 874, 878, 887, 891, 895, 896, 897, 916, 918, 924, 935, 936, 942, 948, 957, 1073, 1075, 1078, 1086, 1097, 1099, 1100, 1103, 1104, 1118, 1125, 1140, 1181, 1190, 1209, 1211, 1217, 1218, 1219, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1239, 1241, 1261, 1282, 1283, 1294, 1318, 1319, 1326, 1337, 1347, 1353, 1365, 1366, 1368], "resultset": 140, "retri": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 155, 156, 157, 182, 338, 942], "retriev": [177, 178, 182, 224, 295, 338, 368, 369, 533, 534, 723, 799, 972, 973, 1147, 1148, 1302, 1316, 1337, 1353], "return": [1, 5, 6, 30, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 101, 104, 112, 120, 123, 125, 126, 127, 128, 129, 131, 132, 133, 135, 136, 138, 139, 140, 141, 142, 143, 144, 145, 146, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 174, 175, 182, 194, 197, 199, 201, 204, 205, 206, 210, 213, 215, 216, 217, 218, 219, 221, 222, 223, 224, 227, 228, 229, 231, 232, 233, 237, 239, 240, 241, 242, 243, 246, 247, 248, 250, 252, 257, 258, 259, 261, 262, 263, 267, 270, 271, 272, 273, 274, 278, 285, 288, 289, 295, 296, 297, 300, 301, 302, 303, 308, 311, 312, 313, 319, 321, 323, 324, 327, 332, 338, 350, 352, 355, 356, 357, 358, 359, 360, 363, 364, 368, 369, 370, 372, 374, 375, 386, 391, 392, 393, 394, 395, 396, 397, 407, 408, 412, 413, 418, 419, 420, 421, 422, 428, 429, 435, 436, 438, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 462, 463, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 479, 484, 489, 497, 500, 501, 503, 507, 508, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 529, 530, 533, 534, 536, 541, 543, 545, 546, 547, 549, 556, 566, 567, 574, 576, 577, 589, 591, 592, 593, 598, 622, 625, 627, 631, 632, 633, 634, 636, 637, 659, 660, 665, 666, 667, 674, 675, 677, 678, 679, 681, 682, 683, 684, 685, 687, 688, 689, 690, 692, 693, 694, 695, 696, 697, 701, 702, 703, 704, 705, 713, 717, 722, 730, 731, 732, 734, 735, 736, 738, 739, 740, 743, 744, 749, 750, 751, 752, 753, 754, 760, 762, 767, 768, 769, 770, 771, 772, 773, 776, 779, 781, 783, 784, 785, 786, 787, 788, 789, 790, 800, 803, 806, 807, 810, 813, 814, 815, 816, 818, 819, 828, 844, 847, 849, 850, 852, 853, 854, 859, 860, 866, 868, 869, 872, 876, 877, 878, 886, 887, 889, 891, 895, 898, 904, 905, 906, 911, 912, 913, 920, 922, 924, 928, 933, 935, 942, 947, 948, 950, 952, 955, 956, 957, 965, 966, 968, 969, 970, 971, 972, 973, 974, 976, 978, 979, 990, 992, 994, 995, 996, 998, 999, 1010, 1014, 1015, 1016, 1023, 1029, 1030, 1036, 1037, 1042, 1043, 1045, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1073, 1074, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1090, 1096, 1098, 1102, 1103, 1108, 1112, 1119, 1120, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1141, 1143, 1144, 1145, 1146, 1147, 1148, 1150, 1155, 1157, 1159, 1160, 1161, 1163, 1170, 1180, 1181, 1188, 1190, 1195, 1204, 1211, 1217, 1218, 1219, 1220, 1221, 1222, 1235, 1237, 1245, 1253, 1254, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1266, 1267, 1268, 1269, 1271, 1272, 1273, 1274, 1275, 1276, 1280, 1281, 1282, 1283, 1284, 1292, 1296, 1301, 1309, 1312, 1319, 1322, 1324, 1325, 1326, 1328, 1337, 1346, 1347, 1351, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1363, 1365, 1366, 1367, 1368], "return_as_str": [227, 338, 593], "return_dtyp": [40, 248, 338, 576, 577, 632, 633, 743, 789, 790, 828, 1190, 1217, 1218, 1337], "return_typ": [295, 300, 338], "returns_scalar": [135, 576, 577, 790, 828], "reus": [57, 58, 192, 849, 850, 860, 887, 898, 942], "reusabl": 192, "rev": [245, 338, 874, 942], "revers": [199, 215, 301, 338, 408, 422, 423, 424, 425, 426, 602, 604, 606, 735, 756, 762, 828, 844, 905, 942, 1030, 1031, 1032, 1033, 1034, 1337, 1355, 1358], "reverse_": 604, "reverse_a": 604, "reverse_b": 604, "revert": [7, 9, 10], "rhap": [686, 688, 1267], "rhapsodi": [686, 688, 1267], "right": [9, 10, 15, 16, 18, 27, 40, 67, 138, 139, 161, 162, 163, 164, 229, 243, 244, 270, 307, 338, 428, 483, 484, 485, 486, 514, 557, 558, 559, 560, 625, 638, 641, 643, 645, 647, 649, 652, 654, 656, 660, 668, 755, 768, 769, 771, 772, 787, 815, 816, 828, 868, 872, 873, 891, 909, 942, 1036, 1097, 1098, 1099, 1100, 1125, 1171, 1172, 1173, 1174, 1211, 1237, 1248, 1337, 1353, 1358], "right_left": [243, 338, 872, 942], "right_on": [243, 244, 307, 338, 872, 873, 909, 942], "rightmost": [660, 828, 1237, 1337, 1360], "rld": [707, 709, 1288], "rle": [637, 828, 1222, 1337], "rle_id": [636, 828, 1337], "rle_id_a": [637, 828], "rle_id_ab": [637, 828], "rmm": 917, "rn": [138, 139, 152], "role": [32, 141], "roll": [229, 338, 435, 454, 455, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 757, 804, 805, 828, 868, 942, 1042, 1065, 1066, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1337], "rollback": [455, 1066], "rolled_forward": 435, "rollforward": [454, 1065], "rolling_map": [828, 1337], "rolling_max": [828, 1337], "rolling_max_bi": 828, "rolling_mean": [828, 1337], "rolling_mean_bi": 828, "rolling_median": [828, 1337], "rolling_median_bi": 828, "rolling_min": [828, 1337], "rolling_min_bi": 828, "rolling_quantil": [828, 1337], "rolling_quantile_bi": 828, "rolling_row_max": [641, 828], "rolling_row_mean": [643, 828], "rolling_row_median": [645, 828], "rolling_row_min": [647, 828], "rolling_row_quantil": [649, 828], "rolling_row_std": [652, 828], "rolling_row_sum": [654, 828], "rolling_row_var": [656, 828], "rolling_skew": [828, 1337], "rolling_std": [828, 1337], "rolling_std_bi": 828, "rolling_sum": [639, 828, 1223, 1337], "rolling_sum_bi": 828, "rolling_var": [828, 1337], "rolling_var_bi": 828, "rollinggroupbi": [270, 338], "rollinginterpolationmethod": [207, 265, 330, 338, 626, 648, 649, 801, 828, 854, 888, 931, 942, 1037, 1212, 1228, 1337], "ronaldo": [683, 1262], "root": [142, 153, 415, 590, 601, 602, 604, 606, 608, 609, 672, 827, 828, 1020, 1251, 1337, 1359], "rotat": [338, 341, 1337, 1342], "round": [20, 40, 53, 130, 140, 338, 416, 420, 496, 658, 731, 828, 1021, 1110, 1234, 1337, 1358], "round_sig_fig": [828, 1337], "round_str": 1073, "round_td": 1073, "rounded_corn": 20, "row": [14, 20, 25, 37, 38, 40, 45, 46, 49, 51, 52, 54, 59, 98, 104, 112, 120, 126, 127, 128, 129, 130, 133, 134, 138, 139, 140, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 161, 162, 168, 197, 199, 200, 201, 211, 212, 217, 220, 222, 223, 227, 228, 229, 230, 231, 232, 236, 237, 238, 239, 241, 242, 243, 244, 245, 247, 248, 254, 255, 259, 263, 270, 273, 274, 283, 289, 292, 294, 295, 300, 301, 303, 305, 306, 307, 314, 315, 319, 321, 323, 324, 332, 338, 342, 363, 364, 372, 387, 408, 409, 489, 497, 501, 507, 530, 541, 568, 618, 619, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 664, 669, 671, 682, 691, 730, 735, 749, 752, 758, 760, 777, 781, 783, 784, 786, 802, 804, 805, 813, 818, 828, 844, 847, 857, 858, 864, 865, 866, 868, 869, 872, 873, 874, 875, 877, 878, 882, 883, 899, 904, 905, 906, 908, 909, 915, 916, 920, 922, 924, 925, 933, 942, 952, 967, 976, 1102, 1103, 1112, 1119, 1144, 1155, 1206, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1249, 1261, 1270, 1309, 1337, 1346, 1353, 1355, 1366, 1368], "row_group": [150, 157], "row_group_s": [45, 49, 338, 942], "row_height": [40, 338], "row_index": [40, 338], "row_index_nam": [138, 139, 144, 146, 148, 150, 152, 155, 156, 157], "row_index_offset": [138, 139, 144, 146, 148, 150, 152, 155, 156, 157], "row_nr": [314, 338, 915, 942], "row_tot": [40, 338], "rowname_col": [338, 342], "rows_by_kei": [241, 272, 291, 338], "rowserror": [271, 338], "rowtotalsdefinit": [40, 338], "rstrip": 602, "rtol": [161, 162, 163, 164], "rtrim": 1358, "ru": 1360, "rule": [138, 150, 152, 157, 222, 338, 676, 700, 715, 1255, 1279, 1294], "run": [46, 47, 48, 49, 57, 58, 66, 140, 168, 171, 172, 173, 228, 243, 246, 248, 277, 303, 313, 324, 338, 413, 427, 540, 576, 577, 636, 637, 694, 806, 828, 849, 850, 860, 867, 872, 878, 882, 887, 894, 898, 906, 913, 917, 942, 946, 948, 1016, 1035, 1154, 1190, 1221, 1222, 1273, 1337, 1365, 1368], "runtim": 946, "runtimeerror": [296, 338, 1318, 1337], "rust": [37, 45, 46, 94, 106, 135, 143, 144, 146, 150, 248, 324, 338, 685, 942, 946, 1190, 1264, 1337], "s1": [50, 90, 91, 163, 164, 222, 338, 991, 1094, 1095, 1114, 1139, 1149, 1182, 1202, 1214, 1328, 1337], "s2": [1, 50, 90, 91, 163, 164, 222, 338, 991, 1022, 1039, 1094, 1095, 1114, 1130, 1139, 1149, 1182, 1196, 1202, 1214, 1328, 1337], "s3": [1, 39, 142, 153, 154, 157, 158, 338, 991, 1182, 1337], "s_": 467, "s_bar": 1355, "s_dt": [467, 1360, 1361], "s_dt1": 1360, "s_dt2": 1360, "s_dtm": 467, "s_foo": 1355, "s_from_str_repr": [1315, 1337], "s_head_5": 689, "s_head_n": 689, "s_tail_5": 713, "s_tail_n": 713, "s_td": 467, "s_tm": [467, 1360, 1361], "safe": [630, 828, 1215, 1337], "sale": [618, 828], "salesforce_format": 185, "sam": 12, "same": [20, 39, 40, 50, 51, 57, 58, 59, 90, 91, 107, 144, 152, 161, 162, 163, 164, 166, 192, 220, 228, 244, 248, 263, 272, 273, 284, 303, 312, 313, 317, 324, 338, 346, 353, 386, 412, 433, 434, 467, 493, 497, 499, 500, 503, 567, 581, 587, 618, 632, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 664, 671, 682, 693, 725, 824, 828, 849, 850, 864, 867, 873, 876, 878, 900, 906, 912, 913, 918, 942, 948, 953, 990, 1015, 1040, 1041, 1046, 1078, 1181, 1190, 1217, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1261, 1272, 1328, 1337, 1351, 1353, 1361], "samoa": [436, 1043], "sampl": [138, 139, 324, 338, 664, 668, 787, 828, 925, 1248, 1337, 1354], "sample_s": [138, 139], "sampled_from": 1368, "sandwich": [225, 338], "sat": [338, 341], "satisfi": [514, 828, 1125, 1337], "saturdai": [229, 338, 868, 942], "save": [2, 3, 6, 229, 244, 270, 308, 338, 436, 444, 457, 462, 475, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 773, 815, 816, 824, 828, 840, 868, 873, 891, 942, 1051, 1068, 1073, 1086], "save_to_fil": 5, "say\u014dnara": 1, "scalar": [135, 197, 239, 248, 271, 338, 413, 576, 660, 689, 694, 702, 713, 788, 790, 828, 952, 1016, 1139, 1237, 1268, 1273, 1281, 1292, 1337], "scale": [28, 67, 215, 338, 396, 577, 622, 716, 828, 948, 1096, 1295, 1337], "scale_negative_even": [622, 828], "scan": [126, 129, 138, 139, 140, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 182, 338, 691, 942, 1270], "scan_csv": [46, 47, 48, 49, 138, 139, 942], "scan_parquet": [150, 158], "scan_pyarrow_dataset": [150, 157], "scan_tabl": 190, "scatter": [338, 341, 1337, 1342], "scenario": 1337, "schedul": [58, 850, 942], "schema": [0, 1, 14, 28, 35, 38, 39, 52, 53, 54, 59, 98, 115, 116, 123, 125, 126, 127, 129, 133, 134, 138, 139, 140, 141, 143, 145, 147, 148, 149, 150, 151, 152, 155, 156, 157, 178, 180, 181, 182, 186, 188, 201, 202, 203, 209, 213, 215, 242, 246, 248, 255, 259, 267, 296, 300, 338, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 442, 567, 568, 577, 588, 603, 605, 607, 691, 743, 810, 828, 840, 847, 848, 851, 852, 856, 859, 878, 883, 889, 911, 925, 942, 948, 1025, 1270, 1337, 1346], "schema_mod": [39, 338], "schema_overrid": [123, 125, 126, 127, 128, 129, 138, 139, 140, 141, 143, 147, 148, 149, 152, 156, 242, 296, 338, 942, 948], "schemadefinit": [123, 125, 126, 127, 129, 147, 148, 156, 338, 942], "schemadict": [82, 123, 125, 126, 127, 128, 129, 133, 138, 140, 141, 143, 149, 150, 152, 155, 157, 338, 810, 878, 925, 942], "schemainitdatatyp": 947, "schindler": 1346, "scientif": [11, 37, 46, 338, 942], "scikit": [300, 338], "scipi": [526, 668, 828, 1140, 1248, 1337], "scope": [33, 34, 192, 839, 948, 1349, 1352, 1365], "score": [40, 263, 338], "script": [338, 341, 1337, 1342], "scroll": [40, 338], "sdiff": 559, "sdk": 177, "search": [244, 338, 568, 676, 686, 688, 700, 873, 900, 942, 1122, 1255, 1265, 1267, 1279, 1337], "search_sort": [828, 1337], "searchsortedsid": [660, 828, 1237, 1337], "searchstrategi": [165, 167, 168, 169, 170, 172], "season": [698, 699], "sec": [1361, 1368], "second": [37, 46, 148, 152, 155, 156, 161, 162, 163, 164, 229, 244, 270, 308, 338, 446, 449, 451, 452, 456, 457, 460, 462, 467, 474, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 698, 699, 712, 715, 770, 771, 772, 773, 814, 815, 816, 818, 828, 868, 873, 891, 942, 948, 1068, 1071, 1073, 1085, 1086, 1098, 1277, 1278, 1291, 1294, 1337, 1360, 1361, 1366, 1368], "second_part": [704, 705, 1283, 1284], "seconds_diff": 474, "secret": [154, 157], "section": [263, 338, 675, 683, 684, 687, 698, 699, 768, 769, 771, 772, 815, 816, 946, 1254, 1262, 1263, 1266, 1277, 1278], "secur": [430, 828, 855, 942], "see": [37, 39, 40, 41, 42, 45, 46, 47, 48, 49, 57, 58, 66, 133, 135, 140, 141, 142, 143, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 161, 162, 163, 164, 168, 172, 182, 194, 205, 220, 229, 243, 262, 263, 338, 342, 401, 402, 404, 405, 417, 467, 492, 526, 576, 668, 675, 683, 684, 687, 689, 698, 699, 713, 768, 769, 771, 772, 802, 815, 816, 824, 828, 849, 850, 864, 868, 917, 942, 946, 948, 950, 1004, 1005, 1007, 1008, 1018, 1024, 1078, 1140, 1248, 1254, 1262, 1263, 1266, 1268, 1277, 1278, 1292, 1337, 1368], "seed": [159, 230, 274, 338, 506, 556, 628, 659, 664, 828, 1118, 1170, 1213, 1235, 1244, 1337], "seed_1": [230, 338, 506, 828, 1118, 1337], "seed_2": [230, 338, 506, 828, 1118, 1337], "seed_3": [230, 338, 506, 828, 1118, 1337], "seen": [467, 1078], "seen_group": 139, "select": [1, 8, 38, 51, 52, 53, 54, 95, 136, 138, 139, 140, 141, 142, 144, 146, 150, 152, 158, 167, 197, 198, 239, 240, 244, 248, 259, 262, 271, 277, 283, 285, 298, 304, 308, 315, 338, 346, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 372, 377, 378, 379, 384, 385, 386, 387, 388, 389, 390, 391, 394, 397, 398, 403, 406, 407, 408, 411, 415, 416, 418, 419, 420, 421, 427, 429, 431, 432, 433, 434, 437, 439, 440, 448, 454, 455, 457, 461, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 480, 483, 485, 486, 487, 488, 489, 490, 494, 496, 498, 501, 505, 506, 507, 508, 509, 510, 511, 512, 515, 516, 519, 525, 526, 527, 529, 530, 540, 541, 568, 571, 572, 573, 574, 576, 577, 578, 579, 580, 584, 596, 598, 600, 601, 603, 605, 607, 610, 611, 615, 616, 617, 618, 620, 621, 624, 626, 627, 628, 629, 630, 631, 634, 635, 636, 639, 650, 657, 659, 660, 661, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 682, 683, 684, 685, 686, 687, 688, 690, 695, 712, 723, 725, 726, 729, 730, 731, 732, 734, 735, 737, 738, 739, 740, 741, 744, 746, 748, 751, 752, 753, 756, 757, 759, 760, 761, 762, 765, 772, 773, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 791, 793, 795, 796, 798, 799, 802, 803, 807, 808, 809, 810, 811, 813, 817, 824, 828, 843, 849, 852, 873, 886, 894, 899, 901, 907, 914, 916, 917, 942, 948, 952, 1072, 1111, 1154, 1236, 1238, 1249, 1267, 1271, 1291, 1337, 1346, 1347, 1348, 1349, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1364, 1365, 1366, 1367], "select_from": [167, 170, 172], "select_seq": [338, 942], "selector": [0, 40, 200, 209, 211, 212, 216, 254, 261, 263, 284, 293, 295, 300, 303, 305, 306, 338, 342, 467, 487, 584, 828, 840, 846, 856, 857, 858, 861, 882, 900, 906, 908, 942], "selectortyp": [40, 338, 948], "self": [1, 52, 53, 54, 55, 57, 58, 285, 316, 338, 807, 828, 849, 850, 860, 887, 898, 901, 914, 942, 957, 1002, 1003, 1004, 1005, 1007, 1008, 1011, 1025, 1030, 1103, 1107, 1121, 1188, 1190, 1203, 1207, 1208, 1214, 1217, 1218, 1236, 1238, 1239, 1250, 1325, 1328, 1337, 1348, 1349, 1350, 1352, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365], "semi": [134, 243, 338, 872, 942, 1353], "semigraph": 20, "sens": [138, 144, 146, 255, 308, 338, 618, 828, 883, 942], "sensit": [675, 684, 687, 698, 699, 1254, 1263, 1266, 1277, 1278], "sep": 134, "separ": [9, 10, 24, 27, 36, 37, 46, 132, 134, 137, 138, 139, 143, 152, 261, 263, 293, 302, 304, 338, 372, 375, 467, 541, 547, 577, 682, 758, 763, 764, 828, 907, 942, 976, 979, 1078, 1155, 1161, 1261, 1307, 1313, 1337, 1360], "seq": 26, "seq1": 26, "seq2": 26, "sequenc": [40, 45, 51, 82, 123, 125, 126, 127, 129, 134, 138, 139, 140, 143, 147, 148, 149, 152, 156, 166, 167, 168, 169, 170, 199, 207, 216, 217, 243, 244, 254, 259, 261, 262, 263, 273, 284, 293, 295, 300, 301, 305, 306, 307, 308, 338, 387, 408, 428, 500, 518, 568, 576, 622, 625, 632, 633, 671, 700, 710, 711, 725, 735, 752, 763, 764, 777, 779, 787, 789, 790, 799, 802, 808, 828, 844, 854, 861, 872, 873, 882, 886, 900, 905, 908, 909, 942, 948, 991, 1036, 1037, 1103, 1182, 1211, 1217, 1218, 1279, 1305, 1337], "sequenti": [57, 58, 277, 313, 338, 849, 850, 860, 887, 894, 898, 913, 942], "ser": [1048, 1049, 1076], "seri": [0, 1, 11, 25, 40, 50, 52, 53, 54, 55, 59, 60, 69, 82, 90, 91, 100, 123, 125, 128, 130, 135, 163, 164, 168, 197, 210, 220, 222, 224, 226, 229, 230, 233, 234, 236, 238, 240, 250, 252, 257, 268, 270, 274, 288, 291, 294, 296, 298, 299, 318, 338, 353, 364, 387, 391, 410, 411, 412, 413, 414, 416, 461, 490, 493, 496, 500, 501, 511, 516, 518, 519, 521, 522, 523, 524, 535, 541, 543, 568, 574, 576, 577, 628, 629, 630, 631, 632, 633, 638, 639, 650, 661, 663, 689, 700, 712, 713, 714, 715, 719, 723, 734, 739, 749, 753, 756, 763, 764, 768, 769, 771, 772, 777, 779, 783, 784, 787, 788, 789, 790, 800, 802, 803, 806, 807, 810, 815, 816, 819, 828, 840, 864, 868, 891, 919, 942, 1329, 1331, 1333, 1336, 1338, 1341, 1342, 1343, 1344, 1345, 1347, 1349, 1360, 1365, 1368], "serial": [43, 44, 208, 338, 430, 595, 828, 855, 942], "serializ": [135, 828], "serializationformat": [208, 278, 338, 430, 591, 828, 855, 895, 942], "seriesplot": [1337, 1342], "server": [38, 140, 141, 338], "servic": 32, "service_account": [142, 153], "service_account_json_absolute_path": [142, 153], "session": 140, "set": [2, 3, 4, 5, 6, 7, 9, 10, 12, 13, 15, 16, 17, 20, 25, 26, 27, 30, 37, 38, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 57, 58, 63, 66, 67, 69, 124, 125, 126, 129, 135, 138, 139, 140, 143, 144, 146, 147, 148, 149, 150, 152, 155, 156, 157, 158, 159, 161, 162, 163, 164, 166, 167, 168, 169, 170, 171, 172, 173, 174, 177, 182, 192, 196, 204, 211, 212, 221, 224, 228, 230, 241, 243, 244, 252, 254, 272, 274, 276, 278, 283, 288, 293, 295, 296, 300, 302, 303, 305, 306, 307, 312, 338, 341, 350, 352, 374, 375, 387, 399, 401, 402, 404, 405, 417, 428, 460, 461, 478, 506, 518, 543, 545, 547, 556, 557, 558, 559, 560, 562, 568, 576, 577, 584, 585, 591, 622, 625, 632, 633, 639, 640, 642, 644, 646, 648, 651, 653, 655, 659, 664, 668, 669, 674, 690, 691, 698, 699, 702, 707, 708, 709, 710, 711, 712, 714, 715, 719, 740, 744, 746, 749, 753, 758, 768, 769, 770, 771, 772, 773, 783, 784, 787, 788, 794, 800, 803, 804, 805, 806, 810, 812, 815, 816, 818, 819, 828, 840, 849, 850, 857, 858, 860, 867, 872, 873, 878, 882, 893, 895, 899, 906, 908, 909, 912, 925, 942, 955, 956, 978, 979, 991, 995, 1002, 1004, 1005, 1007, 1008, 1024, 1036, 1071, 1072, 1089, 1109, 1118, 1130, 1137, 1157, 1159, 1161, 1170, 1171, 1172, 1173, 1174, 1176, 1182, 1190, 1211, 1217, 1218, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1235, 1236, 1237, 1244, 1248, 1249, 1253, 1269, 1270, 1277, 1278, 1281, 1286, 1287, 1288, 1291, 1293, 1294, 1298, 1318, 1326, 1337, 1356, 1364, 1368], "set_": 192, "set_auto_structifi": [276, 312, 338, 893, 912, 942], "set_decimal_separ": 27, "set_environ": 171, "set_except": [58, 850, 942], "set_fmt_float": 30, "set_fmt_str_length": [676, 686, 688, 700, 1255, 1267, 1279], "set_index": [229, 338, 868, 942], "set_legend": [40, 338], "set_sort": [270, 308, 338, 638, 828, 891, 942, 1337], "set_stat": 30, "set_streaming_chunk_s": [849, 942], "set_styl": [40, 338], "set_tbl_column_data_type_inlin": 24, "set_tbl_format": [7, 51], "set_tbl_row": 192, "set_tbl_width_char": 700, "set_thousands_separ": 9, "set_titl": [40, 338], "set_verbos": 192, "setosa": [338, 341], "setup": 1368, "seventeen": [510, 828], "sever": [123, 125, 126, 127, 129, 147, 148, 156, 338, 942, 1368], "sfu": 141, "shape": [1, 7, 8, 9, 10, 11, 12, 13, 15, 16, 17, 18, 19, 21, 22, 23, 24, 25, 26, 27, 28, 50, 51, 52, 53, 54, 55, 59, 60, 78, 82, 90, 91, 98, 117, 123, 124, 125, 126, 127, 128, 129, 130, 134, 138, 147, 148, 152, 158, 165, 168, 172, 197, 198, 199, 200, 201, 202, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 216, 217, 218, 219, 220, 222, 223, 224, 226, 228, 229, 230, 231, 233, 234, 235, 236, 238, 239, 240, 243, 244, 245, 247, 248, 249, 250, 251, 252, 253, 255, 256, 257, 260, 261, 262, 263, 264, 265, 267, 268, 269, 270, 274, 276, 278, 281, 283, 284, 285, 286, 287, 288, 289, 291, 293, 294, 298, 299, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 312, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 403, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 596, 597, 598, 599, 600, 601, 602, 604, 606, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 781, 782, 783, 784, 785, 786, 787, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 802, 803, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 843, 844, 846, 847, 849, 850, 853, 854, 855, 856, 857, 858, 861, 862, 863, 864, 865, 866, 867, 868, 869, 871, 872, 873, 874, 875, 877, 878, 879, 880, 881, 883, 884, 885, 886, 887, 888, 889, 890, 891, 893, 895, 897, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 912, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 952, 953, 954, 957, 959, 960, 961, 962, 963, 964, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1010, 1011, 1012, 1013, 1015, 1016, 1017, 1018, 1020, 1021, 1023, 1024, 1025, 1026, 1027, 1028, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1058, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1094, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1110, 1111, 1112, 1114, 1118, 1119, 1120, 1121, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1139, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1190, 1195, 1202, 1203, 1204, 1206, 1207, 1208, 1209, 1211, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1241, 1242, 1244, 1245, 1246, 1247, 1249, 1250, 1251, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1307, 1309, 1310, 1311, 1313, 1314, 1315, 1320, 1322, 1323, 1324, 1325, 1326, 1328, 1337, 1346, 1347, 1348, 1349, 1351, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1365, 1366], "share": [161, 162, 163, 164, 215, 338, 1096, 1337], "shawshank": 1346, "sheet": [40, 143, 149, 338], "sheet1": [40, 338], "sheet_id": [143, 149], "sheet_nam": [143, 149], "sheet_zoom": [40, 338], "sheetnam": [143, 149], "shift": [229, 338, 390, 431, 498, 538, 619, 757, 828, 868, 942, 1038, 1152, 1206, 1337], "short": [161, 163, 395, 998], "shorten": [161, 163], "shorter": [138, 139, 152, 568, 783, 784], "shorthand": [338, 341, 1337, 1342], "should": [10, 38, 40, 45, 46, 47, 48, 49, 59, 123, 125, 127, 129, 133, 134, 143, 147, 148, 152, 156, 158, 165, 166, 168, 172, 209, 241, 243, 244, 248, 271, 272, 273, 284, 292, 293, 304, 324, 338, 348, 427, 430, 478, 484, 487, 521, 522, 540, 577, 591, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 660, 668, 671, 698, 699, 740, 752, 773, 775, 788, 790, 804, 805, 818, 824, 828, 849, 855, 856, 872, 873, 878, 895, 900, 907, 942, 948, 1035, 1089, 1098, 1154, 1190, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1237, 1248, 1277, 1278, 1326, 1337, 1347], "show": [30, 40, 207, 212, 227, 246, 260, 338, 508, 592, 828, 854, 887, 898, 942, 1120, 1337, 1351, 1364], "show_graph": [246, 338, 942], "show_plot": [887, 942], "shrink": [282, 338, 663, 828, 1242, 1243, 1337], "shrink_dtyp": [828, 1337], "shrink_to_fit": [338, 1337], "shuffl": [159, 274, 300, 324, 338, 556, 659, 828, 925, 1170, 1235, 1337], "side": [40, 135, 229, 270, 338, 514, 557, 558, 559, 560, 638, 641, 643, 645, 647, 649, 652, 654, 656, 660, 768, 769, 771, 772, 787, 815, 816, 828, 868, 891, 942, 1125, 1171, 1172, 1173, 1174, 1237, 1337], "sign": [65, 66, 68, 73, 74, 75, 76, 77, 83, 457, 630, 698, 699, 722, 828, 948, 1068, 1215, 1277, 1278, 1301, 1337, 1358], "sign_x": 1359, "signed_integ": 948, "signific": [157, 241, 248, 338, 401, 402, 404, 405, 577, 658, 828, 1004, 1005, 1007, 1008, 1190, 1234, 1337], "significantli": [143, 248, 324, 338, 1190, 1337, 1368], "silenc": 98, "silent": [717, 1296], "similar": [36, 45, 137, 174, 222, 244, 281, 303, 305, 338, 382, 464, 467, 561, 618, 662, 727, 786, 818, 828, 873, 897, 906, 908, 942, 986, 1075, 1078, 1175, 1241, 1337], "similarli": [40, 126, 229, 244, 270, 308, 338, 457, 462, 475, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 1068, 1073, 1086], "simpl": [40, 259, 338], "simpler": [948, 1277], "simpli": [152, 763, 777], "simplifi": [46, 47, 48, 49, 57, 58, 849, 850, 860, 887, 898, 942], "simplify_express": [46, 47, 48, 49, 57, 58, 849, 850, 860, 887, 898, 942], "sin": [828, 1337, 1358], "sinc": [39, 60, 65, 66, 83, 138, 139, 140, 142, 148, 152, 153, 155, 156, 165, 166, 167, 168, 172, 175, 198, 254, 296, 314, 319, 338, 442, 445, 478, 499, 576, 595, 632, 674, 682, 742, 751, 759, 779, 828, 843, 860, 882, 900, 914, 915, 920, 942, 1049, 1052, 1057, 1058, 1089, 1117, 1217, 1253, 1261, 1318, 1337], "sind": 1358, "sine": [357, 358, 576, 666, 667, 828, 961, 962, 1246, 1247, 1337, 1362], "singl": [40, 45, 51, 57, 58, 59, 70, 137, 138, 139, 140, 141, 142, 143, 150, 152, 153, 155, 166, 200, 209, 210, 211, 212, 217, 224, 230, 239, 248, 261, 271, 273, 284, 295, 296, 338, 371, 413, 417, 435, 457, 500, 503, 506, 537, 543, 576, 577, 629, 632, 634, 636, 671, 674, 689, 690, 694, 702, 713, 742, 752, 756, 757, 758, 784, 789, 790, 808, 816, 824, 828, 846, 849, 850, 856, 857, 858, 900, 942, 948, 975, 1016, 1024, 1042, 1068, 1103, 1118, 1151, 1157, 1214, 1217, 1219, 1221, 1253, 1268, 1269, 1273, 1281, 1292, 1312, 1318, 1337, 1348], "singlecolselector": 197, "singleindexselector": [197, 952], "sinh": [828, 1337], "sink_csv": 942, "sink_ipc": 942, "sink_ndjson": 942, "sink_parquet": 942, "site_id": [338, 342], "six": [660, 828], "size": [14, 45, 49, 133, 138, 139, 140, 165, 166, 167, 168, 172, 174, 215, 306, 338, 568, 634, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 749, 783, 784, 804, 805, 828, 849, 942, 1096, 1219, 1229, 1337, 1368], "sizeunit": [215, 338, 396, 999, 1096, 1337], "skew": [650, 828, 1229, 1337], "skewtest": [668, 828, 1248, 1337], "skip": [138, 139, 143, 150, 152, 157, 244, 306, 338, 873, 942, 1190, 1337, 1353], "skip_empty_lin": 143, "skip_lin": [138, 152], "skip_nul": [577, 828, 1190, 1337], "skip_row": [138, 139, 152], "skip_rows_after_head": [138, 139, 152], "sklearn": [300, 338], "slice": [46, 47, 48, 49, 52, 57, 58, 135, 215, 231, 242, 289, 338, 546, 566, 577, 588, 590, 639, 640, 642, 644, 646, 648, 651, 653, 655, 689, 713, 828, 849, 850, 860, 878, 887, 898, 942, 1096, 1119, 1160, 1180, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1268, 1292, 1309, 1337, 1360], "slice_pushdown": [46, 47, 48, 49, 57, 58, 849, 850, 860, 878, 887, 898, 942], "slide": [427, 828, 1035, 1337], "slightli": [46, 47, 48, 49, 94, 497, 828, 942, 1361], "slot": [427, 431, 538, 828, 1035, 1038, 1152, 1337], "slow": [110, 126, 129, 138, 139, 140, 143, 147, 148, 149, 152, 156, 157, 338, 427, 577, 639, 691, 828, 925, 942, 1035, 1223, 1270, 1337], "slower": [127, 129, 143, 228, 248, 261, 308, 324, 338, 577, 790, 828, 867, 925, 942, 1190, 1337], "small": [11, 141, 462, 942, 1368], "smaller": [45, 49, 215, 338, 942, 1096, 1337], "smallest": [199, 301, 338, 407, 408, 735, 828, 844, 905, 942, 1010, 1337, 1354, 1357], "smooth": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "snappi": [35, 45, 49, 338, 942], "snapshot": 154, "snapshot_id": 154, "snowflak": [140, 141], "snowflake_format": 185, "snowi": [698, 699], "so": [1, 40, 141, 143, 152, 174, 192, 227, 229, 245, 263, 270, 338, 364, 374, 430, 497, 514, 545, 568, 577, 638, 698, 699, 700, 707, 708, 709, 723, 828, 855, 868, 874, 891, 942, 948, 978, 1159, 1277, 1278, 1279, 1286, 1287, 1288], "softwar": [36, 137, 338], "solut": [38, 338], "some": [14, 30, 40, 50, 59, 91, 126, 138, 139, 140, 152, 196, 212, 263, 273, 296, 338, 342, 698, 699, 824, 1130, 1277, 1278, 1337, 1368], "some_account": [684, 1263], "some_t": 1367, "someth": [576, 828], "sometim": [773, 827], "somewher": [684, 1263], "sort": [51, 52, 199, 229, 244, 255, 262, 263, 270, 279, 301, 308, 321, 332, 338, 363, 407, 408, 484, 493, 577, 618, 638, 661, 671, 734, 735, 740, 742, 752, 768, 771, 790, 828, 844, 860, 868, 873, 883, 886, 887, 891, 896, 898, 905, 922, 933, 942, 948, 967, 1010, 1098, 1137, 1239, 1322, 1323, 1326, 1337, 1353, 1366, 1368], "sort_bi": 828, "sort_column": [263, 338], "sorted": [244, 338, 873, 942], "sorted_asc": [1109, 1337], "sorted_desc": [1109, 1337], "sourc": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 169, 170, 171, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 186, 187, 188, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 341, 342, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 828, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 942, 946, 947, 948, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1304, 1305, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337, 1342, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1365], "source_ac": 130, "source_actor_id": 130, "source_alia": [39, 338], "source_cha": 130, "source_channel_id": 130, "south": 69, "space": [20, 229, 338, 467, 787, 868, 942, 948, 1078], "spam": [251, 338, 684, 1263], "span": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "spanner": [338, 342], "spark": [45, 338], "sparklin": [40, 338], "speak": [668, 828, 1248, 1337], "spearman": 759, "speci": [338, 341], "special": [38, 138, 139, 141, 152, 300, 315, 338, 639, 684, 698, 699, 828, 916, 942, 1190, 1223, 1263, 1277, 1278, 1337], "specif": [1, 30, 39, 40, 41, 42, 94, 123, 125, 127, 129, 134, 138, 141, 142, 143, 147, 148, 149, 153, 154, 156, 200, 241, 243, 290, 295, 338, 464, 467, 712, 714, 715, 719, 740, 828, 846, 872, 942, 947, 948, 1075, 1078, 1291, 1293, 1294, 1298, 1312, 1316, 1326, 1337, 1353, 1365, 1368], "specifi": [37, 38, 39, 40, 45, 46, 51, 95, 98, 101, 116, 119, 138, 143, 149, 150, 152, 157, 169, 178, 180, 181, 182, 199, 200, 215, 216, 219, 224, 228, 229, 243, 244, 261, 263, 270, 271, 273, 276, 277, 281, 284, 295, 301, 304, 312, 313, 317, 338, 408, 417, 460, 467, 483, 485, 486, 487, 492, 618, 631, 633, 640, 642, 644, 646, 648, 651, 653, 655, 662, 671, 727, 735, 752, 755, 756, 757, 758, 768, 769, 771, 772, 773, 775, 806, 810, 815, 816, 824, 828, 844, 846, 861, 863, 867, 868, 872, 873, 891, 893, 894, 897, 900, 905, 907, 912, 913, 918, 942, 948, 1024, 1071, 1078, 1096, 1097, 1099, 1100, 1106, 1218, 1241, 1316, 1337, 1353, 1360, 1367], "speed": [49, 279, 338, 577, 828, 896, 942, 946, 1368], "speedup": [51, 157, 241, 248, 338, 577, 828, 1190, 1337], "split": [1, 40, 45, 52, 242, 338, 682, 704, 705, 1261, 1283, 1284], "split_by_column_dtyp": 54, "split_inclus": 703, "splitfram": [1, 52], "spreadsheet": [36, 137, 143, 149, 263, 338], "spring": [698, 699], "sql": [0, 38, 113, 114, 122, 140, 141, 243, 281, 338, 382, 561, 662, 786, 808, 828, 840, 897, 942, 986, 1175, 1241, 1337, 1346, 1347, 1349, 1351, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1362, 1363, 1366, 1367], "sql_expr": 1365, "sqlalchemi": [38, 140, 160, 338], "sqlcontext": [285, 338, 807, 901, 942, 1364], "sqldw_format": 185, "sqlite": [38, 140, 338], "sqrt": [577, 668, 727, 828, 1190, 1248, 1337, 1358], "sqrt_x": 1359, "squar": [1, 55, 324, 526, 634, 672, 828, 925, 1140, 1219, 1251, 1337, 1359], "st": [32, 1368], "stabil": [230, 338, 506, 828, 1118, 1337], "stabl": [150, 194, 205, 207, 208, 230, 274, 278, 285, 338, 430, 506, 573, 591, 733, 828, 854, 855, 882, 895, 900, 901, 942, 950, 1118, 1320, 1337], "stack": [59, 233, 310, 338, 341, 1347], "stai": [576, 664, 828], "standalon": [166, 948], "standard": [7, 10, 40, 140, 286, 295, 300, 338, 448, 485, 651, 652, 668, 673, 692, 695, 809, 824, 828, 902, 942, 1055, 1094, 1099, 1202, 1248, 1252, 1271, 1274, 1337, 1354, 1368], "standardis": [40, 338], "start": [40, 136, 138, 139, 141, 143, 144, 146, 148, 149, 150, 152, 155, 156, 157, 174, 223, 228, 229, 246, 283, 308, 314, 315, 338, 391, 394, 397, 410, 414, 435, 443, 453, 458, 462, 475, 476, 487, 501, 544, 562, 637, 641, 643, 645, 647, 649, 652, 654, 656, 669, 675, 680, 684, 688, 697, 702, 706, 707, 709, 710, 713, 722, 749, 754, 763, 767, 768, 769, 770, 771, 772, 775, 777, 783, 784, 787, 815, 816, 818, 824, 828, 866, 867, 868, 887, 899, 915, 916, 942, 948, 1000, 1012, 1017, 1042, 1044, 1047, 1050, 1052, 1053, 1059, 1061, 1063, 1064, 1067, 1069, 1073, 1077, 1086, 1087, 1112, 1158, 1176, 1222, 1249, 1259, 1263, 1267, 1276, 1281, 1285, 1286, 1288, 1292, 1301, 1337, 1353, 1360, 1368], "start_bi": [229, 338, 868, 942], "startbi": [229, 338, 868, 942], "starts_a": 1360, "starts_with": [52, 263, 338, 342, 391, 394, 410, 584, 675, 680, 807, 901, 942, 948, 1012, 1259, 1358], "starts_with_expr": 397, "starts_with_lit": 397, "startup": [295, 338], "stat": [526, 668, 828, 1140, 1248, 1337], "state": [4, 5, 106, 763, 840, 860, 887, 898, 942, 1365], "statement": [618, 818, 828, 1351, 1366], "static": [88, 925], "statist": [45, 49, 138, 139, 150, 155, 157, 207, 338, 485, 486, 526, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 668, 828, 854, 942, 1037, 1099, 1100, 1140, 1229, 1248, 1337], "std": [207, 338, 651, 652, 828, 854, 942, 1037, 1230, 1337], "std_dev": [40, 338], "stddev": 1358, "stddev_samp": 1354, "stdev": [40, 338, 1354], "stdev_samp": 1354, "stdout": [192, 227, 338, 593], "step": [306, 338, 497, 749, 783, 784, 828], "steve": [255, 338, 883, 942], "still": [140, 141], "stock": [338, 341], "stop": [133, 136, 138, 139, 144, 146, 148, 150, 152, 155, 156, 157, 641, 643, 645, 647, 649, 652, 654, 656, 828, 1044, 1047, 1052, 1053, 1059, 1061, 1063, 1067, 1073, 1077], "storag": [37, 39, 41, 45, 46, 47, 48, 49, 138, 142, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 182, 338, 942], "storage_loc": [183, 186, 187], "storage_opt": [37, 39, 41, 45, 46, 47, 48, 49, 138, 142, 144, 146, 148, 150, 152, 153, 154, 155, 156, 157, 182, 338, 942], "store": [39, 138, 154, 217, 241, 272, 338, 411, 636, 828, 1013, 1103, 1221, 1337], "store_id": [618, 828], "str": [1, 2, 3, 5, 6, 9, 10, 12, 15, 16, 17, 20, 21, 26, 27, 30, 32, 33, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 51, 52, 53, 54, 55, 56, 66, 69, 70, 92, 123, 124, 125, 126, 127, 129, 130, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 165, 166, 168, 171, 172, 173, 177, 178, 180, 181, 182, 183, 184, 186, 187, 192, 199, 200, 204, 207, 208, 209, 210, 211, 212, 213, 215, 216, 220, 221, 222, 224, 225, 227, 228, 229, 231, 233, 236, 238, 239, 241, 243, 244, 245, 247, 249, 251, 253, 254, 255, 256, 259, 261, 263, 265, 267, 268, 269, 270, 271, 272, 274, 278, 279, 283, 284, 285, 286, 287, 289, 291, 292, 293, 294, 295, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338, 347, 348, 349, 370, 375, 387, 391, 392, 393, 394, 397, 398, 403, 406, 408, 410, 411, 414, 422, 428, 430, 432, 440, 457, 461, 462, 464, 467, 475, 484, 487, 493, 495, 499, 500, 503, 511, 514, 535, 536, 545, 546, 547, 562, 566, 568, 577, 588, 590, 591, 592, 593, 595, 602, 603, 604, 605, 606, 607, 608, 609, 615, 618, 622, 625, 631, 632, 633, 635, 637, 638, 641, 643, 645, 647, 649, 652, 654, 656, 663, 670, 671, 723, 724, 725, 726, 735, 740, 742, 743, 744, 745, 746, 747, 748, 750, 751, 757, 758, 760, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 775, 776, 777, 778, 779, 780, 781, 782, 785, 786, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 801, 802, 803, 804, 805, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 824, 828, 835, 844, 846, 849, 850, 852, 854, 855, 856, 857, 858, 860, 861, 864, 867, 868, 870, 872, 873, 874, 882, 883, 886, 887, 889, 890, 891, 895, 896, 898, 899, 900, 901, 905, 906, 907, 908, 909, 914, 915, 916, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 942, 947, 948, 954, 974, 979, 991, 996, 1011, 1012, 1013, 1017, 1036, 1037, 1047, 1068, 1072, 1073, 1075, 1078, 1086, 1098, 1106, 1109, 1149, 1150, 1161, 1182, 1198, 1199, 1200, 1211, 1216, 1217, 1218, 1238, 1302, 1304, 1305, 1313, 1314, 1315, 1316, 1326, 1337, 1343, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1353, 1354, 1355, 1357, 1360, 1361, 1365, 1366, 1368], "str_date": 1360, "str_timestamp": 1360, "strategi": [37, 46, 51, 59, 138, 157, 165, 166, 167, 168, 169, 170, 172, 219, 229, 243, 244, 258, 307, 338, 492, 568, 577, 828, 863, 868, 872, 873, 909, 942, 1106, 1182, 1337], "stream": [14, 41, 42, 46, 47, 48, 49, 57, 58, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 228, 243, 303, 338, 576, 828, 849, 850, 860, 867, 872, 878, 882, 887, 898, 900, 906, 942], "streamabl": [878, 882, 908, 942], "streaming_t": 189, "strftime": [94, 467, 1078, 1358, 1360], "strict": [125, 126, 129, 134, 200, 209, 267, 338, 392, 409, 467, 675, 678, 687, 712, 714, 715, 717, 719, 828, 846, 856, 889, 942, 948, 995, 1011, 1078, 1254, 1257, 1266, 1291, 1293, 1294, 1296, 1298, 1337], "strictli": [37, 46, 50, 91, 244, 338, 873, 942], "string": [1, 2, 3, 5, 6, 12, 14, 15, 16, 20, 35, 37, 38, 39, 40, 43, 44, 46, 50, 63, 66, 69, 82, 89, 90, 91, 92, 94, 100, 118, 126, 130, 134, 138, 139, 140, 141, 152, 161, 162, 163, 164, 165, 172, 176, 199, 200, 203, 208, 213, 215, 222, 224, 227, 228, 229, 244, 261, 263, 270, 273, 275, 276, 277, 278, 284, 294, 295, 301, 302, 306, 308, 312, 313, 317, 338, 347, 370, 375, 392, 393, 394, 408, 410, 412, 413, 414, 417, 430, 457, 462, 464, 467, 475, 484, 487, 495, 499, 514, 547, 591, 593, 618, 622, 632, 633, 638, 641, 643, 645, 647, 649, 652, 654, 656, 671, 674, 675, 676, 677, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 724, 727, 735, 743, 745, 747, 752, 755, 756, 757, 758, 766, 768, 769, 771, 772, 778, 792, 794, 797, 806, 810, 812, 815, 816, 818, 824, 828, 840, 844, 846, 851, 855, 859, 860, 867, 868, 873, 891, 892, 893, 894, 895, 900, 905, 912, 913, 918, 942, 947, 948, 979, 995, 996, 997, 1012, 1014, 1015, 1016, 1017, 1068, 1073, 1075, 1078, 1086, 1098, 1125, 1161, 1217, 1218, 1253, 1254, 1255, 1256, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1304, 1315, 1316, 1337, 1346, 1347, 1355, 1358, 1361, 1364, 1368], "stringcach": [90, 91, 243, 338, 840, 1014, 1018], "stringio": [147, 148, 499, 828], "strings_hex": 679, "strip": [28, 707, 708, 709, 710, 711, 1286, 1287, 1288, 1360], "strip_chars_end": [709, 711], "strip_chars_start": [708, 710], "strip_prefix": [709, 711], "strip_suffix": [708, 710], "strongli": [40, 174, 248, 271, 324, 338, 577, 828, 1190, 1337], "strpo": 1358, "strpost": 1360, "strptime": [270, 338, 461, 638, 828, 891, 942, 1072, 1358], "struct": [8, 70, 119, 130, 259, 276, 299, 304, 312, 338, 387, 428, 508, 568, 576, 577, 603, 605, 607, 625, 636, 637, 685, 691, 704, 705, 733, 740, 763, 764, 766, 789, 828, 893, 907, 912, 925, 942, 991, 1036, 1182, 1190, 1211, 1221, 1264, 1270, 1283, 1284, 1318, 1320, 1337], "struct_col": [723, 725, 726], "struct_seri": 925, "structarrai": [215, 338, 1096, 1337], "structfieldnotfounderror": 725, "structur": [40, 41, 42, 100, 103, 117, 134, 217, 262, 273, 290, 296, 338, 622, 828, 886, 942, 1103, 1312, 1337, 1365], "student": [263, 338], "style": [7, 20, 40, 140, 263, 338], "sub": [324, 368, 369, 370, 373, 374, 375, 376, 377, 378, 379, 380, 384, 385, 389, 547, 554, 828, 972, 973, 974, 977, 978, 979, 980, 981, 982, 983, 984, 988, 989, 993, 1161, 1168], "subarrai": [366, 367, 970, 971], "subclass": [1, 338], "subexpress": [57, 58, 849, 850, 860, 887, 898, 942], "subinterv": 1354, "subject": [45, 263, 338], "sublist": [374, 533, 534, 536, 538, 542, 543, 544, 545, 546, 547, 548, 557, 562, 566, 568, 978, 1130, 1147, 1148, 1150, 1152, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1171, 1176, 1180, 1182, 1337], "subplan": [57, 58, 849, 850, 860, 887, 898, 942], "subsequ": [40, 150, 157, 266, 297, 338, 568, 807, 818, 860, 942, 1319, 1337, 1352], "subset": [211, 212, 259, 303, 338, 857, 858, 906, 942], "substr": [391, 394, 397, 410, 414, 675, 680, 687, 698, 699, 702, 703, 704, 705, 706, 948, 994, 997, 1000, 1012, 1017, 1254, 1259, 1266, 1277, 1278, 1281, 1282, 1283, 1284, 1285, 1358], "subtl": [40, 338], "subtli": [497, 828], "subtract": [526, 728, 828, 1140, 1337], "succe": [138, 139, 152], "success": [677, 684, 1256, 1263], "successfulli": [849, 942], "suffix": [243, 244, 245, 276, 312, 317, 338, 349, 394, 408, 410, 521, 522, 523, 524, 582, 602, 604, 607, 608, 609, 635, 680, 708, 711, 735, 828, 872, 873, 874, 893, 912, 914, 918, 942, 948, 997, 1012, 1259, 1290], "suffix_field": [603, 605], "sugar": [307, 338, 632, 633, 700, 744, 746, 748, 760, 762, 765, 775, 780, 781, 782, 791, 793, 795, 796, 798, 800, 801, 806, 809, 811, 813, 817, 819, 828, 909, 942, 1217, 1218, 1251, 1279, 1337], "suggest": [338, 341, 1337, 1342], "suitabl": [51, 59, 140, 166, 248, 338, 577, 660, 828, 1190, 1237, 1337], "sum": [40, 135, 215, 222, 228, 229, 239, 263, 270, 288, 317, 338, 425, 426, 430, 480, 493, 568, 577, 588, 590, 591, 592, 593, 594, 632, 633, 638, 653, 654, 742, 744, 756, 763, 765, 766, 777, 790, 802, 812, 828, 849, 850, 855, 860, 867, 868, 885, 887, 891, 895, 898, 918, 942, 948, 1033, 1034, 1092, 1096, 1231, 1337, 1346, 1353, 1355, 1358, 1365], "sum_": [668, 828, 1248, 1337], "sum_a": [270, 338, 638, 828, 891, 942], "sum_horizont": [51, 338, 811], "summari": [207, 338, 854, 942, 1037, 1337, 1353], "summer": [698, 699], "sun": [338, 341, 712, 1291], "sundai": [229, 338, 435, 464, 467, 477, 754, 868, 942, 1042, 1075, 1078, 1088], "sunni": [698, 699, 1277, 1278], "supercast": [222, 338], "supertyp": [59, 135, 219, 296, 300, 338, 353, 757, 828, 863, 942, 1337], "suppli": [38, 40, 123, 125, 126, 127, 129, 140, 147, 148, 156, 220, 271, 295, 338, 493, 622, 828, 864, 942, 1316, 1337], "support": [1, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 59, 123, 124, 125, 126, 127, 128, 129, 130, 140, 141, 142, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 165, 169, 172, 182, 192, 241, 242, 243, 244, 272, 273, 283, 284, 292, 297, 300, 338, 467, 484, 562, 618, 632, 633, 669, 671, 676, 686, 688, 689, 698, 699, 700, 702, 713, 824, 828, 834, 849, 872, 873, 899, 900, 942, 948, 1078, 1098, 1176, 1217, 1218, 1249, 1255, 1265, 1267, 1268, 1277, 1278, 1279, 1281, 1292, 1319, 1321, 1337, 1341, 1355, 1360, 1361, 1363, 1364, 1365], "supportsinterchang": 124, "suppos": [197, 263, 338, 577, 828, 1190, 1337], "sure": [59, 123, 128, 135, 138, 139, 142, 144, 146, 150, 153, 266, 338, 828], "surreal_query_to_fram": 140, "surrealdb": 140, "surrealql": 140, "suscept": 942, "swap": [889, 942], "swim": 758, "switch": [436, 849, 942, 1043], "sy": 192, "sydnei": 770, "symbol": [36, 37, 46, 338, 828, 942], "symmetr": [559, 948, 1173], "symmetri": [852, 859, 892, 911, 942], "synchron": [140, 936], "syntact": [307, 338, 632, 633, 700, 744, 746, 748, 760, 762, 765, 775, 780, 781, 782, 791, 793, 795, 796, 798, 800, 801, 806, 809, 811, 813, 817, 819, 828, 909, 942, 1217, 1218, 1251, 1279, 1337], "syntax": [40, 114, 220, 248, 259, 338, 592, 675, 683, 684, 687, 698, 699, 783, 784, 824, 864, 898, 942, 1254, 1262, 1263, 1266, 1277, 1278, 1337, 1361, 1363], "system": [36, 138, 139, 338, 440, 849, 942, 1047], "t": [36, 37, 39, 46, 59, 137, 138, 143, 149, 152, 229, 244, 248, 262, 303, 306, 338, 427, 436, 444, 461, 467, 480, 483, 485, 486, 540, 577, 618, 622, 683, 687, 698, 699, 709, 712, 715, 720, 818, 828, 868, 873, 886, 906, 942, 948, 1035, 1072, 1078, 1092, 1097, 1099, 1100, 1154, 1190, 1262, 1266, 1277, 1278, 1287, 1288, 1291, 1294, 1299, 1337, 1349, 1350, 1360], "t_": [304, 338, 484, 828, 907, 942, 1098, 1337], "t_0": [270, 338, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 828, 891, 942, 1098, 1337], "t_1": [270, 338, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 828, 891, 942, 1098, 1337], "t_a": [304, 338, 907, 942], "t_b": [304, 338, 907, 942], "t_c": [304, 338, 907, 942], "t_d": [304, 338, 907, 942], "t_i": [484, 828, 1098, 1337], "t_id": [245, 338, 874, 942], "t_n": [270, 338, 638, 641, 643, 645, 647, 649, 652, 654, 656, 828, 891, 942], "t_struct": [304, 338, 907, 942], "tab_spann": [338, 342], "tab_stub": [338, 342], "tab_styl": [338, 342], "tabl": [7, 15, 16, 17, 19, 20, 21, 22, 23, 25, 26, 38, 39, 40, 123, 130, 134, 142, 143, 149, 153, 154, 178, 181, 182, 184, 187, 188, 243, 245, 263, 285, 290, 297, 306, 307, 338, 342, 807, 840, 872, 874, 901, 909, 942, 1347, 1348, 1349, 1350, 1352, 1353, 1364, 1365], "table_id": 187, "table_nam": [38, 40, 143, 178, 182, 285, 338, 901, 942], "table_path": [39, 142, 153, 154, 338], "table_styl": [40, 338], "table_typ": 187, "tableinfo": [178, 181, 190], "tablemerg": [39, 338], "tablenotfounderror": [39, 338], "tables_scale_100": [132, 139], "tabletyp": [187, 190], "tail": [227, 231, 338, 353, 668, 828, 942, 1119, 1248, 1337], "take": [40, 134, 143, 149, 168, 169, 192, 222, 223, 229, 252, 255, 262, 263, 267, 338, 363, 435, 457, 493, 500, 501, 543, 544, 576, 603, 605, 607, 671, 752, 754, 774, 776, 785, 828, 866, 868, 883, 889, 942, 967, 1042, 1068, 1111, 1112, 1157, 1158, 1328, 1337, 1355], "taken": [562, 702, 1176, 1281], "talkin": [720, 1299], "tan": [828, 1337, 1358], "tand": 1358, "tangent": [359, 360, 731, 732, 828, 963, 964, 1310, 1311, 1337, 1362], "tanh": [263, 338, 828, 1337], "target": [1, 38, 39, 40, 56, 143, 300, 338, 683, 698, 699, 712, 714, 715, 948, 1262, 1277, 1278, 1291, 1293, 1294, 1360], "target_alia": [39, 338], "target_t": [38, 338], "task": [58, 850, 942], "tau": [483, 484, 828, 1097, 1098, 1337], "tb": [161, 163, 215, 338, 396, 1096, 1337], "tbl": [132, 139, 1367], "tbl0": 1352, "tbl1": [1350, 1352], "tbl2": [1350, 1352], "tbl3": 1350, "tbl4": 1350, "tbl_cell_numeric_align": [9, 10, 27], "tbl_col": 17, "tbl_format": [20, 192], "tbl_hide_column_data_typ": 20, "tbl_hide_dataframe_shap": 20, "tbl_row": [25, 207, 338, 854, 942], "tbl_width_char": 773, "td": 467, "td1": 948, "td2": 948, "td3": 948, "tdf": [262, 338], "technic": 824, "tell": [676, 700, 1255, 1279], "tempor": [94, 200, 229, 241, 270, 272, 273, 292, 338, 417, 467, 514, 638, 641, 643, 645, 647, 649, 652, 654, 656, 787, 828, 840, 846, 868, 891, 942, 948, 1024, 1078, 1125, 1337, 1358, 1364], "temporalliter": [417, 787, 828, 1024, 1057, 1058, 1337], "temporari": [38, 338], "temporarili": [174, 192, 229, 270, 338, 638, 828, 868, 891, 942], "tenant": 33, "tenant_id": 33, "tend": [161, 163], "tensor": [300, 338, 1321, 1337], "tensordataset": [300, 338], "term": [483, 485, 486, 689, 702, 713, 828, 1097, 1099, 1100, 1268, 1281, 1292, 1337], "termin": [37, 46, 338, 942], "terminologi": 186, "test": [0, 38, 140, 141, 143, 149, 214, 263, 338, 840, 1095, 1337, 1360], "test1": 1352, "test2": 1352, "test3": 1352, "test_1": [263, 338], "test_1_math": [263, 338], "test_1_phys": [263, 338], "test_2": [263, 338], "test_2_math": [263, 338], "test_2_phys": [263, 338], "test_data": 140, "test_df_height": 168, "test_func": 789, "test_lf": [914, 942], "test_miscellan": 1368, "test_numer": 1368, "test_price_calcul": 1368, "test_series_len": 172, "test_tabl": 141, "test_unique_xyz": 166, "testdb": 141, "testing1234": 1352, "text": [137, 140, 185, 412, 413, 681, 689, 693, 694, 695, 698, 699, 701, 702, 713, 808, 1015, 1016, 1268, 1272, 1273, 1280, 1281, 1292, 1352, 1368], "text1": 699, "text2": 699, "textclaus": 140, "texttt": [668, 828, 1248, 1337], "th": [223, 338, 501, 544, 557, 668, 689, 713, 828, 866, 942, 1112, 1158, 1171, 1248, 1268, 1292, 1337], "than": [40, 46, 47, 48, 49, 57, 58, 97, 120, 127, 129, 138, 139, 140, 143, 149, 152, 158, 201, 228, 241, 243, 244, 248, 261, 271, 272, 274, 306, 324, 338, 412, 497, 499, 502, 504, 514, 528, 556, 575, 576, 577, 593, 625, 637, 659, 668, 689, 693, 696, 697, 705, 713, 722, 759, 790, 828, 849, 850, 867, 872, 873, 925, 942, 1015, 1125, 1170, 1190, 1211, 1222, 1235, 1248, 1268, 1272, 1275, 1276, 1284, 1292, 1301, 1318, 1337, 1368], "the_aws_access_key_id": [39, 142, 153, 154, 338], "the_aws_region": [39, 338], "the_aws_secret_access_kei": [39, 142, 153, 154, 338], "thei": [37, 40, 46, 50, 58, 59, 90, 91, 126, 135, 152, 192, 244, 246, 273, 338, 618, 700, 708, 709, 828, 849, 873, 942, 946, 948, 1279], "them": [58, 123, 125, 126, 127, 129, 140, 141, 143, 147, 148, 149, 150, 152, 155, 156, 157, 192, 216, 217, 229, 244, 255, 263, 270, 300, 308, 338, 375, 484, 514, 547, 610, 611, 618, 638, 757, 768, 769, 771, 772, 815, 816, 828, 850, 861, 868, 873, 883, 891, 942, 948, 979, 1098, 1103, 1161, 1199, 1200, 1337, 1355, 1365], "therebi": [152, 155, 156], "therefor": [215, 338, 577, 818, 828, 1096, 1337], "theta": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "thi": [1, 4, 5, 10, 12, 14, 30, 31, 32, 33, 34, 36, 37, 38, 39, 40, 41, 45, 46, 47, 48, 49, 50, 51, 57, 58, 59, 65, 66, 67, 68, 69, 73, 83, 91, 98, 123, 125, 126, 127, 128, 129, 130, 132, 133, 134, 135, 138, 139, 140, 141, 142, 143, 144, 146, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 177, 178, 179, 180, 181, 182, 186, 188, 192, 194, 196, 197, 198, 199, 202, 203, 205, 207, 208, 211, 212, 215, 217, 221, 222, 227, 228, 229, 230, 234, 236, 238, 239, 240, 241, 243, 244, 245, 246, 248, 249, 251, 253, 254, 255, 256, 258, 259, 261, 263, 264, 265, 266, 267, 268, 270, 271, 272, 273, 274, 276, 277, 278, 279, 281, 283, 285, 286, 287, 290, 292, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 309, 310, 312, 313, 314, 315, 319, 324, 337, 338, 341, 342, 350, 353, 354, 363, 375, 381, 382, 383, 388, 407, 408, 411, 417, 427, 428, 430, 436, 437, 448, 454, 455, 457, 461, 464, 467, 478, 482, 489, 499, 506, 508, 511, 512, 514, 518, 540, 541, 547, 556, 557, 558, 559, 560, 561, 563, 568, 569, 573, 574, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 591, 592, 595, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 613, 618, 625, 628, 629, 630, 631, 632, 633, 634, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 661, 662, 663, 664, 669, 670, 671, 674, 676, 683, 686, 688, 690, 691, 695, 696, 697, 700, 707, 708, 709, 710, 711, 716, 720, 722, 724, 727, 734, 735, 737, 738, 739, 740, 744, 748, 756, 757, 760, 762, 763, 776, 777, 779, 781, 782, 785, 786, 787, 790, 793, 795, 798, 800, 806, 809, 813, 817, 818, 819, 824, 828, 840, 843, 844, 845, 848, 849, 850, 851, 852, 854, 855, 857, 858, 859, 860, 867, 868, 870, 872, 873, 874, 876, 878, 882, 883, 887, 889, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 905, 906, 908, 909, 911, 912, 913, 914, 915, 916, 917, 920, 925, 939, 940, 941, 942, 946, 947, 948, 950, 957, 958, 967, 979, 985, 986, 987, 992, 1010, 1013, 1018, 1019, 1024, 1025, 1035, 1036, 1043, 1044, 1046, 1055, 1065, 1066, 1068, 1072, 1075, 1078, 1089, 1091, 1094, 1096, 1102, 1103, 1112, 1114, 1118, 1120, 1130, 1139, 1154, 1155, 1161, 1170, 1171, 1172, 1173, 1174, 1175, 1177, 1183, 1188, 1190, 1191, 1192, 1193, 1194, 1196, 1197, 1198, 1199, 1200, 1202, 1205, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1236, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1249, 1250, 1252, 1253, 1255, 1262, 1265, 1267, 1269, 1270, 1274, 1275, 1276, 1279, 1286, 1287, 1288, 1295, 1299, 1301, 1302, 1304, 1307, 1308, 1312, 1314, 1316, 1317, 1318, 1319, 1321, 1322, 1323, 1325, 1326, 1327, 1337, 1342, 1346, 1347, 1348, 1352, 1360, 1363, 1364, 1365, 1366, 1368], "thing": [152, 159], "think": [454, 455, 1065, 1066], "third": [576, 828], "thoma": [255, 338, 883, 942], "those": [5, 30, 40, 138, 143, 273, 297, 307, 338, 497, 628, 683, 790, 828, 909, 942, 948, 1213, 1262, 1319, 1337], "though": [38, 140, 229, 338, 824, 868, 942], "thousand": [9, 27], "thousands_separ": [9, 10, 27], "thread": [14, 37, 46, 58, 132, 138, 139, 141, 174, 175, 284, 338, 540, 577, 671, 752, 828, 850, 900, 942, 987, 1154, 1177, 1250, 1337], "thread_loc": [577, 828], "thread_pool_s": 175, "threadpool": 57, "three": [40, 197, 270, 299, 338, 428, 625, 638, 660, 689, 698, 713, 828, 891, 942, 991, 1036, 1182, 1211, 1268, 1278, 1292, 1337], "threshold": [276, 338, 893, 942], "through": [124, 140, 824, 948, 1337, 1352], "throughout": 192, "throw": [39, 125, 126, 129, 209, 267, 338, 691, 692, 846, 856, 889, 942, 1270, 1271, 1337], "thu": [40, 217, 338, 341, 759, 946, 1103, 1337], "thursdai": [229, 338, 435, 754, 868, 942, 1042], "ti": [628, 828, 1213, 1337], "time": [12, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 66, 68, 107, 142, 148, 150, 152, 153, 155, 156, 157, 168, 169, 172, 182, 207, 217, 229, 244, 245, 270, 308, 338, 370, 407, 408, 436, 437, 439, 440, 441, 444, 445, 454, 455, 457, 460, 461, 462, 464, 466, 467, 475, 478, 484, 535, 536, 568, 637, 638, 641, 643, 645, 647, 649, 652, 654, 656, 664, 712, 715, 719, 733, 734, 735, 757, 758, 768, 769, 770, 771, 772, 773, 779, 787, 815, 816, 828, 849, 850, 854, 868, 873, 874, 887, 891, 942, 948, 974, 1010, 1043, 1044, 1046, 1047, 1051, 1052, 1068, 1071, 1072, 1073, 1075, 1077, 1078, 1086, 1089, 1098, 1103, 1149, 1150, 1222, 1244, 1291, 1294, 1298, 1320, 1322, 1337, 1346, 1352, 1361, 1368], "time_column": [308, 338], "time_format": [37, 46, 338, 942], "time_unit": [66, 68, 437, 439, 445, 466, 478, 715, 770, 771, 772, 773, 779, 947, 948, 1044, 1046, 1052, 1077, 1089, 1294], "time_unit_m": [437, 1044], "time_unit_n": [437, 1044], "time_unit_u": 478, "time_zon": [66, 440, 442, 461, 715, 770, 771, 772, 947, 948, 1043, 1047, 1051, 1072, 1294], "timedelta": [229, 244, 270, 308, 338, 457, 462, 467, 475, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 768, 769, 771, 772, 815, 816, 828, 868, 873, 891, 942, 947, 948, 1056, 1062, 1068, 1073, 1086, 1098, 1199, 1200, 1252, 1327, 1337], "timeout": [58, 850, 942], "timestamp": [130, 142, 153, 229, 338, 461, 462, 475, 779, 868, 942, 1072, 1073, 1086, 1358], "timestamp_m": 466, "timestamp_n": 1077, "timestamp_u": [466, 1077], "timestep": 779, "timeunit": [37, 46, 66, 68, 338, 437, 439, 466, 478, 715, 770, 771, 772, 773, 942, 948, 1044, 1046, 1077, 1089, 1294], "timezon": [66, 142, 153, 442, 948, 1361], "tip": [577, 828], "titl": [40, 338, 341, 1337, 1342, 1346], "titlecas": [720, 1299], "tm": [439, 467, 948, 1361], "to_arrow": [242, 338, 1318, 1337, 1365], "to_batch": [242, 338], "to_dict": [200, 273, 338, 846, 942, 948], "to_dummi": [295, 300, 338, 1337], "to_fram": [411, 445, 462, 466, 475, 712, 947, 1036, 1211, 1236, 1238, 1283, 1284, 1291, 1337, 1342], "to_init_repr": [130, 338, 1337], "to_jax": [300, 338, 1337], "to_list": [130, 270, 338, 1254, 1266, 1337], "to_lowercas": 609, "to_numpi": [295, 300, 338, 576, 828, 1337], "to_panda": [338, 1337], "to_phys": [828, 1018, 1337], "to_python": 947, "to_seri": [52, 224, 338, 712, 753, 803, 1291, 1360], "to_sql": [38, 338], "to_str": [464, 1075], "to_struct": [338, 684], "to_torch": [295, 338, 1337], "to_uppercas": [349, 608, 685, 828], "togeth": 1360, "token": [37, 41, 45, 46, 47, 48, 49, 148, 150, 152, 154, 155, 156, 157, 177, 182, 338, 942], "tokyo": [130, 948], "tokyo_tz": 948, "toler": [161, 162, 163, 164, 244, 338, 873, 942], "tone": [40, 338], "tonight": [676, 700, 1255, 1279], "too": [14, 263, 338, 395, 618, 828, 942, 998], "tooltip": [338, 341, 1337, 1342], "toomanyrowsreturnederror": [271, 338], "top": [40, 285, 301, 338, 341, 735, 828, 901, 905, 942, 1337, 1342, 1365], "top_col": [40, 338], "top_k": [199, 338, 407, 408, 735, 828, 844, 942, 1010, 1337], "top_k_bi": [407, 408, 734, 828], "top_row": [40, 338], "tor_id": 130, "torch": [160, 300, 338, 1321, 1337], "torchexporttyp": [300, 338], "total": [40, 215, 319, 338, 468, 469, 470, 471, 472, 473, 474, 529, 549, 828, 920, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1096, 1143, 1163, 1337], "total_gross": 1346, "toward": [319, 529, 549, 828, 920, 1143, 1163, 1337], "tp": [1, 54], "tpu": [295, 338, 1316, 1337], "tr15": [695, 1274], "trace": 69, "traceback": [161, 162, 163, 164, 296, 338, 633, 828, 1218, 1318, 1337], "tracebacktyp": 1365, "track": [142, 153, 154, 248, 338, 568, 1365], "trail": [28, 227, 338, 707, 708, 1286, 1287], "train": [300, 338], "train_lf": [914, 942], "transfer": 141, "transferencod": [392, 393, 678, 679, 995, 996, 1257, 1258], "transform": [248, 285, 338, 576, 720, 807, 828, 901, 942, 1299], "transform_dens": [1337, 1342], "transit": [220, 338, 864, 942], "translat": 140, "transpar": [849, 942], "transpos": [263, 338], "travel": [142, 153], "travers": [640, 642, 644, 646, 648, 651, 653, 655, 828, 1224, 1225, 1227, 1230, 1231, 1232, 1337], "treat": [138, 139, 152, 194, 484, 675, 677, 687, 698, 699, 818, 828, 950, 1098, 1254, 1256, 1266, 1277, 1278, 1337], "tree": [593, 860, 942], "tree_format": [860, 942], "trend": [40, 338], "tri": [248, 338], "triangl": [324, 925], "trigger": [39, 135, 246, 297, 338, 828, 1319, 1337], "trigonometri": [1358, 1364], "trim": [130, 1360], "trim_decimal_zero": 28, "trip": 140, "true": [7, 8, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25, 27, 28, 29, 30, 37, 38, 39, 40, 45, 46, 47, 48, 49, 57, 58, 59, 123, 124, 125, 126, 128, 129, 130, 132, 134, 135, 138, 139, 140, 142, 143, 144, 146, 149, 150, 152, 153, 155, 157, 158, 161, 162, 163, 164, 165, 166, 168, 169, 171, 172, 192, 196, 200, 201, 202, 207, 209, 214, 219, 220, 222, 224, 226, 227, 228, 229, 234, 236, 237, 238, 241, 243, 244, 245, 246, 251, 252, 258, 259, 261, 263, 264, 267, 271, 272, 273, 274, 276, 284, 285, 288, 291, 293, 295, 296, 297, 300, 302, 303, 304, 306, 307, 308, 312, 318, 320, 322, 325, 326, 327, 328, 329, 330, 331, 338, 341, 348, 349, 350, 351, 352, 353, 364, 366, 367, 370, 374, 375, 383, 387, 391, 392, 394, 397, 398, 403, 406, 408, 409, 410, 414, 422, 423, 424, 425, 426, 428, 435, 437, 440, 443, 445, 447, 454, 455, 457, 458, 461, 462, 463, 466, 468, 469, 470, 471, 472, 473, 474, 475, 477, 478, 480, 481, 482, 483, 485, 486, 493, 500, 502, 503, 504, 505, 508, 512, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 528, 531, 532, 536, 543, 545, 547, 563, 568, 575, 576, 577, 581, 582, 583, 584, 585, 586, 587, 588, 589, 592, 593, 594, 612, 613, 615, 617, 620, 621, 625, 630, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 663, 664, 668, 670, 671, 674, 675, 676, 677, 678, 680, 686, 687, 688, 690, 691, 692, 698, 699, 703, 704, 706, 712, 714, 715, 717, 719, 723, 725, 726, 735, 737, 740, 743, 744, 745, 746, 747, 749, 752, 753, 754, 759, 768, 771, 777, 783, 787, 790, 794, 800, 803, 806, 807, 810, 812, 815, 818, 819, 828, 846, 847, 848, 849, 850, 854, 856, 860, 863, 864, 867, 868, 872, 873, 874, 876, 878, 882, 887, 889, 893, 898, 900, 901, 906, 907, 908, 909, 912, 917, 919, 921, 923, 926, 927, 928, 929, 930, 931, 932, 941, 942, 947, 948, 955, 956, 968, 970, 971, 974, 978, 979, 987, 994, 995, 997, 1000, 1011, 1012, 1014, 1017, 1019, 1022, 1023, 1036, 1042, 1043, 1044, 1047, 1050, 1051, 1052, 1053, 1054, 1058, 1059, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1072, 1073, 1074, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1092, 1094, 1095, 1097, 1099, 1100, 1107, 1116, 1120, 1122, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1140, 1145, 1146, 1150, 1157, 1159, 1161, 1177, 1190, 1196, 1202, 1204, 1207, 1208, 1211, 1214, 1215, 1229, 1248, 1250, 1253, 1254, 1255, 1256, 1257, 1259, 1265, 1266, 1267, 1269, 1270, 1271, 1277, 1278, 1282, 1283, 1285, 1291, 1293, 1294, 1296, 1298, 1313, 1318, 1319, 1326, 1328, 1337, 1342, 1346, 1347, 1349, 1351, 1355, 1357, 1360, 1365, 1368], "truediv": [497, 828], "truncat": [20, 130, 138, 139, 152, 227, 229, 241, 272, 273, 292, 338, 868, 887, 942, 1364], "truncate_nod": [887, 942], "truncate_ragged_lin": [138, 139, 152], "truncate_str": 475, "truncate_td": 475, "trust": [430, 828, 855, 942], "try": [37, 41, 45, 46, 47, 48, 49, 57, 58, 117, 138, 139, 144, 148, 150, 152, 155, 156, 157, 182, 338, 849, 850, 860, 887, 898, 942], "try_cast": 1358, "try_parse_d": [132, 138, 139, 152], "try_parse_hive_d": [150, 155, 157], "ts_local": [461, 1072], "tseri": [454, 455, 1065, 1066], "tstamp": 948, "tstamp_tokyo": 948, "tstamp_utc": 948, "tue": [338, 341], "tuesdai": [229, 338, 868, 942], "tupl": [40, 60, 141, 143, 149, 197, 241, 248, 261, 271, 272, 273, 280, 300, 316, 338, 592, 634, 828, 887, 898, 942, 947, 948, 1219, 1240, 1337], "turn": [8, 46, 47, 48, 49, 57, 58, 138, 139, 152, 243, 244, 338, 849, 850, 860, 872, 873, 878, 887, 942], "twice": [40, 338], "two": [40, 50, 90, 91, 125, 127, 129, 141, 197, 220, 222, 244, 245, 254, 255, 272, 299, 305, 318, 324, 338, 342, 348, 432, 439, 497, 500, 503, 568, 625, 670, 750, 751, 757, 759, 761, 768, 771, 804, 805, 807, 828, 864, 873, 874, 882, 883, 908, 919, 925, 942, 948, 991, 1039, 1046, 1182, 1211, 1337, 1352, 1353, 1354, 1357, 1366], "two_a": 1365, "tworld": [709, 1286, 1288], "txt": [1, 12, 152, 675, 687, 1266, 1360], "type": [0, 1, 4, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 39, 40, 46, 47, 48, 49, 52, 53, 54, 55, 57, 58, 59, 60, 61, 62, 64, 65, 66, 67, 68, 69, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 123, 125, 126, 127, 128, 129, 131, 138, 139, 140, 142, 143, 147, 148, 149, 150, 152, 153, 154, 155, 156, 157, 160, 161, 162, 163, 164, 165, 167, 168, 169, 170, 172, 194, 197, 203, 213, 216, 222, 227, 229, 230, 242, 243, 248, 270, 275, 278, 290, 295, 296, 299, 300, 303, 315, 338, 350, 352, 355, 356, 357, 358, 359, 360, 363, 368, 369, 370, 372, 375, 386, 387, 391, 392, 393, 394, 395, 396, 397, 409, 411, 412, 413, 417, 418, 419, 420, 421, 428, 429, 435, 436, 438, 440, 441, 442, 443, 444, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 484, 487, 489, 500, 503, 506, 514, 515, 516, 517, 518, 519, 520, 529, 533, 534, 536, 541, 547, 549, 567, 568, 576, 577, 591, 625, 627, 631, 632, 633, 634, 636, 637, 638, 641, 643, 645, 647, 649, 652, 654, 656, 665, 666, 667, 674, 677, 678, 679, 682, 683, 684, 685, 688, 689, 690, 692, 693, 694, 702, 703, 704, 705, 712, 713, 717, 731, 732, 733, 740, 749, 757, 760, 767, 768, 769, 770, 771, 772, 773, 775, 783, 784, 786, 787, 788, 789, 790, 800, 803, 814, 815, 816, 819, 824, 828, 840, 849, 850, 859, 860, 861, 868, 872, 887, 891, 892, 898, 906, 916, 942, 947, 950, 955, 956, 968, 970, 971, 972, 973, 974, 976, 978, 979, 990, 991, 992, 994, 995, 996, 998, 999, 1011, 1013, 1015, 1016, 1024, 1036, 1037, 1042, 1043, 1045, 1047, 1048, 1049, 1050, 1051, 1053, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1076, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1095, 1098, 1102, 1118, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1145, 1146, 1147, 1148, 1150, 1155, 1161, 1163, 1181, 1182, 1204, 1211, 1217, 1218, 1219, 1221, 1222, 1243, 1245, 1253, 1254, 1256, 1257, 1258, 1260, 1261, 1262, 1263, 1264, 1267, 1268, 1269, 1271, 1272, 1273, 1281, 1282, 1283, 1284, 1291, 1292, 1296, 1317, 1318, 1320, 1328, 1337, 1346, 1353, 1358, 1360, 1364, 1365], "type_coercion": [46, 47, 48, 49, 57, 58, 849, 850, 860, 887, 898, 942], "type_json": 184, "type_nam": 184, "type_text": 184, "typeerror": [39, 338], "typenam": [40, 338], "typic": [126, 140, 157, 248, 338, 444, 665, 828, 948, 1051, 1190, 1245, 1337], "tz": [715, 1294], "tzinfo": [66, 142, 153, 948], "u": [40, 66, 68, 157, 170, 244, 338, 437, 439, 445, 466, 478, 712, 715, 745, 747, 770, 771, 772, 773, 779, 873, 942, 947, 948, 1044, 1046, 1052, 1077, 1089, 1291, 1294, 1350, 1361], "u1": [296, 338], "u16": [152, 1363, 1368], "u32": [12, 140, 198, 200, 206, 260, 314, 315, 319, 323, 329, 331, 338, 348, 354, 361, 362, 363, 364, 365, 368, 369, 371, 380, 396, 412, 413, 421, 422, 508, 510, 529, 533, 534, 537, 549, 554, 600, 616, 628, 636, 637, 641, 643, 645, 647, 649, 652, 654, 656, 660, 677, 687, 688, 693, 694, 695, 733, 738, 740, 744, 748, 752, 753, 760, 762, 783, 786, 798, 828, 843, 846, 853, 885, 915, 916, 920, 924, 930, 932, 942, 948, 967, 968, 969, 972, 973, 975, 984, 1011, 1015, 1016, 1018, 1030, 1120, 1147, 1148, 1151, 1163, 1168, 1213, 1221, 1222, 1237, 1256, 1266, 1267, 1272, 1273, 1320, 1324, 1326, 1337, 1346, 1354, 1355, 1356, 1360, 1365], "u64": [230, 315, 338, 506, 630, 828, 887, 916, 942, 948, 1118, 1215, 1337], "u8": [200, 293, 294, 306, 338, 633, 743, 828, 846, 942, 948, 1218, 1313, 1337, 1368], "udf": [174, 248, 262, 324, 338, 430, 577, 622, 790, 828, 855, 886, 925, 942, 1190, 1337], "ufunc": 97, "uid": 140, "uint": 1368, "uint16": [152, 425, 426, 729, 828, 948, 1033, 1034, 1308, 1318, 1321, 1337], "uint2": 1363, "uint32": [131, 160, 200, 215, 270, 315, 338, 363, 368, 369, 396, 412, 413, 421, 484, 500, 503, 529, 533, 534, 549, 631, 636, 637, 638, 641, 643, 645, 647, 649, 652, 654, 656, 677, 688, 693, 694, 733, 760, 783, 786, 828, 846, 891, 916, 942, 948, 968, 972, 973, 999, 1011, 1015, 1016, 1096, 1098, 1147, 1148, 1163, 1221, 1222, 1256, 1267, 1272, 1273, 1320, 1321, 1337], "uint4": 1365, "uint64": [131, 230, 270, 315, 338, 368, 369, 484, 506, 533, 534, 630, 638, 641, 643, 645, 647, 649, 652, 654, 656, 828, 891, 916, 942, 948, 972, 973, 1098, 1118, 1147, 1148, 1215, 1321, 1337], "uint8": [140, 200, 294, 295, 296, 306, 338, 425, 426, 633, 729, 743, 828, 846, 942, 947, 948, 1033, 1034, 1218, 1308, 1321, 1337, 1368], "uint8_pair": 1368, "uit": [702, 1281], "uk": [684, 1263], "unabl": [99, 143], "unalias": 583, "unari": [614, 828], "unbias": [485, 486, 828, 1099, 1100, 1337], "unchang": [215, 338, 632, 733, 828, 878, 925, 942, 1096, 1217, 1320, 1337], "uncompress": [35, 41, 42, 45, 49, 144, 155, 338, 942], "undefin": [736, 828], "under": [37, 41, 45, 46, 47, 48, 49, 50, 52, 53, 54, 55, 90, 91, 148, 150, 152, 155, 156, 157, 180, 181, 182, 263, 285, 338, 820, 821, 823, 824, 829, 830, 833, 835, 836, 837, 901, 942, 1329, 1331, 1333, 1338, 1343, 1344, 1345], "underli": [1, 50, 65, 66, 68, 83, 91, 96, 106, 123, 125, 126, 127, 129, 140, 141, 143, 147, 148, 149, 150, 156, 165, 168, 172, 216, 217, 241, 242, 272, 290, 296, 338, 392, 437, 438, 439, 443, 446, 447, 448, 449, 450, 451, 452, 453, 456, 458, 459, 461, 463, 467, 476, 477, 478, 479, 630, 657, 675, 678, 687, 828, 861, 942, 948, 995, 1018, 1044, 1045, 1046, 1050, 1053, 1054, 1055, 1059, 1060, 1061, 1063, 1064, 1067, 1069, 1070, 1072, 1074, 1078, 1087, 1088, 1089, 1090, 1103, 1215, 1233, 1243, 1254, 1257, 1266, 1312, 1318, 1337, 1365], "understood": 790, "undo": [594, 601, 602, 604, 606, 608, 609], "unexpect": [106, 115, 140, 576, 577, 828, 1190, 1337], "unhelpfulli": [161, 163], "unicod": [20, 413, 689, 694, 695, 702, 713, 948, 1016, 1268, 1273, 1274, 1281, 1292, 1360], "unicodeform": [695, 1274], "unifi": [40, 295, 300, 338, 948], "uniform": [40, 338, 625, 828, 1211, 1337], "unimod": [668, 828, 1248, 1337], "unintend": [220, 338, 864, 942], "union": [57, 58, 59, 560, 849, 850, 860, 887, 898, 942, 948, 1174, 1364, 1365], "uniqu": [45, 49, 51, 69, 135, 143, 165, 166, 167, 170, 172, 198, 238, 243, 259, 263, 273, 329, 338, 354, 365, 380, 428, 525, 554, 600, 625, 712, 714, 715, 719, 738, 740, 748, 798, 828, 843, 872, 930, 942, 958, 969, 984, 1036, 1138, 1168, 1197, 1211, 1291, 1293, 1294, 1298, 1324, 1326, 1337, 1353, 1355], "unique_column_valu": [263, 338], "unique_count": [828, 1337], "uniquekeepstrategi": [303, 338, 906, 942], "unit": [40, 66, 68, 135, 161, 162, 163, 164, 168, 172, 215, 338, 396, 437, 439, 445, 460, 466, 478, 484, 490, 574, 589, 712, 715, 739, 756, 770, 771, 772, 773, 779, 828, 887, 942, 948, 999, 1044, 1046, 1052, 1071, 1077, 1089, 1096, 1098, 1104, 1188, 1291, 1294, 1325, 1337, 1368], "uniti": [177, 178, 180, 181, 182, 190, 840], "unity_catalog": 185, "univers": [194, 950], "unix": [65, 66, 445, 779, 1052], "unknown": [568, 683, 788, 1262], "unless": [40, 51, 125, 295, 300, 338, 707, 708, 803, 942, 1286, 1360], "unlik": [134, 229, 338, 868, 942], "unnam": [685, 1264], "unnest": [134, 338, 428, 625, 636, 684, 685, 704, 705, 725, 727, 740, 828, 942, 991, 1036, 1182, 1211, 1221, 1283, 1284, 1337, 1358, 1364], "unpivot": [254, 338, 882, 942], "unregist": [1348, 1349, 1350, 1365, 1367], "unsaf": [135, 828], "unset": [38, 150, 155, 167, 323, 338, 400, 401, 402, 404, 405, 461, 568, 828, 924, 1003, 1004, 1005, 1007, 1008, 1072, 1337, 1346], "unsign": [84, 85, 86, 87, 630, 828, 948, 1215, 1337], "unsigned_integ": 948, "unstabl": [31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 57, 58, 67, 69, 73, 121, 133, 134, 140, 142, 148, 150, 152, 153, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 285, 295, 300, 307, 338, 341, 342, 427, 428, 508, 577, 625, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 756, 828, 849, 850, 860, 901, 909, 942, 1019, 1035, 1036, 1120, 1211, 1223, 1226, 1228, 1229, 1316, 1321, 1337, 1342], "unstack": 338, "unstackdirect": [306, 338], "unsuit": 122, "unsupport": [39, 338], "until": [90, 229, 246, 338, 696, 697, 722, 868, 942, 1275, 1276, 1301], "up": [10, 40, 82, 141, 241, 244, 263, 272, 273, 279, 292, 338, 416, 417, 577, 689, 698, 699, 713, 828, 872, 873, 878, 896, 942, 948, 1021, 1268, 1277, 1278, 1292, 1337], "upcast": [353, 828], "upcast_integer_typ": [1, 54], "updat": [39, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 192, 207, 338, 854, 942], "updated_at": [183, 186, 187], "updated_bi": [183, 186, 187], "upgrad": 102, "upheld": [878, 942], "upon": 139, "upper": [138, 139, 140, 215, 229, 338, 417, 508, 514, 568, 603, 739, 749, 768, 769, 771, 772, 787, 815, 816, 828, 868, 942, 1024, 1096, 1120, 1125, 1188, 1325, 1337, 1355, 1358], "upper_bound": [229, 338, 417, 514, 568, 828, 868, 942, 1024, 1125, 1188, 1337], "uppercas": [609, 721, 1300, 1360], "upsampl": [229, 338, 868, 942], "urandom": [396, 999], "uri": [38, 39, 140, 141, 142, 153, 154, 338], "url": [140, 141, 150, 155, 157, 177, 683, 685, 1262, 1264], "urllib": 141, "us": [1, 7, 9, 11, 12, 14, 20, 25, 27, 32, 33, 34, 36, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 51, 57, 58, 59, 60, 66, 82, 90, 91, 94, 98, 121, 124, 126, 127, 129, 131, 134, 137, 138, 139, 140, 141, 142, 143, 144, 146, 148, 149, 150, 152, 153, 154, 155, 156, 157, 158, 159, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 174, 177, 198, 199, 200, 203, 207, 209, 211, 212, 218, 219, 220, 222, 228, 229, 236, 238, 240, 241, 242, 244, 248, 254, 258, 259, 261, 262, 263, 270, 271, 272, 273, 274, 276, 277, 279, 284, 285, 286, 290, 292, 293, 294, 295, 296, 297, 300, 301, 302, 303, 305, 306, 307, 308, 309, 312, 313, 314, 315, 317, 324, 338, 341, 348, 350, 352, 354, 363, 364, 387, 392, 393, 395, 408, 410, 412, 413, 414, 417, 427, 430, 433, 434, 442, 460, 461, 462, 464, 467, 475, 478, 480, 483, 484, 485, 486, 487, 491, 492, 493, 497, 508, 512, 513, 514, 526, 540, 556, 564, 568, 570, 576, 577, 580, 601, 604, 606, 608, 609, 618, 625, 628, 630, 632, 634, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 659, 661, 663, 664, 668, 670, 671, 673, 674, 675, 676, 678, 679, 680, 682, 683, 684, 686, 687, 688, 691, 692, 693, 694, 695, 698, 699, 700, 702, 704, 706, 708, 709, 710, 711, 712, 714, 715, 719, 722, 723, 727, 735, 741, 742, 744, 745, 746, 747, 748, 751, 752, 758, 759, 760, 761, 762, 763, 765, 766, 767, 768, 769, 770, 771, 772, 773, 777, 779, 783, 784, 786, 787, 788, 790, 791, 792, 794, 796, 797, 800, 803, 804, 805, 806, 807, 809, 810, 811, 812, 815, 816, 817, 818, 819, 824, 827, 828, 839, 840, 843, 844, 845, 846, 849, 850, 852, 854, 855, 856, 857, 858, 859, 860, 862, 863, 864, 867, 868, 873, 876, 882, 891, 892, 893, 894, 896, 900, 901, 902, 905, 906, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 925, 942, 946, 947, 948, 955, 956, 958, 987, 991, 995, 996, 998, 1015, 1016, 1019, 1035, 1037, 1040, 1041, 1049, 1057, 1058, 1071, 1072, 1073, 1075, 1078, 1086, 1089, 1092, 1097, 1098, 1099, 1100, 1105, 1106, 1111, 1117, 1120, 1123, 1124, 1125, 1140, 1154, 1170, 1177, 1182, 1190, 1211, 1213, 1215, 1217, 1219, 1221, 1222, 1223, 1235, 1236, 1238, 1239, 1242, 1248, 1250, 1252, 1253, 1254, 1255, 1257, 1258, 1261, 1262, 1263, 1265, 1266, 1267, 1272, 1273, 1274, 1277, 1278, 1279, 1281, 1283, 1291, 1293, 1294, 1298, 1301, 1312, 1313, 1315, 1318, 1319, 1327, 1337, 1346, 1347, 1348, 1349, 1350, 1352, 1353, 1360, 1361, 1365, 1368], "usag": [168, 172, 282, 338, 948, 1243, 1337], "usd": [227, 338, 1368], "use_pyarrow": [45, 49, 138, 142, 144, 146, 150, 153, 296, 338, 942, 1318, 1337], "use_pyarrow_extension_arrai": [297, 338, 1319, 1337], "use_pyarrow_write_to_dataset": [45, 338], "use_statist": [150, 157], "user": [38, 133, 135, 140, 141, 194, 248, 262, 324, 338, 576, 577, 622, 661, 790, 828, 886, 925, 942, 946, 950, 1190, 1239, 1337], "user_conn": 140, "usernam": [138, 141, 144, 146], "userwarn": 1, "usr": 140, "usual": [98, 141, 192, 300, 338, 436, 1043], "utc": [142, 153, 436, 440, 442, 444, 461, 712, 715, 947, 948, 1043, 1047, 1051, 1072, 1291, 1294], "utc_tz": 948, "utf": [37, 46, 81, 338, 942], "utf8": [20, 138, 139, 152, 689, 702, 713, 1268, 1281, 1292], "utf8_borders_onli": 20, "utf8_ful": [20, 51, 130], "utf8_full_condens": [7, 20, 130], "utf8_horizontal_onli": 20, "utf8_no_bord": 20, "util": [300, 338, 779, 942], "uvloop": 140, "uvw": [684, 1263], "v": [8, 9, 45, 215, 338, 660, 745, 747, 828, 1237, 1337, 1349, 1350], "v1": 32, "v2": [8, 144, 155], "val": [40, 269, 338, 577, 622, 733, 818, 828, 890, 942], "valid": [37, 40, 46, 66, 138, 140, 144, 146, 150, 152, 172, 192, 209, 215, 243, 244, 267, 338, 427, 675, 677, 683, 684, 685, 687, 692, 698, 699, 818, 828, 856, 872, 873, 889, 917, 942, 948, 1035, 1096, 1254, 1256, 1262, 1263, 1264, 1266, 1271, 1277, 1278, 1337, 1346, 1347], "validate_output_schema": [878, 942], "vals_phys": [733, 828], "valu": [4, 5, 10, 11, 12, 13, 17, 20, 28, 30, 36, 37, 40, 45, 46, 49, 50, 51, 59, 60, 63, 69, 70, 78, 79, 88, 91, 100, 125, 126, 128, 129, 138, 139, 140, 141, 150, 152, 155, 157, 158, 161, 162, 163, 164, 165, 166, 167, 168, 170, 171, 172, 173, 174, 192, 196, 198, 199, 200, 207, 211, 212, 214, 217, 218, 219, 220, 224, 227, 229, 230, 231, 235, 239, 241, 243, 244, 247, 248, 249, 250, 251, 252, 253, 254, 256, 257, 259, 261, 263, 264, 265, 267, 270, 271, 272, 273, 274, 281, 284, 286, 287, 288, 289, 291, 292, 296, 297, 301, 302, 305, 306, 307, 308, 309, 316, 319, 320, 322, 325, 326, 328, 329, 338, 341, 342, 346, 347, 348, 350, 352, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 365, 366, 367, 368, 369, 371, 373, 374, 375, 376, 377, 378, 379, 380, 382, 383, 384, 385, 388, 389, 390, 392, 393, 394, 395, 396, 397, 407, 408, 409, 410, 412, 413, 414, 415, 416, 417, 418, 419, 420, 422, 423, 426, 427, 428, 431, 433, 434, 439, 443, 453, 458, 467, 476, 481, 482, 483, 484, 485, 486, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 519, 520, 521, 522, 523, 524, 525, 527, 528, 529, 531, 532, 533, 534, 537, 538, 539, 542, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 556, 561, 563, 564, 565, 566, 568, 569, 570, 572, 574, 575, 576, 577, 578, 579, 580, 585, 596, 597, 598, 599, 600, 610, 611, 612, 613, 616, 618, 619, 622, 623, 625, 626, 628, 631, 632, 633, 636, 637, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 659, 660, 661, 662, 665, 666, 667, 668, 670, 671, 672, 674, 675, 677, 678, 679, 680, 681, 683, 686, 687, 688, 689, 690, 691, 692, 694, 695, 696, 697, 698, 699, 700, 701, 702, 704, 705, 706, 713, 722, 724, 728, 729, 731, 732, 734, 735, 736, 737, 738, 739, 740, 743, 744, 745, 746, 747, 748, 752, 755, 757, 758, 760, 762, 763, 764, 765, 766, 776, 777, 782, 783, 784, 785, 787, 788, 791, 792, 793, 794, 795, 796, 797, 798, 802, 803, 804, 805, 811, 812, 818, 828, 843, 844, 854, 857, 858, 862, 863, 864, 868, 870, 871, 872, 873, 879, 880, 881, 882, 884, 885, 888, 889, 891, 897, 900, 902, 903, 905, 908, 909, 910, 920, 921, 923, 926, 927, 929, 930, 942, 948, 953, 955, 956, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 970, 971, 972, 973, 975, 977, 978, 979, 980, 981, 982, 983, 984, 986, 987, 988, 989, 992, 993, 995, 996, 997, 998, 999, 1000, 1011, 1012, 1015, 1016, 1017, 1021, 1024, 1026, 1027, 1028, 1030, 1035, 1036, 1037, 1038, 1040, 1041, 1046, 1050, 1064, 1069, 1078, 1087, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1103, 1104, 1105, 1106, 1110, 1111, 1112, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1138, 1143, 1144, 1145, 1146, 1147, 1148, 1151, 1152, 1153, 1156, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1170, 1175, 1177, 1178, 1179, 1180, 1183, 1184, 1190, 1191, 1192, 1194, 1195, 1197, 1199, 1200, 1202, 1203, 1205, 1206, 1210, 1211, 1212, 1213, 1217, 1218, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1235, 1236, 1237, 1238, 1241, 1245, 1246, 1247, 1248, 1250, 1253, 1254, 1256, 1257, 1258, 1259, 1260, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1283, 1284, 1285, 1292, 1301, 1304, 1308, 1309, 1310, 1311, 1318, 1319, 1320, 1324, 1326, 1328, 1337, 1346, 1351, 1353, 1354, 1355, 1356, 1357, 1359, 1360, 1361, 1363, 1365, 1367, 1368], "value1": [671, 828], "value2": [671, 828], "value_a": 1365, "value_b": 1365, "value_count": [738, 828, 1337], "value_cum_sum": [426, 828], "value_cum_sum_all_fil": [426, 828], "value_nam": [254, 305, 338, 882, 908, 942], "value_var": [254, 305, 338, 882, 908, 942], "valueerror": [15, 20], "valueexcept": 788, "var": [40, 173, 338, 655, 656, 828, 942, 1337, 1354], "var_samp": 1354, "vari": [143, 149, 436, 1043, 1368], "variabl": [30, 37, 41, 45, 46, 47, 48, 49, 78, 148, 150, 152, 155, 156, 157, 171, 174, 182, 254, 293, 305, 338, 882, 908, 942, 1313, 1337, 1347, 1349, 1365], "variable_nam": [254, 305, 338, 882, 908, 942], "variad": 140, "varianc": [309, 338, 486, 526, 655, 656, 741, 817, 828, 910, 942, 1100, 1140, 1232, 1327, 1337, 1358], "variou": [140, 197, 203, 338, 828, 851, 942, 947, 948, 1337], "vector": [640, 642, 644, 646, 648, 651, 653, 655, 828, 1224, 1225, 1227, 1230, 1231, 1232, 1337], "vector_index_format": 185, "vectoris": [454, 455, 1065, 1066], "vein": 192, "verbos": [29, 161, 163, 192, 684, 1263], "veri": [140, 241, 302, 338, 577, 828, 925, 1359], "verifi": [244, 338, 873, 942], "versicolor": [338, 341], "version": [38, 39, 56, 60, 138, 139, 142, 143, 153, 160, 165, 166, 167, 168, 172, 175, 182, 196, 198, 208, 230, 243, 254, 278, 285, 295, 296, 300, 314, 319, 338, 341, 430, 442, 454, 455, 467, 478, 499, 506, 584, 585, 591, 595, 632, 674, 682, 727, 742, 751, 759, 802, 807, 828, 843, 855, 860, 872, 882, 895, 901, 914, 915, 920, 942, 948, 1049, 1057, 1058, 1065, 1066, 1078, 1089, 1117, 1118, 1217, 1253, 1261, 1316, 1318, 1321, 1337, 1342], "versu": [207, 338, 854, 942], "vertic": [59, 217, 306, 310, 338, 674, 690, 1253, 1269], "vertical_relax": 59, "via": [30, 138, 139, 140, 150, 152, 155, 156, 157, 195, 197, 208, 241, 272, 338, 430, 577, 685, 828, 855, 942, 951, 1264], "view": [189, 577, 828], "visibl": [17, 215, 338, 1096, 1337], "visit": [427, 828, 1035, 1337], "visual": [236, 238, 338, 592, 898, 942], "volk": 134, "vote": [683, 685, 1262, 1264], "vowel": [698, 699, 1277, 1278], "vstack": [59, 217, 338], "w": [40, 140, 229, 273, 338, 677, 681, 683, 685, 745, 747, 868, 942, 948, 1256, 1260, 1262, 1264, 1287, 1349, 1350, 1353], "w_i": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "wa": [38, 56, 98, 143, 208, 295, 296, 338, 341, 430, 633, 700, 773, 828, 855, 942, 948, 1218, 1279, 1318, 1337, 1342], "wai": [90, 91, 123, 125, 126, 127, 129, 147, 148, 156, 228, 242, 262, 284, 317, 338, 462, 622, 671, 683, 760, 824, 828, 852, 859, 867, 886, 892, 900, 911, 918, 925, 942, 946, 1073, 1262], "walk": 758, "want": [58, 126, 128, 138, 143, 152, 192, 217, 248, 259, 270, 285, 338, 412, 435, 493, 576, 577, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 664, 676, 693, 698, 699, 700, 754, 763, 768, 771, 777, 800, 803, 819, 828, 850, 901, 917, 942, 948, 1015, 1042, 1103, 1190, 1255, 1272, 1277, 1278, 1279, 1337, 1352], "warehous": 141, "warn": [93, 94, 97, 98, 101, 108, 110, 111, 121, 244, 338, 618, 787, 828, 873, 942, 1337], "watermark": [45, 338], "wb": [40, 338], "we": [45, 136, 138, 139, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 197, 207, 208, 229, 244, 263, 270, 308, 338, 341, 430, 457, 462, 475, 508, 540, 568, 576, 577, 638, 641, 643, 645, 647, 649, 652, 654, 656, 685, 698, 699, 717, 767, 768, 769, 770, 771, 772, 788, 815, 816, 818, 828, 854, 855, 868, 873, 878, 891, 942, 1068, 1073, 1086, 1120, 1154, 1190, 1264, 1278, 1296, 1337, 1342, 1349], "weather": [698, 699, 1277, 1278], "wed": [338, 341], "wednesdai": [229, 338, 464, 467, 868, 942, 1075, 1078], "week": [229, 244, 270, 308, 338, 435, 457, 462, 475, 477, 484, 638, 641, 643, 645, 647, 649, 652, 654, 656, 754, 768, 769, 771, 772, 773, 815, 816, 828, 868, 873, 891, 942, 948, 1042, 1068, 1073, 1086, 1088, 1098, 1337, 1361], "week_mask": [435, 754, 1042], "weekdai": [443, 458], "weekend": [435, 754, 1042], "weekli": [229, 338, 475, 868, 942, 1086], "weghorst": [685, 1264], "weight": [134, 483, 484, 485, 486, 639, 640, 642, 644, 646, 648, 651, 653, 655, 668, 828, 1097, 1098, 1099, 1100, 1223, 1224, 1225, 1226, 1227, 1228, 1230, 1231, 1232, 1248, 1337], "wei\u00df": 1360, "well": [40, 138, 139, 140, 152, 338, 514, 807, 828, 1125, 1337, 1365], "were": [192, 632, 633, 824, 828, 1217, 1218, 1337], "west": [69, 245, 338, 874, 942], "what": [197, 259, 338, 435, 576, 676, 700, 828, 1042, 1255, 1279], "whatev": 192, "when": [10, 14, 17, 19, 23, 37, 38, 39, 40, 41, 42, 45, 46, 49, 50, 66, 82, 90, 91, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 110, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 133, 134, 138, 139, 140, 141, 143, 144, 146, 148, 149, 150, 152, 153, 155, 156, 157, 158, 161, 162, 163, 164, 168, 172, 192, 199, 207, 213, 215, 217, 219, 222, 229, 243, 245, 248, 255, 262, 267, 271, 273, 276, 277, 281, 284, 290, 293, 295, 296, 300, 301, 303, 307, 313, 338, 382, 395, 412, 413, 417, 435, 483, 485, 486, 492, 561, 568, 589, 622, 632, 633, 662, 670, 671, 676, 682, 686, 688, 689, 693, 694, 700, 702, 707, 708, 709, 712, 713, 752, 754, 763, 777, 787, 828, 844, 854, 863, 868, 872, 874, 878, 883, 889, 893, 894, 897, 900, 905, 906, 909, 913, 939, 942, 986, 998, 1015, 1016, 1024, 1037, 1042, 1096, 1097, 1099, 1100, 1103, 1106, 1175, 1217, 1218, 1236, 1238, 1241, 1255, 1261, 1265, 1267, 1268, 1272, 1273, 1279, 1281, 1286, 1287, 1288, 1291, 1292, 1312, 1313, 1318, 1337, 1352, 1365], "when_matched_update_al": [39, 338], "when_not_matched_insert_al": [39, 338], "where": [40, 51, 98, 140, 141, 143, 211, 212, 217, 220, 229, 241, 245, 254, 263, 272, 285, 286, 295, 300, 305, 307, 309, 338, 364, 467, 477, 480, 482, 484, 493, 564, 570, 576, 613, 631, 660, 668, 671, 673, 700, 720, 741, 753, 759, 761, 804, 805, 807, 809, 817, 818, 828, 857, 858, 864, 868, 874, 882, 901, 902, 908, 909, 910, 942, 968, 1078, 1088, 1092, 1094, 1098, 1103, 1107, 1202, 1237, 1248, 1252, 1279, 1299, 1327, 1328, 1337, 1346, 1354, 1364, 1365, 1367], "wherea": [138, 152, 270, 338, 410, 414, 462, 475, 610, 611, 638, 828, 891, 942, 1073, 1086, 1199, 1200, 1337], "wherev": [40, 248, 324, 338, 577, 828, 1190, 1337], "whether": [37, 46, 127, 129, 134, 143, 149, 150, 155, 157, 172, 176, 214, 240, 244, 279, 284, 338, 350, 352, 366, 367, 447, 463, 505, 531, 532, 618, 661, 671, 686, 688, 752, 828, 873, 878, 896, 900, 942, 948, 955, 956, 970, 971, 1014, 1019, 1054, 1074, 1095, 1116, 1117, 1145, 1146, 1265, 1267, 1337, 1349, 1365], "which": [1, 6, 10, 20, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 59, 126, 128, 138, 139, 140, 141, 142, 143, 148, 149, 150, 152, 153, 154, 155, 156, 157, 168, 171, 173, 192, 199, 200, 207, 208, 211, 212, 217, 218, 228, 229, 234, 243, 244, 263, 270, 278, 295, 296, 301, 303, 308, 338, 350, 387, 395, 430, 435, 457, 462, 464, 475, 484, 490, 514, 516, 519, 521, 522, 523, 524, 568, 576, 577, 589, 591, 638, 641, 643, 645, 647, 649, 652, 654, 656, 699, 717, 754, 768, 769, 771, 772, 773, 787, 815, 816, 818, 828, 844, 846, 849, 852, 854, 855, 857, 858, 859, 860, 868, 872, 873, 891, 895, 905, 906, 911, 942, 948, 991, 998, 1042, 1068, 1073, 1075, 1086, 1098, 1103, 1104, 1125, 1128, 1131, 1133, 1134, 1135, 1136, 1182, 1238, 1296, 1316, 1318, 1337, 1347, 1353, 1365, 1368], "while": [39, 58, 139, 142, 143, 153, 157, 168, 172, 182, 192, 241, 254, 302, 305, 307, 338, 413, 632, 694, 828, 850, 882, 908, 909, 942, 1016, 1217, 1273, 1337], "white": [40, 338], "whitespac": [130, 707, 708, 709, 1286, 1287, 1288, 1360], "whole": [576, 670, 671, 683, 828, 925, 942, 1262], "whose": [51, 244, 263, 338, 487, 775, 828, 873, 942, 948], "why": [849, 942], "wide": [140, 227, 254, 263, 305, 306, 338, 882, 908, 942], "width": [26, 40, 60, 138, 139, 152, 338, 341, 567, 756, 942, 1181, 1337, 1342], "wiki": 20, "wikipedia": 20, "wildcard": [135, 487, 723, 763, 764, 777, 802, 824, 828], "win_loss": [40, 338], "window": [138, 139, 152, 229, 270, 338, 427, 483, 485, 486, 577, 618, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 757, 804, 805, 828, 868, 891, 942, 1035, 1097, 1099, 1100, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1337], "window_s": [639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 804, 805, 828, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1337], "windowmappingstrategi": [618, 828], "winter": [686, 688, 698, 699, 1265, 1267], "wise": [40, 51, 140, 222, 338, 355, 356, 357, 358, 359, 360, 418, 419, 420, 488, 572, 665, 666, 667, 731, 732, 777, 802, 828, 959, 960, 961, 962, 963, 964, 1026, 1027, 1028, 1101, 1186, 1187, 1245, 1246, 1247, 1310, 1311, 1337], "wish": [199, 301, 338, 407, 408, 734, 735, 828, 844, 905, 942, 1010, 1322, 1337], "with_column": [1, 12, 54, 57, 58, 133, 229, 262, 270, 300, 306, 313, 338, 347, 349, 364, 366, 367, 368, 369, 370, 371, 373, 374, 375, 376, 380, 381, 382, 383, 387, 392, 393, 395, 396, 409, 410, 412, 413, 414, 417, 422, 423, 424, 425, 426, 428, 431, 435, 436, 438, 441, 442, 443, 444, 445, 446, 447, 449, 450, 451, 452, 453, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 476, 477, 479, 481, 482, 484, 491, 492, 497, 502, 504, 506, 512, 513, 514, 517, 518, 520, 521, 522, 523, 524, 528, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 575, 576, 577, 597, 599, 601, 602, 604, 606, 608, 609, 612, 613, 614, 618, 619, 622, 623, 625, 628, 632, 633, 637, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 658, 662, 675, 676, 677, 678, 679, 680, 681, 683, 684, 685, 686, 687, 688, 689, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 713, 716, 717, 718, 720, 721, 722, 724, 727, 728, 733, 736, 743, 745, 747, 750, 754, 755, 756, 757, 758, 763, 764, 766, 767, 769, 770, 774, 784, 787, 789, 792, 794, 797, 808, 812, 814, 816, 818, 824, 828, 849, 850, 860, 868, 870, 886, 887, 891, 898, 913, 942, 948, 1036, 1072, 1211, 1267, 1337, 1365], "with_column_nam": 152, "with_columns_seq": [338, 942], "with_context": 942, "with_field": [577, 828], "with_replac": [274, 338, 556, 659, 828, 1170, 1235, 1337], "with_row_count": [338, 942], "with_row_index": [1, 270, 314, 338, 641, 643, 645, 647, 649, 652, 654, 656, 828, 915, 942, 1236, 1337, 1342], "within": [45, 60, 70, 78, 161, 162, 163, 164, 183, 184, 186, 228, 229, 230, 244, 270, 308, 338, 506, 628, 671, 828, 868, 873, 891, 942, 1118, 1337, 1365], "without": [1, 31, 32, 33, 34, 37, 39, 41, 45, 46, 47, 48, 49, 56, 57, 58, 67, 69, 73, 98, 101, 130, 133, 134, 142, 145, 148, 150, 151, 152, 153, 154, 155, 156, 157, 158, 165, 166, 168, 169, 170, 171, 172, 173, 177, 178, 179, 180, 181, 182, 188, 243, 245, 285, 295, 296, 300, 306, 307, 338, 341, 342, 427, 428, 508, 577, 625, 639, 641, 643, 645, 647, 649, 650, 652, 654, 656, 676, 686, 688, 700, 756, 760, 787, 806, 828, 849, 850, 860, 872, 874, 901, 909, 942, 946, 1014, 1019, 1035, 1036, 1120, 1211, 1223, 1226, 1228, 1229, 1255, 1265, 1267, 1279, 1316, 1318, 1321, 1337, 1342, 1367], "without_fil": [142, 153, 154], "wod": [709, 1288], "womp": [304, 338, 907, 942], "word": [141, 698, 699, 708, 709, 720, 1299], "work": [40, 67, 69, 73, 139, 158, 277, 313, 338, 350, 352, 388, 412, 413, 416, 417, 487, 496, 540, 569, 576, 577, 601, 602, 604, 606, 608, 609, 618, 689, 693, 694, 702, 713, 737, 787, 828, 894, 913, 942, 946, 948, 955, 956, 992, 1015, 1016, 1021, 1024, 1110, 1154, 1183, 1268, 1272, 1273, 1281, 1292, 1323, 1337], "workaround": 338, "workbook": [40, 143, 149, 338], "workday_raas_format": 185, "working_with_conditional_format": [40, 338], "working_with_sparklin": [40, 338], "worksheet": [40, 143, 149, 338], "workspac": 177, "workspace_url": 177, "world": [1, 20, 676, 700, 707, 708, 709, 948, 1161, 1255, 1279, 1286, 1287, 1288, 1348, 1351], "wors": [900, 942], "worth": [540, 1154], "worthwhil": [161, 163], "would": [97, 138, 139, 152, 197, 296, 300, 338, 341, 363, 374, 435, 545, 576, 577, 588, 618, 628, 752, 754, 828, 967, 978, 1042, 1159, 1213, 1318, 1337, 1342, 1363], "wrap": [80, 130, 409, 514, 576, 828, 1011, 1337], "wrap_numer": [409, 828, 1011, 1337], "wrapper": [58, 850, 942], "writabl": [35, 37, 41, 42, 43, 44, 45, 278, 296, 338, 1318, 1337], "write": [35, 36, 37, 38, 39, 40, 41, 42, 45, 46, 47, 48, 49, 137, 139, 144, 192, 203, 338, 417, 592, 595, 828, 876, 898, 942, 948, 1024, 1337], "write_avro": 338, "write_clipboard": [137, 338], "write_csv": [36, 139, 152, 338], "write_databas": 338, "write_delta": 338, "write_excel": 338, "write_ipc": [144, 338], "write_ipc_stream": 338, "write_json": 338, "write_markdown_frame_to_stdout": 192, "write_ndjson": [43, 338], "write_parquet": 338, "write_t": [45, 338], "write_to_dataset": [45, 338], "writeabl": [296, 338, 1318, 1337], "writer": [39, 338], "writer_properti": [39, 338], "writerproperti": [39, 338], "written": [6, 35, 37, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 278, 338, 591, 895, 942], "ww": [1360, 1367], "www": [695, 725, 1274], "x": [27, 51, 59, 82, 100, 124, 130, 138, 139, 141, 143, 149, 152, 165, 166, 168, 196, 215, 233, 236, 238, 243, 263, 272, 273, 302, 305, 306, 338, 341, 347, 349, 351, 370, 375, 396, 422, 429, 481, 482, 497, 502, 504, 506, 528, 535, 547, 573, 575, 576, 577, 597, 599, 600, 602, 603, 604, 605, 606, 607, 608, 609, 612, 613, 617, 623, 631, 632, 633, 637, 665, 668, 704, 727, 728, 733, 736, 743, 745, 747, 750, 751, 757, 763, 764, 766, 777, 788, 789, 792, 794, 797, 802, 807, 812, 818, 828, 872, 878, 899, 901, 908, 942, 947, 948, 979, 1018, 1030, 1106, 1190, 1217, 1218, 1245, 1248, 1283, 1316, 1320, 1321, 1337, 1342, 1349, 1350, 1353, 1359, 1365, 1367], "x00": [391, 392, 393, 394, 395, 397, 678, 994, 995, 996, 997, 998, 1000, 1257], "x01": [395, 998], "x05": [395, 998], "x07": 396, "x1": 396, "x10": [395, 998], "x80": 396, "x83": 396, "x88": 396, "x8e": 396, "x99": 396, "x_": [484, 828, 1098, 1337], "x_0": [306, 338, 483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337], "x_1": [306, 338, 484, 828, 1098, 1337], "x_2": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "x_i": [484, 828, 1098, 1337], "x_invers": [623, 828], "x_pow_8": 1359, "x_round": 1359, "x_round_1": 1359, "x_squar": [623, 828], "x_t": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "x_uniqu": [600, 828], "x_y": [375, 547], "xb": 396, "xb9neq": 396, "xbd": 396, "xc14": 396, "xd3": 396, "xdist": 1368, "xee": 396, "xf4v": 396, "xf9": 396, "xfb": 396, "xff": [391, 392, 393, 394, 397, 678, 994, 995, 996, 997, 1000, 1257], "xi": [684, 1263], "xl": 143, "xlog2": [599, 623, 828], "xlsb": 143, "xlsx": [40, 143, 338], "xlsx2csv": [143, 160], "xlsxwriter": [40, 160, 338], "xor": [406, 828, 1009, 1337, 1356], "xor_xi": [743, 828], "xx": [10, 52, 54, 172, 207, 285, 338, 854, 942, 948, 1353, 1360, 1367], "xxx": [211, 338, 725, 857, 942], "xy": [52, 54], "xyz": [7, 16, 18, 19, 20, 21, 22, 23, 24, 25, 347, 677, 684, 828, 1256, 1263, 1314, 1337], "y": [27, 51, 59, 82, 100, 124, 130, 165, 166, 168, 196, 215, 236, 238, 243, 263, 272, 273, 302, 305, 306, 338, 341, 347, 349, 351, 370, 375, 396, 464, 467, 481, 482, 502, 504, 528, 535, 547, 575, 577, 600, 602, 604, 606, 608, 609, 612, 613, 617, 631, 632, 633, 637, 712, 714, 715, 727, 736, 743, 745, 747, 750, 751, 766, 773, 788, 792, 794, 797, 807, 812, 828, 872, 899, 901, 908, 942, 947, 948, 979, 1018, 1075, 1078, 1217, 1218, 1291, 1293, 1294, 1337, 1342, 1353, 1360, 1361, 1367], "y_": [483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337], "y_0": [306, 338, 483, 484, 485, 486, 828, 1097, 1098, 1099, 1100, 1337], "y_1": [306, 338], "y_i": [484, 828, 1098, 1337], "y_mul": 727, "y_t": [483, 485, 486, 828, 1097, 1099, 1100, 1337], "y_uniqu": [600, 828], "ya": [702, 1281], "ya29": 154, "year": [229, 244, 270, 285, 308, 338, 435, 447, 448, 457, 458, 460, 462, 475, 476, 638, 641, 643, 645, 647, 649, 652, 654, 656, 754, 767, 768, 769, 770, 771, 772, 815, 816, 828, 868, 873, 891, 942, 948, 1042, 1054, 1055, 1068, 1069, 1071, 1073, 1086, 1087, 1361], "yellow": [338, 342, 391, 392, 393, 394, 397], "yield": [127, 129, 138, 139, 140, 152, 215, 217, 240, 302, 338, 497, 576, 618, 828, 942, 1096, 1103, 1337], "you": [1, 10, 14, 40, 45, 49, 51, 58, 59, 123, 125, 126, 127, 128, 129, 135, 138, 139, 140, 141, 143, 144, 147, 148, 152, 156, 158, 192, 199, 217, 220, 229, 240, 241, 244, 248, 259, 263, 270, 271, 272, 273, 285, 292, 295, 301, 302, 303, 305, 324, 338, 341, 407, 408, 412, 435, 454, 455, 457, 461, 464, 467, 487, 493, 514, 540, 568, 576, 577, 592, 618, 623, 630, 638, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 651, 652, 653, 654, 655, 656, 664, 676, 693, 698, 699, 700, 720, 723, 734, 735, 754, 763, 768, 771, 773, 777, 787, 790, 800, 803, 807, 819, 828, 844, 850, 864, 868, 873, 891, 898, 901, 905, 906, 908, 917, 925, 942, 946, 948, 1010, 1015, 1042, 1065, 1066, 1072, 1075, 1078, 1103, 1125, 1154, 1190, 1209, 1215, 1255, 1272, 1277, 1278, 1279, 1299, 1316, 1322, 1337, 1342, 1347, 1352, 1368], "your": [38, 40, 50, 51, 91, 133, 138, 139, 140, 141, 143, 158, 192, 241, 243, 248, 272, 273, 276, 292, 312, 317, 324, 338, 341, 440, 484, 499, 577, 685, 712, 714, 715, 722, 790, 828, 872, 878, 893, 912, 918, 925, 942, 946, 1047, 1098, 1190, 1264, 1291, 1293, 1294, 1301, 1337, 1342, 1368], "yy": [10, 52, 54, 172, 207, 285, 338, 854, 942, 948, 1353, 1360, 1367], "yyi": [211, 338, 725, 857, 942], "yyyi": [40, 338], "yz": [52, 54], "z": [40, 59, 82, 130, 166, 215, 236, 238, 243, 272, 273, 302, 305, 306, 338, 347, 349, 351, 506, 535, 577, 602, 604, 606, 608, 609, 617, 631, 632, 633, 676, 684, 686, 688, 700, 712, 715, 745, 747, 766, 792, 794, 797, 803, 807, 812, 828, 872, 899, 901, 908, 942, 947, 948, 1106, 1217, 1218, 1255, 1263, 1265, 1267, 1279, 1291, 1294, 1337, 1349, 1353, 1365, 1367], "z_0": [306, 338], "z_1": [306, 338], "zap": 948, "zero": [28, 40, 123, 124, 136, 138, 139, 144, 146, 150, 167, 170, 196, 219, 229, 241, 271, 285, 290, 296, 297, 338, 492, 568, 573, 660, 668, 722, 736, 828, 847, 863, 868, 942, 1023, 1106, 1182, 1248, 1301, 1312, 1318, 1319, 1337, 1359, 1365], "zero_copy_onli": [1318, 1337], "zfill": [697, 743, 828, 1276], "zip": 1368, "zip_with": [222, 338, 1337], "zone": [66, 168, 169, 172, 436, 440, 461, 484, 715, 770, 771, 772, 828, 948, 1043, 1047, 1072, 1098, 1294, 1337], "zoneinfo": [66, 948], "zoom": [40, 338], "zstd": [39, 41, 42, 45, 47, 49, 338, 942], "zz": [172, 207, 285, 338, 854, 942, 1353, 1360, 1367], "zzz": 725, "\u03bc": [130, 200, 229, 241, 270, 272, 273, 292, 308, 338, 436, 437, 439, 440, 441, 442, 444, 446, 449, 451, 452, 454, 455, 456, 457, 461, 462, 463, 464, 465, 467, 468, 469, 470, 471, 472, 473, 474, 475, 478, 638, 641, 643, 645, 647, 649, 652, 654, 656, 712, 715, 770, 771, 772, 773, 779, 828, 846, 868, 891, 942, 948, 1043, 1044, 1046, 1047, 1048, 1049, 1051, 1052, 1053, 1058, 1059, 1063, 1065, 1066, 1067, 1068, 1072, 1073, 1076, 1077, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1089, 1291, 1294, 1360], "\u0441\u0438\u043d\u0438\u0439": 1360, "\u0967\u096f\u096f\u096f": 948, "\u0968\u0966\u096d\u096d": 948, "\u4eac\u90fd": 948, "\u5927\u962a": 948, "\u6771\u4eac": [412, 413, 693, 694, 948, 1015, 1016, 1272, 1273], "\u90fd\u5e02": 948, "\uff4b\uff41\uff44\uff4f\uff4b\uff41\uff57\uff41": [695, 1274], "\uff54\uff45\uff53\uff54": 1360, "\ud835\udd4b\ud835\udd56\ud835\udd64\ud835\udd65": 1360, "\ud835\udd7f\ud835\udd8a\ud835\udd98\ud835\udd99": 1360, "\ud835\udde7\ud835\uddf2\ud835\ude00\ud835\ude01": 1360, "\ud835\udf0b": 1359}, "titles": ["Index", "Extending the API", "polars.Config.load", "polars.Config.load_from_file", "polars.Config.restore_defaults", "polars.Config.save", "polars.Config.save_to_file", "polars.Config.set_ascii_tables", "polars.Config.set_auto_structify", "polars.Config.set_decimal_separator", "polars.Config.set_float_precision", "polars.Config.set_fmt_float", "polars.Config.set_fmt_str_lengths", "polars.Config.set_fmt_table_cell_list_len", "polars.Config.set_streaming_chunk_size", "polars.Config.set_tbl_cell_alignment", "polars.Config.set_tbl_cell_numeric_alignment", "polars.Config.set_tbl_cols", "polars.Config.set_tbl_column_data_type_inline", "polars.Config.set_tbl_dataframe_shape_below", "polars.Config.set_tbl_formatting", "polars.Config.set_tbl_hide_column_data_types", "polars.Config.set_tbl_hide_column_names", "polars.Config.set_tbl_hide_dataframe_shape", "polars.Config.set_tbl_hide_dtype_separator", "polars.Config.set_tbl_rows", "polars.Config.set_tbl_width_chars", "polars.Config.set_thousands_separator", "polars.Config.set_trim_decimal_zeros", "polars.Config.set_verbose", "polars.Config.state", "polars.CredentialProvider", "polars.CredentialProviderAWS", "polars.CredentialProviderAzure", "polars.CredentialProviderGCP", "polars.DataFrame.write_avro", "polars.DataFrame.write_clipboard", "polars.DataFrame.write_csv", "polars.DataFrame.write_database", "polars.DataFrame.write_delta", "polars.DataFrame.write_excel", "polars.DataFrame.write_ipc", "polars.DataFrame.write_ipc_stream", "polars.DataFrame.write_json", "polars.DataFrame.write_ndjson", "polars.DataFrame.write_parquet", "polars.LazyFrame.sink_csv", "polars.LazyFrame.sink_ipc", "polars.LazyFrame.sink_ndjson", "polars.LazyFrame.sink_parquet", "polars.StringCache", "polars.align_frames", "polars.api.register_dataframe_namespace", "polars.api.register_expr_namespace", "polars.api.register_lazyframe_namespace", "polars.api.register_series_namespace", "polars.build_info", "polars.collect_all", "polars.collect_all_async", "polars.concat", "polars.datatypes.Array", "polars.datatypes.Binary", "polars.datatypes.Boolean", "polars.datatypes.Categorical", "polars.datatypes.DataType", "polars.datatypes.Date", "polars.datatypes.Datetime", "polars.datatypes.Decimal", "polars.datatypes.Duration", "polars.datatypes.Enum", "polars.datatypes.Field", "polars.datatypes.Float32", "polars.datatypes.Float64", "polars.datatypes.Int128", "polars.datatypes.Int16", "polars.datatypes.Int32", "polars.datatypes.Int64", "polars.datatypes.Int8", "polars.datatypes.List", "polars.datatypes.Null", "polars.datatypes.Object", "polars.datatypes.String", "polars.datatypes.Struct", "polars.datatypes.Time", "polars.datatypes.UInt16", "polars.datatypes.UInt32", "polars.datatypes.UInt64", "polars.datatypes.UInt8", "polars.datatypes.Unknown", "polars.datatypes.Utf8", "polars.disable_string_cache", "polars.enable_string_cache", "polars.escape_regex", "polars.exceptions.CategoricalRemappingWarning", "polars.exceptions.ChronoFormatWarning", "polars.exceptions.ColumnNotFoundError", "polars.exceptions.ComputeError", "polars.exceptions.CustomUFuncWarning", "polars.exceptions.DataOrientationWarning", "polars.exceptions.DuplicateError", "polars.exceptions.InvalidOperationError", "polars.exceptions.MapWithoutReturnDtypeWarning", "polars.exceptions.ModuleUpgradeRequiredError", "polars.exceptions.NoDataError", "polars.exceptions.NoRowsReturnedError", "polars.exceptions.OutOfBoundsError", "polars.exceptions.PanicException", "polars.exceptions.ParameterCollisionError", "polars.exceptions.PerformanceWarning", "polars.exceptions.PolarsError", "polars.exceptions.PolarsInefficientMapWarning", "polars.exceptions.PolarsWarning", "polars.exceptions.RowsError", "polars.exceptions.SQLInterfaceError", "polars.exceptions.SQLSyntaxError", "polars.exceptions.SchemaError", "polars.exceptions.SchemaFieldNotFoundError", "polars.exceptions.ShapeError", "polars.exceptions.StringCacheMismatchError", "polars.exceptions.StructFieldNotFoundError", "polars.exceptions.TooManyRowsReturnedError", "polars.exceptions.UnstableWarning", "polars.exceptions.UnsuitableSQLError", "polars.from_arrow", "polars.from_dataframe", "polars.from_dict", "polars.from_dicts", "polars.from_numpy", "polars.from_pandas", "polars.from_records", "polars.from_repr", "polars.get_index_type", "polars.io.csv.batched_reader.BatchedCsvReader.next_batches", "polars.io.plugins.register_io_source", "polars.json_normalize", "polars.plugins.register_plugin_function", "polars.read_avro", "polars.read_clipboard", "polars.read_csv", "polars.read_csv_batched", "polars.read_database", "polars.read_database_uri", "polars.read_delta", "polars.read_excel", "polars.read_ipc", "polars.read_ipc_schema", "polars.read_ipc_stream", "polars.read_json", "polars.read_ndjson", "polars.read_ods", "polars.read_parquet", "polars.read_parquet_schema", "polars.scan_csv", "polars.scan_delta", "polars.scan_iceberg", "polars.scan_ipc", "polars.scan_ndjson", "polars.scan_parquet", "polars.scan_pyarrow_dataset", "polars.set_random_seed", "polars.show_versions", "polars.testing.assert_frame_equal", "polars.testing.assert_frame_not_equal", "polars.testing.assert_series_equal", "polars.testing.assert_series_not_equal", "polars.testing.parametric.column", "polars.testing.parametric.columns", "polars.testing.parametric.create_list_strategy", "polars.testing.parametric.dataframes", "polars.testing.parametric.dtypes", "polars.testing.parametric.lists", "polars.testing.parametric.load_profile", "polars.testing.parametric.series", "polars.testing.parametric.set_profile", "polars.thread_pool_size", "polars.threadpool_size", "polars.using_string_cache", "polars.Catalog", "polars.Catalog.get_table_info", "polars.Catalog.list_catalogs", "polars.Catalog.list_namespaces", "polars.Catalog.list_tables", "polars.Catalog.scan_table", "polars.catalog.unity.CatalogInfo", "polars.catalog.unity.ColumnInfo", "polars.catalog.unity.DataSourceFormat", "polars.catalog.unity.NamespaceInfo", "polars.catalog.unity.TableInfo", "polars.catalog.unity.TableInfo.get_polars_schema", "polars.catalog.unity.TableType", "Catalog", "Unity Catalog", "Config", "Aggregation", "polars.DataFrame.__array__", "polars.DataFrame.__arrow_c_stream__", "polars.DataFrame.__dataframe__", "polars.DataFrame.__getitem__", "polars.DataFrame.approx_n_unique", "polars.DataFrame.bottom_k", "polars.DataFrame.cast", "polars.DataFrame.clear", "polars.DataFrame.clone", "polars.DataFrame.collect_schema", "polars.DataFrame.columns", "polars.DataFrame.corr", "polars.DataFrame.count", "polars.DataFrame.describe", "polars.DataFrame.deserialize", "polars.DataFrame.drop", "polars.DataFrame.drop_in_place", "polars.DataFrame.drop_nans", "polars.DataFrame.drop_nulls", "polars.DataFrame.dtypes", "polars.DataFrame.equals", "polars.DataFrame.estimated_size", "polars.DataFrame.explode", "polars.DataFrame.extend", "polars.DataFrame.fill_nan", "polars.DataFrame.fill_null", "polars.DataFrame.filter", "polars.DataFrame.flags", "polars.DataFrame.fold", "polars.DataFrame.gather_every", "polars.DataFrame.get_column", "polars.DataFrame.get_column_index", "polars.DataFrame.get_columns", "polars.DataFrame.glimpse", "polars.DataFrame.group_by", "polars.DataFrame.group_by_dynamic", "polars.DataFrame.hash_rows", "polars.DataFrame.head", "polars.DataFrame.height", "polars.DataFrame.hstack", "polars.DataFrame.insert_column", "polars.DataFrame.interpolate", "polars.DataFrame.is_duplicated", "polars.DataFrame.is_empty", "polars.DataFrame.is_unique", "polars.DataFrame.item", "polars.DataFrame.iter_columns", "polars.DataFrame.iter_rows", "polars.DataFrame.iter_slices", "polars.DataFrame.join", "polars.DataFrame.join_asof", "polars.DataFrame.join_where", "polars.DataFrame.lazy", "polars.DataFrame.limit", "polars.DataFrame.map_rows", "polars.DataFrame.max", "polars.DataFrame.max_horizontal", "polars.DataFrame.mean", "polars.DataFrame.mean_horizontal", "polars.DataFrame.median", "polars.DataFrame.melt", "polars.DataFrame.merge_sorted", "polars.DataFrame.min", "polars.DataFrame.min_horizontal", "polars.DataFrame.n_chunks", "polars.DataFrame.n_unique", "polars.DataFrame.null_count", "polars.DataFrame.partition_by", "polars.DataFrame.pipe", "polars.DataFrame.pivot", "polars.DataFrame.product", "polars.DataFrame.quantile", "polars.DataFrame.rechunk", "polars.DataFrame.rename", "polars.DataFrame.replace_column", "polars.DataFrame.reverse", "polars.DataFrame.rolling", "polars.DataFrame.row", "polars.DataFrame.rows", "polars.DataFrame.rows_by_key", "polars.DataFrame.sample", "polars.DataFrame.schema", "polars.DataFrame.select", "polars.DataFrame.select_seq", "polars.DataFrame.serialize", "polars.DataFrame.set_sorted", "polars.DataFrame.shape", "polars.DataFrame.shift", "polars.DataFrame.shrink_to_fit", "polars.DataFrame.slice", "polars.DataFrame.sort", "polars.DataFrame.sql", "polars.DataFrame.std", "polars.DataFrame.sum", "polars.DataFrame.sum_horizontal", "polars.DataFrame.tail", "polars.DataFrame.to_arrow", "polars.DataFrame.to_dict", "polars.DataFrame.to_dicts", "polars.DataFrame.to_dummies", "polars.DataFrame.to_init_repr", "polars.DataFrame.to_jax", "polars.DataFrame.to_numpy", "polars.DataFrame.to_pandas", "polars.DataFrame.to_series", "polars.DataFrame.to_struct", "polars.DataFrame.to_torch", "polars.DataFrame.top_k", "polars.DataFrame.transpose", "polars.DataFrame.unique", "polars.DataFrame.unnest", "polars.DataFrame.unpivot", "polars.DataFrame.unstack", "polars.DataFrame.update", "polars.DataFrame.upsample", "polars.DataFrame.var", "polars.DataFrame.vstack", "polars.DataFrame.width", "polars.DataFrame.with_columns", "polars.DataFrame.with_columns_seq", "polars.DataFrame.with_row_count", "polars.DataFrame.with_row_index", "polars.dataframe.group_by.GroupBy.__iter__", "polars.dataframe.group_by.GroupBy.agg", "polars.dataframe.group_by.GroupBy.all", "polars.dataframe.group_by.GroupBy.count", "polars.dataframe.group_by.GroupBy.first", "polars.dataframe.group_by.GroupBy.head", "polars.dataframe.group_by.GroupBy.last", "polars.dataframe.group_by.GroupBy.len", "polars.dataframe.group_by.GroupBy.map_groups", "polars.dataframe.group_by.GroupBy.max", "polars.dataframe.group_by.GroupBy.mean", "polars.dataframe.group_by.GroupBy.median", "polars.dataframe.group_by.GroupBy.min", "polars.dataframe.group_by.GroupBy.n_unique", "polars.dataframe.group_by.GroupBy.quantile", "polars.dataframe.group_by.GroupBy.sum", "polars.dataframe.group_by.GroupBy.tail", "Attributes", "Computation", "Descriptive", "Export", "GroupBy", "DataFrame", "Miscellaneous", "Manipulation/selection", "Plot", "Style", "Data types", "Exceptions", "Aggregation", "polars.Expr.abs", "polars.Expr.add", "polars.Expr.agg_groups", "polars.Expr.alias", "polars.Expr.all", "polars.Expr.and_", "polars.Expr.any", "polars.Expr.append", "polars.Expr.approx_n_unique", "polars.Expr.arccos", "polars.Expr.arccosh", "polars.Expr.arcsin", "polars.Expr.arcsinh", "polars.Expr.arctan", "polars.Expr.arctanh", "polars.Expr.arg_max", "polars.Expr.arg_min", "polars.Expr.arg_sort", "polars.Expr.arg_true", "polars.Expr.arg_unique", "polars.Expr.arr.all", "polars.Expr.arr.any", "polars.Expr.arr.arg_max", "polars.Expr.arr.arg_min", "polars.Expr.arr.contains", "polars.Expr.arr.count_matches", "polars.Expr.arr.explode", "polars.Expr.arr.first", "polars.Expr.arr.get", "polars.Expr.arr.join", "polars.Expr.arr.last", "polars.Expr.arr.max", "polars.Expr.arr.median", "polars.Expr.arr.min", "polars.Expr.arr.n_unique", "polars.Expr.arr.reverse", "polars.Expr.arr.shift", "polars.Expr.arr.sort", "polars.Expr.arr.std", "polars.Expr.arr.sum", "polars.Expr.arr.to_list", "polars.Expr.arr.to_struct", "polars.Expr.arr.unique", "polars.Expr.arr.var", "polars.Expr.backward_fill", "polars.Expr.bin.contains", "polars.Expr.bin.decode", "polars.Expr.bin.encode", "polars.Expr.bin.ends_with", "polars.Expr.bin.reinterpret", "polars.Expr.bin.size", "polars.Expr.bin.starts_with", "polars.Expr.bitwise_and", "polars.Expr.bitwise_count_ones", "polars.Expr.bitwise_count_zeros", "polars.Expr.bitwise_leading_ones", "polars.Expr.bitwise_leading_zeros", "polars.Expr.bitwise_or", "polars.Expr.bitwise_trailing_ones", "polars.Expr.bitwise_trailing_zeros", "polars.Expr.bitwise_xor", "polars.Expr.bottom_k", "polars.Expr.bottom_k_by", "polars.Expr.cast", "polars.Expr.cat.ends_with", "polars.Expr.cat.get_categories", "polars.Expr.cat.len_bytes", "polars.Expr.cat.len_chars", "polars.Expr.cat.starts_with", "polars.Expr.cbrt", "polars.Expr.ceil", "polars.Expr.clip", "polars.Expr.cos", "polars.Expr.cosh", "polars.Expr.cot", "polars.Expr.count", "polars.Expr.cum_count", "polars.Expr.cum_max", "polars.Expr.cum_min", "polars.Expr.cum_prod", "polars.Expr.cum_sum", "polars.Expr.cumulative_eval", "polars.Expr.cut", "polars.Expr.degrees", "polars.Expr.deserialize", "polars.Expr.diff", "polars.Expr.dot", "polars.Expr.drop_nans", "polars.Expr.drop_nulls", "polars.Expr.dt.add_business_days", "polars.Expr.dt.base_utc_offset", "polars.Expr.dt.cast_time_unit", "polars.Expr.dt.century", "polars.Expr.dt.combine", "polars.Expr.dt.convert_time_zone", "polars.Expr.dt.date", "polars.Expr.dt.datetime", "polars.Expr.dt.day", "polars.Expr.dt.dst_offset", "polars.Expr.dt.epoch", "polars.Expr.dt.hour", "polars.Expr.dt.is_leap_year", "polars.Expr.dt.iso_year", "polars.Expr.dt.microsecond", "polars.Expr.dt.millennium", "polars.Expr.dt.millisecond", "polars.Expr.dt.minute", "polars.Expr.dt.month", "polars.Expr.dt.month_end", "polars.Expr.dt.month_start", "polars.Expr.dt.nanosecond", "polars.Expr.dt.offset_by", "polars.Expr.dt.ordinal_day", "polars.Expr.dt.quarter", "polars.Expr.dt.replace", "polars.Expr.dt.replace_time_zone", "polars.Expr.dt.round", "polars.Expr.dt.second", "polars.Expr.dt.strftime", "polars.Expr.dt.time", "polars.Expr.dt.timestamp", "polars.Expr.dt.to_string", "polars.Expr.dt.total_days", "polars.Expr.dt.total_hours", "polars.Expr.dt.total_microseconds", "polars.Expr.dt.total_milliseconds", "polars.Expr.dt.total_minutes", "polars.Expr.dt.total_nanoseconds", "polars.Expr.dt.total_seconds", "polars.Expr.dt.truncate", "polars.Expr.dt.week", "polars.Expr.dt.weekday", "polars.Expr.dt.with_time_unit", "polars.Expr.dt.year", "polars.Expr.entropy", "polars.Expr.eq", "polars.Expr.eq_missing", "polars.Expr.ewm_mean", "polars.Expr.ewm_mean_by", "polars.Expr.ewm_std", "polars.Expr.ewm_var", "polars.Expr.exclude", "polars.Expr.exp", "polars.Expr.explode", "polars.Expr.extend_constant", "polars.Expr.fill_nan", "polars.Expr.fill_null", "polars.Expr.filter", "polars.Expr.first", "polars.Expr.flatten", "polars.Expr.floor", "polars.Expr.floordiv", "polars.Expr.forward_fill", "polars.Expr.from_json", "polars.Expr.gather", "polars.Expr.gather_every", "polars.Expr.ge", "polars.Expr.get", "polars.Expr.gt", "polars.Expr.has_nulls", "polars.Expr.hash", "polars.Expr.head", "polars.Expr.hist", "polars.Expr.implode", "polars.Expr.index_of", "polars.Expr.inspect", "polars.Expr.interpolate", "polars.Expr.interpolate_by", "polars.Expr.is_between", "polars.Expr.is_duplicated", "polars.Expr.is_finite", "polars.Expr.is_first_distinct", "polars.Expr.is_in", "polars.Expr.is_infinite", "polars.Expr.is_last_distinct", "polars.Expr.is_nan", "polars.Expr.is_not_nan", "polars.Expr.is_not_null", "polars.Expr.is_null", "polars.Expr.is_unique", "polars.Expr.kurtosis", "polars.Expr.last", "polars.Expr.le", "polars.Expr.len", "polars.Expr.limit", "polars.Expr.list.all", "polars.Expr.list.any", "polars.Expr.list.arg_max", "polars.Expr.list.arg_min", "polars.Expr.list.concat", "polars.Expr.list.contains", "polars.Expr.list.count_matches", "polars.Expr.list.diff", "polars.Expr.list.drop_nulls", "polars.Expr.list.eval", "polars.Expr.list.explode", "polars.Expr.list.first", "polars.Expr.list.gather", "polars.Expr.list.gather_every", "polars.Expr.list.get", "polars.Expr.list.head", "polars.Expr.list.join", "polars.Expr.list.last", "polars.Expr.list.len", "polars.Expr.list.max", "polars.Expr.list.mean", "polars.Expr.list.median", "polars.Expr.list.min", "polars.Expr.list.n_unique", "polars.Expr.list.reverse", "polars.Expr.list.sample", "polars.Expr.list.set_difference", "polars.Expr.list.set_intersection", "polars.Expr.list.set_symmetric_difference", "polars.Expr.list.set_union", "polars.Expr.list.shift", "polars.Expr.list.slice", "polars.Expr.list.sort", "polars.Expr.list.std", "polars.Expr.list.sum", "polars.Expr.list.tail", "polars.Expr.list.to_array", "polars.Expr.list.to_struct", "polars.Expr.list.unique", "polars.Expr.list.var", "polars.Expr.log", "polars.Expr.log10", "polars.Expr.log1p", "polars.Expr.lower_bound", "polars.Expr.lt", "polars.Expr.map_batches", "polars.Expr.map_elements", "polars.Expr.max", "polars.Expr.mean", "polars.Expr.median", "polars.Expr.meta.eq", "polars.Expr.meta.has_multiple_outputs", "polars.Expr.meta.is_column", "polars.Expr.meta.is_column_selection", "polars.Expr.meta.is_literal", "polars.Expr.meta.is_regex_projection", "polars.Expr.meta.ne", "polars.Expr.meta.output_name", "polars.Expr.meta.pop", "polars.Expr.meta.root_names", "polars.Expr.meta.serialize", "polars.Expr.meta.show_graph", "polars.Expr.meta.tree_format", "polars.Expr.meta.undo_aliases", "polars.Expr.meta.write_json", "polars.Expr.min", "polars.Expr.mod", "polars.Expr.mode", "polars.Expr.mul", "polars.Expr.n_unique", "polars.Expr.name.keep", "polars.Expr.name.map", "polars.Expr.name.map_fields", "polars.Expr.name.prefix", "polars.Expr.name.prefix_fields", "polars.Expr.name.suffix", "polars.Expr.name.suffix_fields", "polars.Expr.name.to_lowercase", "polars.Expr.name.to_uppercase", "polars.Expr.nan_max", "polars.Expr.nan_min", "polars.Expr.ne", "polars.Expr.ne_missing", "polars.Expr.neg", "polars.Expr.not_", "polars.Expr.null_count", "polars.Expr.or_", "polars.Expr.over", "polars.Expr.pct_change", "polars.Expr.peak_max", "polars.Expr.peak_min", "polars.Expr.pipe", "polars.Expr.pow", "polars.Expr.product", "polars.Expr.qcut", "polars.Expr.quantile", "polars.Expr.radians", "polars.Expr.rank", "polars.Expr.rechunk", "polars.Expr.reinterpret", "polars.Expr.repeat_by", "polars.Expr.replace", "polars.Expr.replace_strict", "polars.Expr.reshape", "polars.Expr.reverse", "polars.Expr.rle", "polars.Expr.rle_id", "polars.Expr.rolling", "polars.Expr.rolling_map", "polars.Expr.rolling_max", "polars.Expr.rolling_max_by", "polars.Expr.rolling_mean", "polars.Expr.rolling_mean_by", "polars.Expr.rolling_median", "polars.Expr.rolling_median_by", "polars.Expr.rolling_min", "polars.Expr.rolling_min_by", "polars.Expr.rolling_quantile", "polars.Expr.rolling_quantile_by", "polars.Expr.rolling_skew", "polars.Expr.rolling_std", "polars.Expr.rolling_std_by", "polars.Expr.rolling_sum", "polars.Expr.rolling_sum_by", "polars.Expr.rolling_var", "polars.Expr.rolling_var_by", "polars.Expr.round", "polars.Expr.round_sig_figs", "polars.Expr.sample", "polars.Expr.search_sorted", "polars.Expr.set_sorted", "polars.Expr.shift", "polars.Expr.shrink_dtype", "polars.Expr.shuffle", "polars.Expr.sign", "polars.Expr.sin", "polars.Expr.sinh", "polars.Expr.skew", "polars.Expr.slice", "polars.Expr.sort", "polars.Expr.sort_by", "polars.Expr.sqrt", "polars.Expr.std", "polars.Expr.str.concat", "polars.Expr.str.contains", "polars.Expr.str.contains_any", "polars.Expr.str.count_matches", "polars.Expr.str.decode", "polars.Expr.str.encode", "polars.Expr.str.ends_with", "polars.Expr.str.escape_regex", "polars.Expr.str.explode", "polars.Expr.str.extract", "polars.Expr.str.extract_all", "polars.Expr.str.extract_groups", "polars.Expr.str.extract_many", "polars.Expr.str.find", "polars.Expr.str.find_many", "polars.Expr.str.head", "polars.Expr.str.join", "polars.Expr.str.json_decode", "polars.Expr.str.json_path_match", "polars.Expr.str.len_bytes", "polars.Expr.str.len_chars", "polars.Expr.str.normalize", "polars.Expr.str.pad_end", "polars.Expr.str.pad_start", "polars.Expr.str.replace", "polars.Expr.str.replace_all", "polars.Expr.str.replace_many", "polars.Expr.str.reverse", "polars.Expr.str.slice", "polars.Expr.str.split", "polars.Expr.str.split_exact", "polars.Expr.str.splitn", "polars.Expr.str.starts_with", "polars.Expr.str.strip_chars", "polars.Expr.str.strip_chars_end", "polars.Expr.str.strip_chars_start", "polars.Expr.str.strip_prefix", "polars.Expr.str.strip_suffix", "polars.Expr.str.strptime", "polars.Expr.str.tail", "polars.Expr.str.to_date", "polars.Expr.str.to_datetime", "polars.Expr.str.to_decimal", "polars.Expr.str.to_integer", "polars.Expr.str.to_lowercase", "polars.Expr.str.to_time", "polars.Expr.str.to_titlecase", "polars.Expr.str.to_uppercase", "polars.Expr.str.zfill", "polars.Expr.struct.field", "polars.Expr.struct.json_encode", "polars.Expr.struct.rename_fields", "polars.Expr.struct.unnest", "polars.Expr.struct.with_fields", "polars.Expr.sub", "polars.Expr.sum", "polars.Expr.tail", "polars.Expr.tan", "polars.Expr.tanh", "polars.Expr.to_physical", "polars.Expr.top_k", "polars.Expr.top_k_by", "polars.Expr.truediv", "polars.Expr.unique", "polars.Expr.unique_counts", "polars.Expr.upper_bound", "polars.Expr.value_counts", "polars.Expr.var", "polars.Expr.where", "polars.Expr.xor", "polars.all", "polars.all_horizontal", "polars.any", "polars.any_horizontal", "polars.approx_n_unique", "polars.arange", "polars.arctan2", "polars.arctan2d", "polars.arg_sort_by", "polars.arg_where", "polars.business_day_count", "polars.coalesce", "polars.concat_arr", "polars.concat_list", "polars.concat_str", "polars.corr", "polars.count", "polars.cov", "polars.cum_count", "polars.cum_fold", "polars.cum_reduce", "polars.cum_sum", "polars.cum_sum_horizontal", "polars.date", "polars.date_range", "polars.date_ranges", "polars.datetime", "polars.datetime_range", "polars.datetime_ranges", "polars.duration", "polars.element", "polars.exclude", "polars.first", "polars.fold", "polars.format", "polars.from_epoch", "polars.groups", "polars.head", "polars.implode", "polars.int_range", "polars.int_ranges", "polars.last", "polars.len", "polars.linear_space", "polars.lit", "polars.map_batches", "polars.map_groups", "polars.max", "polars.max_horizontal", "polars.mean", "polars.mean_horizontal", "polars.median", "polars.min", "polars.min_horizontal", "polars.n_unique", "polars.nth", "polars.ones", "polars.quantile", "polars.reduce", "polars.repeat", "polars.rolling_corr", "polars.rolling_cov", "polars.select", "polars.sql", "polars.sql_expr", "polars.std", "polars.struct", "polars.sum", "polars.sum_horizontal", "polars.tail", "polars.time", "polars.time_range", "polars.time_ranges", "polars.var", "polars.when", "polars.zeros", "Array", "Binary", "Boolean", "Categories", "polars.col", "Columns / names", "Computation", "Functions", "Expressions", "List", "Meta", "Miscellaneous", "Manipulation/selection", "Name", "Operators", "String", "Struct", "Temporal", "Window", "Functions", "Python API reference", "Input/output", "Aggregation", "polars.LazyFrame.approx_n_unique", "polars.LazyFrame.bottom_k", "polars.LazyFrame.cache", "polars.LazyFrame.cast", "polars.LazyFrame.clear", "polars.LazyFrame.clone", "polars.LazyFrame.collect", "polars.LazyFrame.collect_async", "polars.LazyFrame.collect_schema", "polars.LazyFrame.columns", "polars.LazyFrame.count", "polars.LazyFrame.describe", "polars.LazyFrame.deserialize", "polars.LazyFrame.drop", "polars.LazyFrame.drop_nans", "polars.LazyFrame.drop_nulls", "polars.LazyFrame.dtypes", "polars.LazyFrame.explain", "polars.LazyFrame.explode", "polars.LazyFrame.fill_nan", "polars.LazyFrame.fill_null", "polars.LazyFrame.filter", "polars.LazyFrame.first", "polars.LazyFrame.gather_every", "polars.LazyFrame.group_by", "polars.LazyFrame.group_by_dynamic", "polars.LazyFrame.head", "polars.LazyFrame.inspect", "polars.LazyFrame.interpolate", "polars.LazyFrame.join", "polars.LazyFrame.join_asof", "polars.LazyFrame.join_where", "polars.LazyFrame.last", "polars.LazyFrame.lazy", "polars.LazyFrame.limit", "polars.LazyFrame.map_batches", "polars.LazyFrame.max", "polars.LazyFrame.mean", "polars.LazyFrame.median", "polars.LazyFrame.melt", "polars.LazyFrame.merge_sorted", "polars.LazyFrame.min", "polars.LazyFrame.null_count", "polars.LazyFrame.pipe", "polars.LazyFrame.profile", "polars.LazyFrame.quantile", "polars.LazyFrame.rename", "polars.LazyFrame.reverse", "polars.LazyFrame.rolling", "polars.LazyFrame.schema", "polars.LazyFrame.select", "polars.LazyFrame.select_seq", "polars.LazyFrame.serialize", "polars.LazyFrame.set_sorted", "polars.LazyFrame.shift", "polars.LazyFrame.show_graph", "polars.LazyFrame.slice", "polars.LazyFrame.sort", "polars.LazyFrame.sql", "polars.LazyFrame.std", "polars.LazyFrame.sum", "polars.LazyFrame.tail", "polars.LazyFrame.top_k", "polars.LazyFrame.unique", "polars.LazyFrame.unnest", "polars.LazyFrame.unpivot", "polars.LazyFrame.update", "polars.LazyFrame.var", "polars.LazyFrame.width", "polars.LazyFrame.with_columns", "polars.LazyFrame.with_columns_seq", "polars.LazyFrame.with_context", "polars.LazyFrame.with_row_count", "polars.LazyFrame.with_row_index", "polars.lazyframe.engine_config.GPUEngine", "polars.lazyframe.group_by.LazyGroupBy.agg", "polars.lazyframe.group_by.LazyGroupBy.all", "polars.lazyframe.group_by.LazyGroupBy.count", "polars.lazyframe.group_by.LazyGroupBy.first", "polars.lazyframe.group_by.LazyGroupBy.head", "polars.lazyframe.group_by.LazyGroupBy.last", "polars.lazyframe.group_by.LazyGroupBy.len", "polars.lazyframe.group_by.LazyGroupBy.map_groups", "polars.lazyframe.group_by.LazyGroupBy.max", "polars.lazyframe.group_by.LazyGroupBy.mean", "polars.lazyframe.group_by.LazyGroupBy.median", "polars.lazyframe.group_by.LazyGroupBy.min", "polars.lazyframe.group_by.LazyGroupBy.n_unique", "polars.lazyframe.group_by.LazyGroupBy.quantile", "polars.lazyframe.group_by.LazyGroupBy.sum", "polars.lazyframe.group_by.LazyGroupBy.tail", "polars.lazyframe.in_process.InProcessQuery.cancel", "polars.lazyframe.in_process.InProcessQuery.fetch", "polars.lazyframe.in_process.InProcessQuery.fetch_blocking", "Attributes", "Descriptive", "GPUEngine", "GroupBy", "InProcessQuery", "LazyFrame", "Miscellaneous", "Manipulation/selection", "Metadata", "Plugins", "Schema", "Selectors", "Aggregation", "polars.Series.__array__", "polars.Series.__arrow_c_stream__", "polars.Series.__getitem__", "polars.Series.abs", "polars.Series.alias", "polars.Series.all", "polars.Series.any", "polars.Series.append", "polars.Series.approx_n_unique", "polars.Series.arccos", "polars.Series.arccosh", "polars.Series.arcsin", "polars.Series.arcsinh", "polars.Series.arctan", "polars.Series.arctanh", "polars.Series.arg_max", "polars.Series.arg_min", "polars.Series.arg_sort", "polars.Series.arg_true", "polars.Series.arg_unique", "polars.Series.arr.all", "polars.Series.arr.any", "polars.Series.arr.arg_max", "polars.Series.arr.arg_min", "polars.Series.arr.contains", "polars.Series.arr.count_matches", "polars.Series.arr.explode", "polars.Series.arr.first", "polars.Series.arr.get", "polars.Series.arr.join", "polars.Series.arr.last", "polars.Series.arr.max", "polars.Series.arr.median", "polars.Series.arr.min", "polars.Series.arr.n_unique", "polars.Series.arr.reverse", "polars.Series.arr.shift", "polars.Series.arr.sort", "polars.Series.arr.std", "polars.Series.arr.sum", "polars.Series.arr.to_list", "polars.Series.arr.to_struct", "polars.Series.arr.unique", "polars.Series.arr.var", "polars.Series.bin.contains", "polars.Series.bin.decode", "polars.Series.bin.encode", "polars.Series.bin.ends_with", "polars.Series.bin.reinterpret", "polars.Series.bin.size", "polars.Series.bin.starts_with", "polars.Series.bitwise_and", "polars.Series.bitwise_count_ones", "polars.Series.bitwise_count_zeros", "polars.Series.bitwise_leading_ones", "polars.Series.bitwise_leading_zeros", "polars.Series.bitwise_or", "polars.Series.bitwise_trailing_ones", "polars.Series.bitwise_trailing_zeros", "polars.Series.bitwise_xor", "polars.Series.bottom_k", "polars.Series.cast", "polars.Series.cat.ends_with", "polars.Series.cat.get_categories", "polars.Series.cat.is_local", "polars.Series.cat.len_bytes", "polars.Series.cat.len_chars", "polars.Series.cat.starts_with", "polars.Series.cat.to_local", "polars.Series.cat.uses_lexical_ordering", "polars.Series.cbrt", "polars.Series.ceil", "polars.Series.chunk_lengths", "polars.Series.clear", "polars.Series.clip", "polars.Series.clone", "polars.Series.cos", "polars.Series.cosh", "polars.Series.cot", "polars.Series.count", "polars.Series.cum_count", "polars.Series.cum_max", "polars.Series.cum_min", "polars.Series.cum_prod", "polars.Series.cum_sum", "polars.Series.cumulative_eval", "polars.Series.cut", "polars.Series.describe", "polars.Series.diff", "polars.Series.dot", "polars.Series.drop_nans", "polars.Series.drop_nulls", "polars.Series.dt.add_business_days", "polars.Series.dt.base_utc_offset", "polars.Series.dt.cast_time_unit", "polars.Series.dt.century", "polars.Series.dt.combine", "polars.Series.dt.convert_time_zone", "polars.Series.dt.date", "polars.Series.dt.datetime", "polars.Series.dt.day", "polars.Series.dt.dst_offset", "polars.Series.dt.epoch", "polars.Series.dt.hour", "polars.Series.dt.is_leap_year", "polars.Series.dt.iso_year", "polars.Series.dt.max", "polars.Series.dt.mean", "polars.Series.dt.median", "polars.Series.dt.microsecond", "polars.Series.dt.millennium", "polars.Series.dt.millisecond", "polars.Series.dt.min", "polars.Series.dt.minute", "polars.Series.dt.month", "polars.Series.dt.month_end", "polars.Series.dt.month_start", "polars.Series.dt.nanosecond", "polars.Series.dt.offset_by", "polars.Series.dt.ordinal_day", "polars.Series.dt.quarter", "polars.Series.dt.replace", "polars.Series.dt.replace_time_zone", "polars.Series.dt.round", "polars.Series.dt.second", "polars.Series.dt.strftime", "polars.Series.dt.time", "polars.Series.dt.timestamp", "polars.Series.dt.to_string", "polars.Series.dt.total_days", "polars.Series.dt.total_hours", "polars.Series.dt.total_microseconds", "polars.Series.dt.total_milliseconds", "polars.Series.dt.total_minutes", "polars.Series.dt.total_nanoseconds", "polars.Series.dt.total_seconds", "polars.Series.dt.truncate", "polars.Series.dt.week", "polars.Series.dt.weekday", "polars.Series.dt.with_time_unit", "polars.Series.dt.year", "polars.Series.dtype", "polars.Series.entropy", "polars.Series.eq", "polars.Series.eq_missing", "polars.Series.equals", "polars.Series.estimated_size", "polars.Series.ewm_mean", "polars.Series.ewm_mean_by", "polars.Series.ewm_std", "polars.Series.ewm_var", "polars.Series.exp", "polars.Series.explode", "polars.Series.extend", "polars.Series.extend_constant", "polars.Series.fill_nan", "polars.Series.fill_null", "polars.Series.filter", "polars.Series.first", "polars.Series.flags", "polars.Series.floor", "polars.Series.gather", "polars.Series.gather_every", "polars.Series.ge", "polars.Series.get_chunks", "polars.Series.gt", "polars.Series.has_nulls", "polars.Series.has_validity", "polars.Series.hash", "polars.Series.head", "polars.Series.hist", "polars.Series.implode", "polars.Series.index_of", "polars.Series.interpolate", "polars.Series.interpolate_by", "polars.Series.is_between", "polars.Series.is_duplicated", "polars.Series.is_empty", "polars.Series.is_finite", "polars.Series.is_first_distinct", "polars.Series.is_in", "polars.Series.is_infinite", "polars.Series.is_last_distinct", "polars.Series.is_nan", "polars.Series.is_not_nan", "polars.Series.is_not_null", "polars.Series.is_null", "polars.Series.is_sorted", "polars.Series.is_unique", "polars.Series.item", "polars.Series.kurtosis", "polars.Series.last", "polars.Series.le", "polars.Series.len", "polars.Series.limit", "polars.Series.list.all", "polars.Series.list.any", "polars.Series.list.arg_max", "polars.Series.list.arg_min", "polars.Series.list.concat", "polars.Series.list.contains", "polars.Series.list.count_matches", "polars.Series.list.diff", "polars.Series.list.drop_nulls", "polars.Series.list.eval", "polars.Series.list.explode", "polars.Series.list.first", "polars.Series.list.gather", "polars.Series.list.gather_every", "polars.Series.list.get", "polars.Series.list.head", "polars.Series.list.join", "polars.Series.list.last", "polars.Series.list.len", "polars.Series.list.max", "polars.Series.list.mean", "polars.Series.list.median", "polars.Series.list.min", "polars.Series.list.n_unique", "polars.Series.list.reverse", "polars.Series.list.sample", "polars.Series.list.set_difference", "polars.Series.list.set_intersection", "polars.Series.list.set_symmetric_difference", "polars.Series.list.set_union", "polars.Series.list.shift", "polars.Series.list.slice", "polars.Series.list.sort", "polars.Series.list.std", "polars.Series.list.sum", "polars.Series.list.tail", "polars.Series.list.to_array", "polars.Series.list.to_struct", "polars.Series.list.unique", "polars.Series.list.var", "polars.Series.log", "polars.Series.log10", "polars.Series.log1p", "polars.Series.lower_bound", "polars.Series.lt", "polars.Series.map_elements", "polars.Series.max", "polars.Series.mean", "polars.Series.median", "polars.Series.min", "polars.Series.mode", "polars.Series.n_chunks", "polars.Series.n_unique", "polars.Series.name", "polars.Series.nan_max", "polars.Series.nan_min", "polars.Series.ne", "polars.Series.ne_missing", "polars.Series.new_from_index", "polars.Series.not_", "polars.Series.null_count", "polars.Series.pct_change", "polars.Series.peak_max", "polars.Series.peak_min", "polars.Series.pow", "polars.Series.product", "polars.Series.qcut", "polars.Series.quantile", "polars.Series.rank", "polars.Series.rechunk", "polars.Series.reinterpret", "polars.Series.rename", "polars.Series.replace", "polars.Series.replace_strict", "polars.Series.reshape", "polars.Series.reverse", "polars.Series.rle", "polars.Series.rle_id", "polars.Series.rolling_map", "polars.Series.rolling_max", "polars.Series.rolling_mean", "polars.Series.rolling_median", "polars.Series.rolling_min", "polars.Series.rolling_quantile", "polars.Series.rolling_skew", "polars.Series.rolling_std", "polars.Series.rolling_sum", "polars.Series.rolling_var", "polars.Series.round", "polars.Series.round_sig_figs", "polars.Series.sample", "polars.Series.scatter", "polars.Series.search_sorted", "polars.Series.set", "polars.Series.set_sorted", "polars.Series.shape", "polars.Series.shift", "polars.Series.shrink_dtype", "polars.Series.shrink_to_fit", "polars.Series.shuffle", "polars.Series.sign", "polars.Series.sin", "polars.Series.sinh", "polars.Series.skew", "polars.Series.slice", "polars.Series.sort", "polars.Series.sqrt", "polars.Series.std", "polars.Series.str.concat", "polars.Series.str.contains", "polars.Series.str.contains_any", "polars.Series.str.count_matches", "polars.Series.str.decode", "polars.Series.str.encode", "polars.Series.str.ends_with", "polars.Series.str.escape_regex", "polars.Series.str.explode", "polars.Series.str.extract", "polars.Series.str.extract_all", "polars.Series.str.extract_groups", "polars.Series.str.extract_many", "polars.Series.str.find", "polars.Series.str.find_many", "polars.Series.str.head", "polars.Series.str.join", "polars.Series.str.json_decode", "polars.Series.str.json_path_match", "polars.Series.str.len_bytes", "polars.Series.str.len_chars", "polars.Series.str.normalize", "polars.Series.str.pad_end", "polars.Series.str.pad_start", "polars.Series.str.replace", "polars.Series.str.replace_all", "polars.Series.str.replace_many", "polars.Series.str.reverse", "polars.Series.str.slice", "polars.Series.str.split", "polars.Series.str.split_exact", "polars.Series.str.splitn", "polars.Series.str.starts_with", "polars.Series.str.strip_chars", "polars.Series.str.strip_chars_end", "polars.Series.str.strip_chars_start", "polars.Series.str.strip_prefix", "polars.Series.str.strip_suffix", "polars.Series.str.strptime", "polars.Series.str.tail", "polars.Series.str.to_date", "polars.Series.str.to_datetime", "polars.Series.str.to_decimal", "polars.Series.str.to_integer", "polars.Series.str.to_lowercase", "polars.Series.str.to_time", "polars.Series.str.to_titlecase", "polars.Series.str.to_uppercase", "polars.Series.str.zfill", "polars.Series.struct.field", "polars.Series.struct.fields", "polars.Series.struct.json_encode", "polars.Series.struct.rename_fields", "polars.Series.struct.schema", "polars.Series.struct.unnest", "polars.Series.sum", "polars.Series.tail", "polars.Series.tan", "polars.Series.tanh", "polars.Series.to_arrow", "polars.Series.to_dummies", "polars.Series.to_frame", "polars.Series.to_init_repr", "polars.Series.to_jax", "polars.Series.to_list", "polars.Series.to_numpy", "polars.Series.to_pandas", "polars.Series.to_physical", "polars.Series.to_torch", "polars.Series.top_k", "polars.Series.unique", "polars.Series.unique_counts", "polars.Series.upper_bound", "polars.Series.value_counts", "polars.Series.var", "polars.Series.zip_with", "Array", "Attributes", "Binary", "Boolean", "Categories", "Computation", "Descriptive", "Export", "Series", "List", "Miscellaneous", "Manipulation/selection", "Operators", "Plot", "String", "Struct", "Temporal", "polars.SQLContext.execute", "polars.SQLContext.execute_global", "polars.SQLContext.register", "polars.SQLContext.register_globals", "polars.SQLContext.register_many", "polars.SQLContext.tables", "polars.SQLContext.unregister", "SQL Clauses", "Aggregate", "Array", "Temporal", "Conditional", "SQL Functions", "Math", "String", "Temporal", "Trigonometry", "Types", "SQL Interface", "Python API", "Set Operations", "Table Operations", "Testing"], "titleterms": {"BY": [1353, 1366], "IF": 1357, "__array__": [194, 950], "__arrow_c_stream__": [195, 951], "__dataframe__": 196, "__getitem__": [197, 952], "__iter__": 316, "ab": [346, 953, 1359], "aco": 1362, "acosd": 1362, "add": 347, "add_business_dai": [435, 1042], "agg": [317, 918], "agg_group": 348, "aggreg": [193, 345, 842, 949, 1354], "alia": [349, 954], "alias": [1354, 1359, 1360], "align_fram": 51, "all": [318, 350, 366, 531, 744, 919, 955, 970, 1145, 1366], "all_horizont": 745, "and_": 351, "ani": [352, 367, 532, 746, 956, 971, 1146], "any_horizont": 747, "api": [1, 52, 53, 54, 55, 840, 1365], "append": [353, 957], "approx_n_uniqu": [198, 354, 748, 843, 958], "arang": 749, "arcco": [355, 959], "arccosh": [356, 960], "arcsin": [357, 961], "arcsinh": [358, 962], "arctan": [359, 963], "arctan2": 750, "arctan2d": 751, "arctanh": [360, 964], "arg_max": [361, 368, 533, 965, 972, 1147], "arg_min": [362, 369, 534, 966, 973, 1148], "arg_sort": [363, 967], "arg_sort_bi": 752, "arg_tru": [364, 968], "arg_uniqu": [365, 969], "arg_wher": 753, "arr": [366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993], "arrai": [60, 820, 1329, 1355], "array_agg": 1355, "array_contain": 1355, "array_get": 1355, "array_length": 1355, "array_low": 1355, "array_mean": 1355, "array_revers": 1355, "array_sum": 1355, "array_to_str": 1355, "array_uniqu": 1355, "array_upp": 1355, "asin": 1362, "asind": 1362, "assert": 1368, "assert_frame_equ": 161, "assert_frame_not_equ": 162, "assert_series_equ": 163, "assert_series_not_equ": 164, "atan": 1362, "atan2": 1362, "atan2d": 1362, "atand": 1362, "attribut": [333, 937, 1330], "avail": 1, "avg": 1354, "avro": 841, "backward_fil": 390, "base_utc_offset": [436, 1043], "batched_read": 132, "batchedcsvread": 132, "bin": [391, 392, 393, 394, 395, 396, 397, 994, 995, 996, 997, 998, 999, 1000], "binari": [61, 821, 834, 1331], "bit_and": 1356, "bit_count": 1356, "bit_length": 1360, "bit_or": 1356, "bit_xor": 1356, "bitwise_and": [398, 1001], "bitwise_count_on": [399, 1002], "bitwise_count_zero": [400, 1003], "bitwise_leading_on": [401, 1004], "bitwise_leading_zero": [402, 1005], "bitwise_or": [403, 1006], "bitwise_trailing_on": [404, 1007], "bitwise_trailing_zero": [405, 1008], "bitwise_xor": [406, 1009], "boolean": [62, 822, 1332], "bottom_k": [199, 407, 844, 1010], "bottom_k_bi": 408, "build_info": 56, "business_day_count": 754, "cach": 845, "cancel": 934, "cast": [200, 409, 846, 1011, 1363], "cast_time_unit": [437, 1044], "cat": [410, 411, 412, 413, 414, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019], "catalog": [177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191], "cataloginfo": 183, "categor": 63, "categori": [823, 1333], "categoricalremappingwarn": 93, "cbrt": [415, 1020, 1359], "ceil": [416, 1021, 1359], "centuri": [438, 1045], "chronoformatwarn": 94, "chunk_length": 1022, "claus": 1353, "clear": [201, 847, 1023], "clip": [417, 1024], "clipboard": 841, "clone": [202, 848, 1025], "cloud": 841, "co": [418, 1026, 1362], "coalesc": [755, 1357], "col": 824, "collect": 849, "collect_al": 57, "collect_all_async": 58, "collect_async": 850, "collect_schema": [203, 851], "column": [165, 166, 204, 825, 852], "columninfo": 184, "columnnotfounderror": 95, "combin": [439, 1046], "comparison": [834, 1341], "comput": [334, 826, 1334], "computeerror": 96, "concat": [59, 535, 674, 1149, 1253, 1360], "concat_arr": 756, "concat_list": 757, "concat_str": 758, "concat_w": 1360, "condit": 1357, "config": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 192], "conjunct": 834, "contain": [370, 391, 536, 675, 974, 994, 1150, 1254], "contains_ani": [676, 1255], "context": 192, "convers": 839, "convert_time_zon": [440, 1047], "corr": [205, 759], "cosd": 1362, "cosh": [419, 1027], "cot": [420, 1028, 1362], "cotd": 1362, "count": [206, 319, 421, 760, 853, 920, 1029, 1354], "count_match": [371, 537, 677, 975, 1151, 1256], "cov": 761, "creat": 1367, "create_list_strategi": 167, "credenti": 841, "credentialprovid": 31, "credentialprovideraw": 32, "credentialproviderazur": 33, "credentialprovidergcp": 34, "csv": [132, 841], "cum_count": [422, 762, 1030], "cum_fold": 763, "cum_max": [423, 1031], "cum_min": [424, 1032], "cum_prod": [425, 1033], "cum_reduc": 764, "cum_sum": [426, 765, 1034], "cum_sum_horizont": 766, "cumulative_ev": [427, 1035], "customufuncwarn": 97, "cut": [428, 1036], "dai": [443, 1050], "data": 343, "databas": 841, "datafram": [35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 168, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 338], "dataorientationwarn": 98, "dataset": 841, "datasourceformat": 185, "datatyp": [60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 343], "date": [65, 441, 767, 1048, 1360], "date_part": 1361, "date_rang": [768, 769], "datetim": [66, 442, 770, 1049], "datetime_rang": [771, 772], "decim": 67, "decod": [392, 678, 995, 1257], "decor": 192, "degre": [429, 1362], "delta": 841, "describ": [207, 854, 1037], "descript": [335, 938, 1335], "deseri": [208, 430, 855], "diff": [431, 538, 1038, 1152], "disable_string_cach": 90, "distinct": 1353, "div": 1359, "document": 1365, "dot": [432, 1039], "drop": [209, 856, 1367], "drop_in_plac": 210, "drop_nan": [211, 433, 857, 1040], "drop_nul": [212, 434, 539, 858, 1041, 1153], "dst_offset": [444, 1051], "dt": [435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090], "dtype": [169, 213, 859, 1091], "duplicateerror": 99, "durat": [68, 773], "element": 774, "enable_string_cach": 91, "encod": [393, 679, 996, 1258], "ends_with": [394, 410, 680, 997, 1012, 1259, 1360], "engine_config": 917, "entropi": [480, 1092], "enum": 69, "epoch": [445, 1052], "eq": [481, 581, 1093], "eq_miss": [482, 1094], "equal": [214, 1095], "error": 344, "escape_regex": [92, 681, 1260], "estimated_s": [215, 1096], "eval": [540, 1154], "ewm_mean": [483, 1097], "ewm_mean_bi": [484, 1098], "ewm_std": [485, 1099], "ewm_var": [486, 1100], "exampl": [1, 948, 1368], "excel": 841, "except": [93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 344, 1366], "exclud": [487, 775], "execut": 1346, "execute_glob": 1347, "exp": [488, 1101, 1359], "explain": [860, 1367], "explod": [216, 372, 489, 541, 682, 861, 976, 1102, 1155, 1261], "export": [336, 1336], "expr": [346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743], "express": [828, 946, 1365], "extend": [1, 217, 1103], "extend_const": [490, 1104], "extract": [683, 1262, 1361], "extract_al": [684, 1263], "extract_group": [685, 1264], "extract_mani": [686, 1265], "feather": 841, "fetch": 935, "fetch_block": 936, "field": [70, 723, 1302, 1303], "fill_nan": [218, 491, 862, 1105], "fill_nul": [219, 492, 863, 1106], "filter": [220, 493, 864, 1107], "find": [687, 1266], "find_mani": [688, 1267], "first": [320, 373, 494, 542, 776, 865, 921, 977, 1108, 1156, 1354], "flag": [221, 1109], "flatten": 495, "float32": 71, "float64": 72, "floor": [496, 1110, 1359], "floordiv": 497, "fold": [222, 777], "format": 778, "forward_fil": 498, "frame": 1365, "from": 1353, "from_arrow": 123, "from_datafram": 124, "from_dict": [125, 126], "from_epoch": 779, "from_json": 499, "from_numpi": 127, "from_panda": 128, "from_record": 129, "from_repr": 130, "function": [1, 827, 839, 948, 1358], "gather": [500, 543, 1111, 1157], "gather_everi": [223, 501, 544, 866, 1112, 1158], "ge": [502, 1113], "get": [374, 503, 545, 978, 1159], "get_categori": [411, 1013], "get_chunk": 1114, "get_column": [224, 226], "get_column_index": 225, "get_index_typ": 131, "get_polars_schema": 188, "get_table_info": 178, "glimps": 227, "global": 1365, "gpuengin": [917, 939], "greatest": 1357, "group": [780, 1353], "group_bi": [228, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 867, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "group_by_dynam": [229, 868], "groupbi": [316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 337, 940], "gt": [504, 1115], "has_multiple_output": 582, "has_nul": [505, 1116], "has_valid": 1117, "hash": [506, 1118], "hash_row": 230, "have": 1353, "head": [231, 321, 507, 546, 689, 781, 869, 922, 1119, 1160, 1268], "height": 232, "helper": 1368, "hist": [508, 1120], "hour": [446, 1053], "hstack": 233, "iceberg": 841, "ifnul": 1357, "implod": [509, 782, 1121], "import": 948, "in_process": [934, 935, 936], "index": 0, "index_of": [510, 1122], "initcap": 1360, "inprocessqueri": [934, 935, 936, 941], "input": 841, "insert_column": 234, "inspect": [511, 870], "instanc": 192, "int128": 73, "int16": 74, "int32": 75, "int64": 76, "int8": 77, "int_rang": [783, 784], "interfac": 1364, "interpol": [235, 512, 871, 1123], "interpolate_bi": [513, 1124], "intersect": 1366, "introduct": 1365, "invalidoperationerror": 100, "io": [132, 133, 946], "ipc": 841, "is_between": [514, 1125], "is_column": 583, "is_column_select": 584, "is_dupl": [236, 515, 1126], "is_empti": [237, 1127], "is_finit": [516, 1128], "is_first_distinct": [517, 1129], "is_in": [518, 1130], "is_infinit": [519, 1131], "is_last_distinct": [520, 1132], "is_leap_year": [447, 1054], "is_liter": 585, "is_loc": 1014, "is_nan": [521, 1133], "is_not_nan": [522, 1134], "is_not_nul": [523, 1135], "is_nul": [524, 1136], "is_regex_project": 586, "is_sort": 1137, "is_uniqu": [238, 525, 1138], "iso_year": [448, 1055], "item": [239, 1139], "iter_column": 240, "iter_row": 241, "iter_slic": 242, "join": [243, 375, 547, 690, 872, 979, 1161, 1269, 1353], "join_asof": [244, 873], "join_wher": [245, 874], "json": 841, "json_decod": [691, 1270], "json_encod": [724, 1304], "json_norm": 134, "json_path_match": [692, 1271], "keep": 601, "kurtosi": [526, 1140], "lake": 841, "last": [322, 376, 527, 548, 785, 875, 923, 980, 1141, 1162, 1354], "lazi": [246, 876], "lazyfram": [46, 47, 48, 49, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 942], "lazygroupbi": [918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933], "le": [528, 1142], "least": 1357, "left": 1360, "len": [323, 529, 549, 786, 924, 1143, 1163], "len_byt": [412, 693, 1015, 1272], "len_char": [413, 694, 1016, 1273], "length": 1360, "limit": [247, 530, 877, 1144, 1353], "linear_spac": 787, "list": [78, 170, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 829, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1338], "list_catalog": 179, "list_namespac": 180, "list_tabl": 181, "lit": 788, "ln": 1359, "load": [2, 192], "load_from_fil": 3, "load_profil": 171, "log": [571, 1185, 1359], "log10": [572, 1186, 1359], "log1p": [573, 1187, 1359], "log2": 1359, "lower": 1360, "lower_bound": [574, 1188], "lt": [575, 1189], "ltrim": 1360, "manag": 192, "manipul": [340, 832, 944, 1340], "map": 602, "map_batch": [576, 789, 878], "map_el": [577, 1190], "map_field": 603, "map_group": [324, 790, 925], "map_row": 248, "mapwithoutreturndtypewarn": 101, "math": 1359, "max": [249, 325, 377, 550, 578, 791, 879, 926, 981, 1056, 1164, 1191, 1354], "max_horizont": [250, 792], "mean": [251, 326, 551, 579, 793, 880, 927, 1057, 1165, 1192], "mean_horizont": [252, 794], "median": [253, 327, 378, 552, 580, 795, 881, 928, 982, 1058, 1166, 1193, 1354], "melt": [254, 882], "merge_sort": [255, 883], "meta": [581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 830], "metadata": 945, "method": 1365, "microsecond": [449, 1059], "millennium": [450, 1060], "millisecond": [451, 1061], "min": [256, 328, 379, 553, 596, 796, 884, 929, 983, 1062, 1167, 1194, 1354], "min_horizont": [257, 797], "minut": [452, 1063], "miscellan": [339, 831, 839, 943, 1339], "mod": [597, 1359], "mode": [598, 1195], "moduleupgraderequirederror": 102, "month": [453, 1064], "month_end": [454, 1065], "month_start": [455, 1066], "mul": 599, "multipl": 192, "n_chunk": [258, 1196], "n_uniqu": [259, 329, 380, 554, 600, 798, 930, 984, 1168, 1197], "name": [601, 602, 603, 604, 605, 606, 607, 608, 609, 825, 833, 1198, 1366], "namespaceinfo": 186, "nan_max": [610, 1199], "nan_min": [611, 1200], "nanosecond": [456, 1067], "ne": [587, 612, 1201], "ne_miss": [613, 1202], "neg": 614, "nest": 343, "new": 1, "new_from_index": 1203, "next_batch": 132, "nodataerror": 103, "normal": [695, 1274, 1360], "norowsreturnederror": 104, "not_": [615, 1204], "nth": 799, "null": 79, "null_count": [260, 616, 885, 1205], "nullif": 1357, "numer": [343, 834, 1341], "object": 80, "octet_length": 1360, "od": 841, "offset": 1353, "offset_bi": [457, 1068], "ones": 800, "oper": [834, 948, 1341, 1366, 1367], "option": 192, "or_": 617, "order": 1353, "ordinal_dai": [458, 1069], "other": 343, "outofboundserror": 105, "output": 841, "output_nam": 588, "over": 618, "pad_end": [696, 1275], "pad_start": [697, 1276], "panic": 344, "panicexcept": 106, "parallel": 839, "parametercollisionerror": 107, "parametr": [165, 166, 167, 168, 169, 170, 171, 172, 173, 1368], "parquet": 841, "partition_bi": 261, "pct_chang": [619, 1206], "peak_max": [620, 1207], "peak_min": [621, 1208], "performancewarn": 108, "pi": 1359, "pipe": [262, 622, 886], "pivot": 263, "plot": [341, 1342], "plugin": [133, 135, 946], "polar": [2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 96, 97, 98, 99, 100, 101, 102, 103, 104, 105, 106, 107, 108, 109, 110, 111, 112, 113, 114, 115, 116, 117, 118, 119, 120, 121, 122, 123, 124, 125, 126, 127, 128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, 144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, 160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, 176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 194, 195, 196, 197, 198, 199, 200, 201, 202, 203, 204, 205, 206, 207, 208, 209, 210, 211, 212, 213, 214, 215, 216, 217, 218, 219, 220, 221, 222, 223, 224, 225, 226, 227, 228, 229, 230, 231, 232, 233, 234, 235, 236, 237, 238, 239, 240, 241, 242, 243, 244, 245, 246, 247, 248, 249, 250, 251, 252, 253, 254, 255, 256, 257, 258, 259, 260, 261, 262, 263, 264, 265, 266, 267, 268, 269, 270, 271, 272, 273, 274, 275, 276, 277, 278, 279, 280, 281, 282, 283, 284, 285, 286, 287, 288, 289, 290, 291, 292, 293, 294, 295, 296, 297, 298, 299, 300, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, 316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329, 330, 331, 332, 346, 347, 348, 349, 350, 351, 352, 353, 354, 355, 356, 357, 358, 359, 360, 361, 362, 363, 364, 365, 366, 367, 368, 369, 370, 371, 372, 373, 374, 375, 376, 377, 378, 379, 380, 381, 382, 383, 384, 385, 386, 387, 388, 389, 390, 391, 392, 393, 394, 395, 396, 397, 398, 399, 400, 401, 402, 403, 404, 405, 406, 407, 408, 409, 410, 411, 412, 413, 414, 415, 416, 417, 418, 419, 420, 421, 422, 423, 424, 425, 426, 427, 428, 429, 430, 431, 432, 433, 434, 435, 436, 437, 438, 439, 440, 441, 442, 443, 444, 445, 446, 447, 448, 449, 450, 451, 452, 453, 454, 455, 456, 457, 458, 459, 460, 461, 462, 463, 464, 465, 466, 467, 468, 469, 470, 471, 472, 473, 474, 475, 476, 477, 478, 479, 480, 481, 482, 483, 484, 485, 486, 487, 488, 489, 490, 491, 492, 493, 494, 495, 496, 497, 498, 499, 500, 501, 502, 503, 504, 505, 506, 507, 508, 509, 510, 511, 512, 513, 514, 515, 516, 517, 518, 519, 520, 521, 522, 523, 524, 525, 526, 527, 528, 529, 530, 531, 532, 533, 534, 535, 536, 537, 538, 539, 540, 541, 542, 543, 544, 545, 546, 547, 548, 549, 550, 551, 552, 553, 554, 555, 556, 557, 558, 559, 560, 561, 562, 563, 564, 565, 566, 567, 568, 569, 570, 571, 572, 573, 574, 575, 576, 577, 578, 579, 580, 581, 582, 583, 584, 585, 586, 587, 588, 589, 590, 591, 592, 593, 594, 595, 596, 597, 598, 599, 600, 601, 602, 603, 604, 605, 606, 607, 608, 609, 610, 611, 612, 613, 614, 615, 616, 617, 618, 619, 620, 621, 622, 623, 624, 625, 626, 627, 628, 629, 630, 631, 632, 633, 634, 635, 636, 637, 638, 639, 640, 641, 642, 643, 644, 645, 646, 647, 648, 649, 650, 651, 652, 653, 654, 655, 656, 657, 658, 659, 660, 661, 662, 663, 664, 665, 666, 667, 668, 669, 670, 671, 672, 673, 674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 723, 724, 725, 726, 727, 728, 729, 730, 731, 732, 733, 734, 735, 736, 737, 738, 739, 740, 741, 742, 743, 744, 745, 746, 747, 748, 749, 750, 751, 752, 753, 754, 755, 756, 757, 758, 759, 760, 761, 762, 763, 764, 765, 766, 767, 768, 769, 770, 771, 772, 773, 774, 775, 776, 777, 778, 779, 780, 781, 782, 783, 784, 785, 786, 787, 788, 789, 790, 791, 792, 793, 794, 795, 796, 797, 798, 799, 800, 801, 802, 803, 804, 805, 806, 807, 808, 809, 810, 811, 812, 813, 814, 815, 816, 817, 818, 819, 824, 843, 844, 845, 846, 847, 848, 849, 850, 851, 852, 853, 854, 855, 856, 857, 858, 859, 860, 861, 862, 863, 864, 865, 866, 867, 868, 869, 870, 871, 872, 873, 874, 875, 876, 877, 878, 879, 880, 881, 882, 883, 884, 885, 886, 887, 888, 889, 890, 891, 892, 893, 894, 895, 896, 897, 898, 899, 900, 901, 902, 903, 904, 905, 906, 907, 908, 909, 910, 911, 912, 913, 914, 915, 916, 917, 918, 919, 920, 921, 922, 923, 924, 925, 926, 927, 928, 929, 930, 931, 932, 933, 934, 935, 936, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1346, 1347, 1348, 1349, 1350, 1351, 1352, 1368], "polarserror": 109, "polarsinefficientmapwarn": 110, "polarswarn": 111, "pop": 589, "pow": [623, 1209, 1359], "prefix": 604, "prefix_field": 605, "product": [264, 624, 1210], "profil": [887, 1368], "provid": 1, "pyarrow": 841, "python": [840, 1365], "qcut": [625, 1211], "quantil": [265, 330, 626, 801, 888, 931, 1212], "quantile_cont": 1354, "quantile_disc": 1354, "quarter": [459, 1070], "queri": 1365, "radian": [627, 1362], "random": 839, "rank": [628, 1213], "read_avro": 136, "read_clipboard": 137, "read_csv": 138, "read_csv_batch": 139, "read_databas": 140, "read_database_uri": 141, "read_delta": 142, "read_excel": 143, "read_ipc": 144, "read_ipc_schema": 145, "read_ipc_stream": 146, "read_json": 147, "read_ndjson": 148, "read_od": 149, "read_parquet": 150, "read_parquet_schema": 151, "rechunk": [266, 629, 1214], "reduc": 802, "refer": 840, "regexp_lik": 1360, "regist": 1348, "register_dataframe_namespac": 52, "register_expr_namespac": 53, "register_glob": 1349, "register_io_sourc": 133, "register_lazyframe_namespac": 54, "register_mani": 1350, "register_plugin_funct": 135, "register_series_namespac": 55, "registr": 1, "reinterpret": [395, 630, 998, 1215], "renam": [267, 889, 1216], "rename_field": [725, 1305], "repeat": 803, "repeat_bi": 631, "replac": [460, 632, 698, 1071, 1217, 1277, 1360], "replace_al": [699, 1278], "replace_column": 268, "replace_mani": [700, 1279], "replace_strict": [633, 1218], "replace_time_zon": [461, 1072], "reshap": [634, 1219], "restore_default": 4, "revers": [269, 381, 555, 635, 701, 890, 985, 1169, 1220, 1280, 1360], "right": 1360, "rle": [636, 1221], "rle_id": [637, 1222], "roll": [270, 638, 891], "rolling_corr": 804, "rolling_cov": 805, "rolling_map": [639, 1223], "rolling_max": [640, 1224], "rolling_max_bi": 641, "rolling_mean": [642, 1225], "rolling_mean_bi": 643, "rolling_median": [644, 1226], "rolling_median_bi": 645, "rolling_min": [646, 1227], "rolling_min_bi": 647, "rolling_quantil": [648, 1228], "rolling_quantile_bi": 649, "rolling_skew": [650, 1229], "rolling_std": [651, 1230], "rolling_std_bi": 652, "rolling_sum": [653, 1231], "rolling_sum_bi": 654, "rolling_var": [655, 1232], "rolling_var_bi": 656, "root_nam": 590, "round": [462, 657, 1073, 1233, 1359], "round_sig_fig": [658, 1234], "row": [271, 272], "rows_by_kei": 273, "rowserror": 112, "rtrim": 1360, "sampl": [274, 556, 659, 1170, 1235], "save": [5, 192], "save_to_fil": 6, "scan_csv": 152, "scan_delta": 153, "scan_iceberg": 154, "scan_ipc": 155, "scan_ndjson": 156, "scan_parquet": 157, "scan_pyarrow_dataset": 158, "scan_tabl": 182, "scatter": 1236, "schema": [275, 892, 947, 1306], "schemaerror": 115, "schemafieldnotfounderror": 116, "search_sort": [660, 1237], "second": [463, 1074], "select": [276, 340, 806, 832, 893, 944, 1340, 1353], "select_seq": [277, 894], "selector": 948, "seri": [172, 950, 951, 952, 953, 954, 955, 956, 957, 958, 959, 960, 961, 962, 963, 964, 965, 966, 967, 968, 969, 970, 971, 972, 973, 974, 975, 976, 977, 978, 979, 980, 981, 982, 983, 984, 985, 986, 987, 988, 989, 990, 991, 992, 993, 994, 995, 996, 997, 998, 999, 1000, 1001, 1002, 1003, 1004, 1005, 1006, 1007, 1008, 1009, 1010, 1011, 1012, 1013, 1014, 1015, 1016, 1017, 1018, 1019, 1020, 1021, 1022, 1023, 1024, 1025, 1026, 1027, 1028, 1029, 1030, 1031, 1032, 1033, 1034, 1035, 1036, 1037, 1038, 1039, 1040, 1041, 1042, 1043, 1044, 1045, 1046, 1047, 1048, 1049, 1050, 1051, 1052, 1053, 1054, 1055, 1056, 1057, 1058, 1059, 1060, 1061, 1062, 1063, 1064, 1065, 1066, 1067, 1068, 1069, 1070, 1071, 1072, 1073, 1074, 1075, 1076, 1077, 1078, 1079, 1080, 1081, 1082, 1083, 1084, 1085, 1086, 1087, 1088, 1089, 1090, 1091, 1092, 1093, 1094, 1095, 1096, 1097, 1098, 1099, 1100, 1101, 1102, 1103, 1104, 1105, 1106, 1107, 1108, 1109, 1110, 1111, 1112, 1113, 1114, 1115, 1116, 1117, 1118, 1119, 1120, 1121, 1122, 1123, 1124, 1125, 1126, 1127, 1128, 1129, 1130, 1131, 1132, 1133, 1134, 1135, 1136, 1137, 1138, 1139, 1140, 1141, 1142, 1143, 1144, 1145, 1146, 1147, 1148, 1149, 1150, 1151, 1152, 1153, 1154, 1155, 1156, 1157, 1158, 1159, 1160, 1161, 1162, 1163, 1164, 1165, 1166, 1167, 1168, 1169, 1170, 1171, 1172, 1173, 1174, 1175, 1176, 1177, 1178, 1179, 1180, 1181, 1182, 1183, 1184, 1185, 1186, 1187, 1188, 1189, 1190, 1191, 1192, 1193, 1194, 1195, 1196, 1197, 1198, 1199, 1200, 1201, 1202, 1203, 1204, 1205, 1206, 1207, 1208, 1209, 1210, 1211, 1212, 1213, 1214, 1215, 1216, 1217, 1218, 1219, 1220, 1221, 1222, 1223, 1224, 1225, 1226, 1227, 1228, 1229, 1230, 1231, 1232, 1233, 1234, 1235, 1236, 1237, 1238, 1239, 1240, 1241, 1242, 1243, 1244, 1245, 1246, 1247, 1248, 1249, 1250, 1251, 1252, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301, 1302, 1303, 1304, 1305, 1306, 1307, 1308, 1309, 1310, 1311, 1312, 1313, 1314, 1315, 1316, 1317, 1318, 1319, 1320, 1321, 1322, 1323, 1324, 1325, 1326, 1327, 1328, 1337], "serial": [278, 339, 591, 895, 943], "set": [948, 1238, 1366], "set_ascii_t": 7, "set_auto_structifi": 8, "set_decimal_separ": 9, "set_differ": [557, 1171], "set_float_precis": 10, "set_fmt_float": 11, "set_fmt_str_length": 12, "set_fmt_table_cell_list_len": 13, "set_intersect": [558, 1172], "set_profil": 173, "set_random_se": 159, "set_sort": [279, 661, 896, 1239], "set_streaming_chunk_s": 14, "set_symmetric_differ": [559, 1173], "set_tbl_cell_align": 15, "set_tbl_cell_numeric_align": 16, "set_tbl_col": 17, "set_tbl_column_data_type_inlin": 18, "set_tbl_dataframe_shape_below": 19, "set_tbl_format": 20, "set_tbl_hide_column_data_typ": 21, "set_tbl_hide_column_nam": 22, "set_tbl_hide_dataframe_shap": 23, "set_tbl_hide_dtype_separ": 24, "set_tbl_row": 25, "set_tbl_width_char": 26, "set_thousands_separ": 27, "set_trim_decimal_zero": 28, "set_union": [560, 1174], "set_verbos": 29, "shape": [280, 1240], "shapeerror": 117, "shift": [281, 382, 561, 662, 897, 986, 1175, 1241], "show": 1367, "show_graph": [592, 898], "show_vers": 160, "shrink_dtyp": [663, 1242], "shrink_to_fit": [282, 1243], "shuffl": [664, 1244], "sign": [665, 1245, 1359], "sin": [666, 1246, 1362], "sind": 1362, "sinh": [667, 1247], "sink_csv": 46, "sink_ipc": 47, "sink_ndjson": 48, "sink_parquet": 49, "size": [396, 999], "skew": [668, 1248], "slice": [283, 562, 669, 702, 899, 1176, 1249, 1281], "sort": [284, 383, 563, 670, 900, 987, 1177, 1250], "sort_bi": 671, "split": [703, 1282], "split_exact": [704, 1283], "splitn": [705, 1284], "sql": [285, 807, 901, 1353, 1358, 1364, 1365], "sql_expr": 808, "sqlcontext": [1346, 1347, 1348, 1349, 1350, 1351, 1352, 1365], "sqlinterfaceerror": 113, "sqlsyntaxerror": 114, "sqrt": [672, 1251, 1359], "starts_with": [397, 414, 706, 1000, 1017, 1285, 1360], "state": [30, 192], "std": [286, 384, 564, 673, 809, 902, 988, 1178, 1252], "stddev": 1354, "str": [674, 675, 676, 677, 678, 679, 680, 681, 682, 683, 684, 685, 686, 687, 688, 689, 690, 691, 692, 693, 694, 695, 696, 697, 698, 699, 700, 701, 702, 703, 704, 705, 706, 707, 708, 709, 710, 711, 712, 713, 714, 715, 716, 717, 718, 719, 720, 721, 722, 1253, 1254, 1255, 1256, 1257, 1258, 1259, 1260, 1261, 1262, 1263, 1264, 1265, 1266, 1267, 1268, 1269, 1270, 1271, 1272, 1273, 1274, 1275, 1276, 1277, 1278, 1279, 1280, 1281, 1282, 1283, 1284, 1285, 1286, 1287, 1288, 1289, 1290, 1291, 1292, 1293, 1294, 1295, 1296, 1297, 1298, 1299, 1300, 1301], "strategi": 1368, "strftime": [464, 1075, 1361], "string": [81, 343, 835, 1343, 1360], "stringcach": [50, 839], "stringcachemismatcherror": 118, "strip_char": [707, 1286], "strip_chars_end": [708, 1287], "strip_chars_start": [709, 1288], "strip_prefix": [710, 1289], "strip_suffix": [711, 1290], "strpo": 1360, "strptime": [712, 1291, 1360], "struct": [82, 723, 724, 725, 726, 727, 810, 836, 1302, 1303, 1304, 1305, 1306, 1307, 1344], "structfieldnotfounderror": 119, "style": 342, "sub": 728, "substr": 1360, "suffix": 606, "suffix_field": 607, "sum": [287, 331, 385, 565, 729, 811, 903, 932, 989, 1179, 1308, 1354], "sum_horizont": [288, 812], "tabl": [1351, 1367], "tableinfo": [187, 188], "tabletyp": 189, "tail": [289, 332, 566, 713, 730, 813, 904, 933, 1180, 1292, 1309], "tan": [731, 1310, 1362], "tand": 1362, "tanh": [732, 1311], "tempor": [343, 837, 1345, 1356, 1361], "test": [161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 1368], "thread_pool_s": 174, "threadpool_s": 175, "time": [83, 465, 814, 1076], "time_rang": [815, 816], "timestamp": [466, 1077, 1360], "to_arrai": [567, 1181], "to_arrow": [290, 1312], "to_dat": [714, 1293], "to_datetim": [715, 1294], "to_decim": [716, 1295], "to_dict": [291, 292], "to_dummi": [293, 1313], "to_fram": 1314, "to_init_repr": [294, 1315], "to_integ": [717, 1296], "to_jax": [295, 1316], "to_list": [386, 990, 1317], "to_loc": 1018, "to_lowercas": [608, 718, 1297], "to_numpi": [296, 1318], "to_panda": [297, 1319], "to_phys": [733, 1320], "to_seri": 298, "to_str": [467, 1078], "to_struct": [299, 387, 568, 991, 1182], "to_tim": [719, 1298], "to_titlecas": [720, 1299], "to_torch": [300, 1321], "to_uppercas": [609, 721, 1300], "toomanyrowsreturnederror": 120, "top_k": [301, 734, 905, 1322], "top_k_bi": 735, "total_dai": [468, 1079], "total_hour": [469, 1080], "total_microsecond": [470, 1081], "total_millisecond": [471, 1082], "total_minut": [472, 1083], "total_nanosecond": [473, 1084], "total_second": [474, 1085], "transpos": 302, "tree_format": 593, "trigonometri": 1362, "truediv": 736, "truncat": [475, 1086, 1367], "try_cast": 1363, "type": [343, 1363], "uint16": 84, "uint32": 85, "uint64": 86, "uint8": 87, "undo_alias": 594, "union": 1366, "uniqu": [303, 388, 569, 737, 906, 992, 1183, 1323], "unique_count": [738, 1324], "uniti": [183, 184, 185, 186, 187, 188, 189, 191], "unknown": 88, "unnest": [304, 726, 907, 1307, 1355, 1367], "unpivot": [305, 908], "unregist": 1352, "unstablewarn": 121, "unstack": 306, "unsuitablesqlerror": 122, "updat": [307, 909], "upper": 1360, "upper_bound": [739, 1325], "upsampl": 308, "us": 192, "uses_lexical_ord": 1019, "using_string_cach": 176, "utf8": 89, "value_count": [740, 1326], "var": [309, 389, 570, 741, 817, 910, 993, 1184, 1327], "varianc": 1354, "vstack": 310, "warn": 344, "week": [476, 1087], "weekdai": [477, 1088], "when": 818, "where": [742, 1353], "width": [311, 911], "window": 838, "with_column": [312, 912], "with_columns_seq": [313, 913], "with_context": 914, "with_field": 727, "with_row_count": [314, 915], "with_row_index": [315, 916], "with_time_unit": [478, 1089], "write_avro": 35, "write_clipboard": 36, "write_csv": 37, "write_databas": 38, "write_delta": 39, "write_excel": 40, "write_ipc": 41, "write_ipc_stream": 42, "write_json": [43, 595], "write_ndjson": 44, "write_parquet": 45, "xor": 743, "year": [479, 1090], "zero": 819, "zfill": [722, 1301], "zip_with": 1328}})